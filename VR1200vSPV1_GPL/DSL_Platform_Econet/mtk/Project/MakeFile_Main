include Project/release.chk
include Project/customer_release/c_release.chk
ifneq ($(strip $(CUSTOM)),)
ifneq ($(strip $(KERNEL_2_6_36)),)
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
else
CUSTOM=RT
ifneq ($(strip $(KERNEL_2_6_36)),)
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
endif
include Project/dir.mak
include Project/rule.mak

export CFG_CFLAGS = -msoft-float -fomit-frame-pointer


#Cross Compile Setup
nullstring :=
space :=$(nullstring) #end of line
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
export PATH :=/opt/trendchip/mips-linux-3.4.6/bin:$(PATH)
export HOST=mips-linux-
#export CROSS=/opt/trendchip/mips-linux-3.4.6/bin/mips-linux-
export CROSS=mips-linux-
export CROSS_COMPILE=$(CROSS)
export CC=$(CROSS)gcc
export LD=$(CROSS)ld
export AR=$(CROSS)ar
export STRIP=$(CROSS)strip
TC3162_CFLAG=$(space)-mips1 -msoft-float
CFG_CFLAGS += -mips1
endif
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-unknown-linux-uclibc)
export PATH := /opt/trendchip/mips-linux-uclibc-4.3.6-v2/usr/bin:$(PATH)
export HOST=mips-linux
export CROSS=mips-unknown-linux-uclibc-
export CROSS_COMPILE=$(CROSS)
export CC=$(CROSS)gcc -mips32r2 -msoft-float
export CCC=$(CROSS)g++ -mips32r2 -msoft-float
export LD=$(CROSS)ld
export AR=$(CROSS)ar
export STRIP=$(CROSS)strip
export SYSROOT=/opt/trendchip/mips-linux-uclibc-4.3.6-v2/usr/mips-unknown-linux-uclibc/sysroot
export LD_LIBRARY_PATH:=/opt/trendchip/mips-linux-uclibc-4.3.6-v2/usr/lib:$(LD_LIBRARY_PATH)
CFG_CFLAGS += -mips32r2 -muclibc
endif

ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-uclibc)
export PATH :=/opt/trendchip/mips-linux-uclibc/usr/bin:$(PATH)
export HOST=mips-linux
export CROSS=mips-linux-uclibc-
export CROSS_COMPILE=$(CROSS)
export CC=mips-linux-uclibc-gcc -mips32r2 -msoft-float
export STRIP=mips-linux-uclibc-strip
export SYSROOT=/opt/trendchip/mips-linux-uclibc
CFG_CFLAGS += -mips32r2 -muclibc
endif


ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
CFG_CFLAGS += -Os
else
CFG_CFLAGS += -O2
endif

ifneq ($(strip $(VP_MEGACO)),)
TCSUPPORT_VOIP_IMSSIP=
CFG_CFLAGS += -DVP_MEGACO
endif


ifneq ($(strip $(TCSUPPORT_ZEBRA_WORKAROUND)),)
CFG_CFLAGS += -DTCSUPPORT_ZEBRA_WORKAROUND
endif

ifneq ($(strip $(TCSUPPORT_FON)),)
#if defined(TCSUPPORT_FON_MODEL_B)
ifneq ($(strip $(TCSUPPORT_FON_MODEL_B)),)
FON_CFLAGS += -DTCSUPPORT_FON_MODEL_B
endif
FON_CFLAGS += -Os
FON_CFLAGS += -Wall
FON_CFLAGS += -mips1
#endif
endif

ifneq ($(strip $(TCSUPPORT_CT)),)
DMS_CFLAGS += -g -O2 -DTCSUPPORT_CT
ifneq ($(strip $(TCSUPPORT_DMS_FULL_FORMAT)),)
DMS_CFLAGS += -DDMS_FULL_FORMAT
endif
ifneq ($(strip $(TCSUPPORT_CT_PON)),)
ifneq ($(strip $(SLAVEBIN)),)
MAINIMG_PROFILE_DIR=$(PROJECT_DIR)/profile/$(CUSTOM)/$(MAINIMAGE)
endif
endif
else
ifneq ($(strip $(TCSUPPORT_DMS_FULL_FORMAT)),)
DMS_CFLAGS += -g -O2 -DDMS_FULL_FORMAT
endif
endif

TC3262_DRIVERS := $(TCSUPPORT_CPU_TC3262) $(TCSUPPORT_CPU_TC3182) $(TCSUPPORT_CPU_RT63165) $(TCSUPPORT_CPU_RT65168)

#Detect Release Code
ifneq ($(strip $(RELEASEBSP)),)
#unexport Compile Env of SDRAM Size
unexport 8M
unexport 16M
unexport 32M
unexport 64M
unexport TCSUPPORT_SDRAM_8M
unexport TCSUPPORT_SDRAM_16M
unexport TCSUPPORT_SDRAM_32M
unexport TCSUPPORT_SDRAM_64M

include Project/release.mak
endif

#for customer release
ifneq ($(strip $(CUSTOMERRELEASE)),)
include Project/customer_release/customer_release
endif

#begin for parallel build
ifeq ($(strip $(TCSUPPORT_PARALLEL_BUILD_CUSTOM_JOB_NUM_ENABLE)),) #no custom job number
TCSUPPORT_PARALLEL_BUILD_JOB_NUM = 16
endif

TC_PARALLEL_BUILD_PARAM = -j $(TCSUPPORT_PARALLEL_BUILD_JOB_NUM)

ifneq ($(strip $(TCSUPPORT_PARALLEL_BUILD_KERNEL_OFF)),)
TC_PARALLEL_BUILD_PARAM_KERNEL =
else
TC_PARALLEL_BUILD_PARAM_KERNEL = $(TC_PARALLEL_BUILD_PARAM)
endif
#end for parallel build

All: clean_fs bootbase kernel modules apps buildimage

clean: clean_fs bootbase_clean kernel_clean modules_clean apps_clean 
	rm -rf $(PROJECT_DIR)/images/*


menuconfig:
	echo "Project menuconfig"
	chmod -R 777 $(PROJECT_DIR)
ifneq ($(strip $(KERNEL_2_6_36)),)
	cp $(PROFILE_DIR)/$(PROFILE)_2_6_36.profile  $(PROJECT_MENUCONFIG_DIR)/.config		
else
	cp $(PROFILE_DIR)/$(PROFILE).profile  $(PROJECT_MENUCONFIG_DIR)/.config		
endif
ifneq ($(strip $(CUSTOM)),)
	echo "#Custom menuconfig" > $(PROJECT_MENUCONFIG_DIR)/CustomConfig;
	if test -e $(PROJECT_MENUCONFIG_DIR)/$(CUSTOM).config; \
	then cat $(PROJECT_MENUCONFIG_DIR)/$(CUSTOM).config > $(PROJECT_MENUCONFIG_DIR)/CustomConfig; \
	fi
endif		
	$(MAKE) -C $(PROJECT_MENUCONFIG_DIR) menuconfig
ifneq ($(strip $(KERNEL_2_6_36)),)
	cp $(PROJECT_MENUCONFIG_DIR)/.config $(PROFILE_DIR)/$(PROFILE)_2_6_36.profile	
else
	cp $(PROJECT_MENUCONFIG_DIR)/.config $(PROFILE_DIR)/$(PROFILE).profile	
endif

clean_fs:
	chmod -R 777 $(PROJECT_DIR)
	chmod -R 777 $(KERNEL_DIR)
	chmod -R 777 $(APP_DIR)
	chmod -R 777 $(FILESYSTEM_DIR)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	chmod -R 777 $(MODULE_DIR)
else
	chmod -R 777 $(MODULES_PRIV_SRC_DIR)
	chmod -R 777 $(MODULES_PUBLIC_SRC_DIR)
endif

	chmod -R 777 $(TOOLS_DIR)
	chmod -R 777 $(BOOTROM_DIR)
	rm -rf $(FILESYSTEM_DIR)/lib/*
	rm -rf $(FILESYSTEM_DIR)/bin/*
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/*
	rm -rf $(FILESYSTEM_DIR)/userfs/dlna
	rm -rf $(FILESYSTEM_DIR)/usr/bin/*
	rm -rf $(FILESYSTEM_DIR)/sbin/*
	mkdir $(FILESYSTEM_DIR)/lib/modules
	find $(FILESYSTEM_DIR) -name "dummpy.file" | xargs rm -f
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
ifeq ($(strip $(RELEASEBSP)),)
	rm -rf $(INIC_CLIENT_FILE_DIR)
endif
endif

tools_clean:squashfstools_clean

tools:squashfstools 

squashfstools:lzma
	make -C $(TOOLS_DIR)/squashfs-tools
	cp $(TOOLS_DIR)/squashfs-tools/mksquashfs  $(TOOLS_DIR)
	cp $(TOOLS_DIR)/squashfs-tools/mksquashfs-lzma $(TOOLS_DIR)
	cp $(TOOLS_DIR)/squashfs-tools/unsquashfs $(TOOLS_DIR)

squashfstools_clean:lzma_clean
	make -C $(TOOLS_DIR)/squashfs-tools clean
	rm -f $(TOOLS_DIR)/mksquashfs
	rm -f $(TOOLS_DIR)/mksquashfs-lzma
	rm -f $(TOOLS_DIR)/unsquashfs 

lzma:
	make -C  $(LZMA_LIB) 
	cp -f  $(LZMA_ALONE)/makefile.gcc $(LZMA_ALONE)/makefile
	make -C $(LZMA_ALONE)
	cp -f $(LZMA_ALONE)/lzma $(TOOLS_DIR)

lzma_clean:
	cp -f  $(LZMA_ALONE)/makefile.gcc $(LZMA_ALONE)/makefile
	make -C $(LZMA_LIB) clean
	make -C $(LZMA_ALONE) clean
	rm -f $(TOOLS_DIR)/lzma

mlCheckHash:
	make -C $(TOOLS_DIR)/mlCheckHash

mlCheckHash_clean:
	make -C $(TOOLS_DIR)/mlCheckHash clean
	rm -f $(TOOLS_DIR)/mlCheckHash


checktools:
	echo making compile options checking  tools
#	make -C $(TOOLS_DIR)/cplopts_checktool clean
	make -C $(TOOLS_DIR)/cplopts_checktool
	cp -f $(TOOLS_DIR)/cplopts_checktool/cplopts_begin $(TOOLS_DIR)
	cp -f $(TOOLS_DIR)/cplopts_checktool/cplopts_formcheck $(TOOLS_DIR)
	cp -f $(TOOLS_DIR)/cplopts_checktool/cplopts_remove $(TOOLS_DIR)

checktools_clean:
	echo cleaning compile options checking  tools
	make -C $(TOOLS_DIR)/cplopts_checktool clean


bootbase_check:restore checktools
ifneq ($(strip $(KERNEL_2_6_36)),)
	$(TOOLS_DIR)/cplopts_begin $(BOOTROM_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
	$(TOOLS_DIR)/cplopts_begin $(BOOTROM_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif

apps_check: restore checktools
ifneq ($(strip $(KERNEL_2_6_36)),)
	$(TOOLS_DIR)/cplopts_begin $(APP_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile 
else
	$(TOOLS_DIR)/cplopts_begin $(APP_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile 
endif

kernel_check:restore checktools
ifneq ($(strip $(KERNEL_2_6_36)),)
	$(TOOLS_DIR)/cplopts_begin $(KERNEL_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
	$(TOOLS_DIR)/cplopts_begin $(KERNEL_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif

all_check:checktools
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	then echo "Please restore the files first before any modification!"; exit 1; \
	else echo "executing all check"; \
	fi

ifneq ($(strip $(CHKDIR)),)
	echo "checking CHDIR"
ifneq ($(strip $(KERNEL_2_6_36)),)
	$(TOOLS_DIR)/cplopts_begin $(TRUNK_DIR)/$(CHKDIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
	$(TOOLS_DIR)/cplopts_begin $(TRUNK_DIR)/$(CHKDIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
else
	echo "checking all files in trunk dir"
ifneq ($(strip $(KERNEL_2_6_36)),)
	$(TOOLS_DIR)/cplopts_begin $(TRUNK_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE)_2_6_36.profile
else
	$(TOOLS_DIR)/cplopts_begin $(TRUNK_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
endif
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/error; \
	then echo "Compile code error"; exit 1; \
	fi
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/parsingfile; \
	then echo "Tool couldn't work totally! The error filename is";\
			 cat $(TOOLS_DIR)/cplopts_checktool/tmp/parsingfile;rm -f $(TOOLS_DIR)/cplopts_checktool/tmp/parsingfile;exit 1; \
	else echo "Tool works totally and Compile code success"; \
	fi

restore:checktools
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	then echo "Compile bootbase success"; \
	/bin/sh $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	rm -f $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	rm -rf $(TRUNK_DIR)/backup; \
	fi
	echo "Files  restored!" 

bootbase:bootbase_clean mt7515_bootext_ram
	echo "Build bootrom"
ifneq ($(strip $(TCSUPPORT_BOSA_CARLIBRATION)),)
ifeq ($(strip $(TCSUPPORT_RESERVEAREA_BLOCK)),)
	echo "Compile TCSUPPORT_BOSA_CARLIBRATION error,TCSUPPORT_RESERVEAREA_BLOCK must be existed"
	exit 1
endif
endif	

	if test -e $(PROFILE_DIR)/mi.conf; \
	then cp $(PROFILE_DIR)/mi.conf $(BOOTROM_DIR)/mi.conf; \
	fi
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)

ifneq ($(strip $(TCSUPPORT_SDRAM_16M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_16M.bin $(BOOTROM_DIR)/boot.bin
endif

ifneq ($(strip $(TCSUPPORT_SDRAM_32M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_32M.bin $(BOOTROM_DIR)/boot.bin
endif

ifneq ($(strip $(TCSUPPORT_SDRAM_64M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_64M.bin $(BOOTROM_DIR)/boot.bin
endif

endif
ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	cp $(BOOTROM_DIR)/start.S_7510_final $(BOOTROM_DIR)/start.S
else
	cp $(BOOTROM_DIR)/start.S_def $(BOOTROM_DIR)/start.S
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
	cp $(BOOTROM_DIR)/start.S_7505_final $(BOOTROM_DIR)/start.S
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
	cp $(BOOTROM_DIR)/start.S_7510_final $(BOOTROM_DIR)/start.S
endif

ifneq ($(strip $(TCSUPPORT_CPU_EN7512)),)
	cp $(BOOTROM_DIR)/en7512_boot/start.S_7512_final $(BOOTROM_DIR)/start.S
endif

ifneq ($(strip $(TCSUPPORT_CPU_EN7521)),)
	cp $(BOOTROM_DIR)/en7512_boot/start.S_7512_final $(BOOTROM_DIR)/start.S
endif

	dos2unix $(BOOTROM_DIR)/mi.conf

# Support Bootloader Compression, frankliao added 20100803
ifneq ($(strip $(TCSUPPORT_BOOT_LZMA)),)
	$(MAKE) -C $(BOOTROM_DIR) bootlzma
else
	$(MAKE) -C $(BOOTROM_DIR) bootload
endif

	if test -e $(BOOTROM_DIR)/tcboot.bin; \
	then echo "Compile bootbase success"; \
	else echo "Compile bootbase error!"; exit 1; \
	fi	
	cp $(BOOTROM_DIR)/tcboot.bin $(APP_PRIVATE_DIR)/tclinux_builder
	cp $(BOOTROM_DIR)/byteswap $(APP_PRIVATE_DIR)/tclinux_builder
	cp $(BOOTROM_DIR)/tcboot.bin $(PROJECT_DIR)/images
	cp $(BOOTROM_DIR)/byteswap $(PROJECT_DIR)/images

mt7515_bootext_ram: mt7515_bootext_ram_clean
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(KERNEL_DIR)/include/linux/mtd/fttdp_inic.h $(TRUNK_DIR)/bootrom_int/bootram/include/linux/mtd/
	$(MAKE) -C $(TRUNK_DIR)/bootrom_int TC3262=1 BOOTROM_INT=1 BOOTROM_EXT=1 MT7510=1 TCSUPPORT_INIC_CLIENT=1
	mkdir -p $(INIC_CLIENT_FILE_BACKUP_DIR)
	cp $(TRUNK_DIR)/bootrom_int/bootext.ram $(INIC_CLIENT_FILE_BACKUP_DIR)/
endif
endif

mt7515_bootext_ram_clean:
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	chmod -R 777 $(TRUNK_DIR)/bootrom_int
	$(MAKE) -C $(TRUNK_DIR)/bootrom_int TC3262=1 BOOTROM_INT=1 BOOTROM_EXT=1 MT7510=1 TCSUPPORT_INIC_CLIENT=1 clean
ifeq ($(strip $(RELEASEBSP)),)	
	rm -rf $(INIC_CLIENT_FILE_BACKUP_DIR)
endif	
endif
endif
	
bootbase_clean:mt7515_bootext_ram_clean
	echo "Clean bootrom"
	$(MAKE) -C $(BOOTROM_DIR) clean

bbsram:bbsram_clean
	echo "Build bbsram"

	if test -e $(PROFILE_DIR)/mi.conf; \
	then cp $(PROFILE_DIR)/mi.conf $(BOOTROM_DIR)/mi.conf; \
	fi

	cp $(BOOTROM_DIR)/start.S_7505_final $(BOOTROM_DIR)/start.S

	dos2unix $(BOOTROM_DIR)/mi.conf

	$(MAKE) -C $(BOOTROM_DIR) bootsram
	
	if test -e $(BOOTROM_DIR)/tcboot.bin; \
	then echo "Compile bootbase success"; \
	else echo "Compile bootbase error!"; exit 1; \
	fi	

	cp $(BOOTROM_DIR)/tcboot.bin $(PROJECT_DIR)/images
	cp $(BOOTROM_DIR)/byteswap $(PROJECT_DIR)/images
			
bbsram_clean:
	echo "Clean bootrom"
	$(MAKE) -C $(BOOTROM_DIR) clean

autokernel:
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)
#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config	
#else
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
#	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
endif

kernel_test:
	$(MAKE) -C $(KERNEL_DIR)
	$(MAKE) -C $(KERNEL_DIR) linux.7z
	$(MAKE) -C $(KERNEL_DIR) modules
	if test -e $(KERNEL_DIR)/linux.7z; \
	then echo "Compile kernel success"; \
	else echo "Compile kernel error!"; exit 1; \
	fi
	cp $(KERNEL_DIR)/linux.7z $(APP_PRIVATE_DIR)/tclinux_builder
#ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	$(MAKE) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/scsi/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/fs/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/drivers/scsi/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/drivers/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/fs/
#ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
#       $(MAKE) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cd $(FILESYSTEM_DIR)/lib/modules/2.6.36/ && find . -name "*.ko" -type f |xargs $(STRIP) --strip-unneeded
endif	

kernel: 
	echo "build kernel"
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)

#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config
#else
#	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
#	rm -f $(KERNEL_DIR)/.config
#	rm -f $(KERNEL_DIR)/.config.old
#	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
	
else

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162)),)
	cp $(KERNEL_DIR)/tc3162_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_PB)),)
	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_VOIP)),)
	cp $(KERNEL_DIR)/tc3162_voip_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_IPv6)),)
	cp $(KERNEL_DIR)/tc3162_ipv6_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U)),)
ifneq ($(strip $(TCSUPPORT_DMS)),)
	cp $(KERNEL_DIR)/tc3162u_dms_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/tc3162u_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3162u_ipv6_ct_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6_E8B)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_e8b_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3262)),)
	cp $(KERNEL_DIR)/tc3262_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3182)),)
	cp $(KERNEL_DIR)/tc3182_config $(KERNEL_DIR)/.config;
#if use new qos mechanism, config kernel
#ifneq ($(strip $(TCSUPPORT_QOS)),)
#	cp $(KERNEL_DIR)/tc3182_new_qos_config $(KERNEL_DIR)/.config
#endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/tc3182_ct_config $(KERNEL_DIR)/.config
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63165)),)
	cp $(KERNEL_DIR)/rt63165_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63365)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/rt63365_ct_config $(KERNEL_DIR)/.config
else
	cp $(KERNEL_DIR)/rt63365_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63368)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/rt63365_ct_config $(KERNEL_DIR)/.config
else
	cp $(KERNEL_DIR)/rt63365_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT65168)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/rt65168_ct_config $(KERNEL_DIR)/.config
else
	cp $(KERNEL_DIR)/rt65168_config $(KERNEL_DIR)/.config;
endif
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_EN7512)),)
#	cp $(KERNEL_DIR)/en7512_config $(KERNEL_DIR)/.config;
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_EN7521)),)
#	cp $(KERNEL_DIR)/en7512_config $(KERNEL_DIR)/.config;
endif


ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_MT7510)),)
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
	cp $(KERNEL_DIR)/mt7515_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/mt7510_config $(KERNEL_DIR)/.config;
endif
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_MT7520)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/mt7520_ct_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/mt7520_config $(KERNEL_DIR)/.config;
endif
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_MT7505)),)
	cp $(KERNEL_DIR)/mt7505_config $(KERNEL_DIR)/.config;
endif

endif

	#copy if user make menuconfig
#ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
#	if test -e $(PROFILE_DIR)/kernel_36.config; \
#	then cp $(PROFILE_DIR)/kernel_36.config $(KERNEL_DIR)/.config; \
#	fi
#else
#	if test -e $(PROFILE_DIR)/kernel.config; \
#	then cp $(PROFILE_DIR)/kernel.config $(KERNEL_DIR)/.config; \
#	fi
#endif

#	cp $(APP_PRIVATE_DIR)/etc_script/add_kernel_config.sh $(KERNEL_DIR)/
#	chmod 777 $(KERNEL_DIR)/add_kernel_config.sh
#	cd $(KERNEL_DIR) && ./add_kernel_config.sh $(KERNEL_DIR)/.config $(KERNEL_DIR)/.config_add
#	if test -e $(KERNEL_DIR)/.config_add; \
#	then cp $(KERNEL_DIR)/.config_add $(KERNEL_DIR)/.config; rm $(KERNEL_DIR)/.config_add; \
#	fi

	#copy mow kernel config as kernel_config to support release BSP
	rm -f $(KERNEL_DIR)/kernel_config
	cp $(KERNEL_DIR)/.config $(KERNEL_DIR)/kernel_config
ifneq ($(strip $(TCSUPPORT_PARALLEL_BUILD_KERNEL_OFF)),)
	@echo -e "\e[31mParallel build kernel disabled, build process will be very slow!\e[0m"
else
	@echo -e "\e[33mParallel build kernel enabled, 4-6 minutes are expected to be saved!\e[0m"
endif
	$(MAKE) $(TC_PARALLEL_BUILD_PARAM_KERNEL) -C $(KERNEL_DIR) 
	$(MAKE) $(TC_PARALLEL_BUILD_PARAM_KERNEL) -C $(KERNEL_DIR) linux.7z
	$(MAKE) $(TC_PARALLEL_BUILD_PARAM_KERNEL) -C $(KERNEL_DIR) modules
	if test -e $(KERNEL_DIR)/linux.7z; \
	then echo "Compile kernel success"; \
	else echo "Compile kernel error!"; exit 1; \
	fi	
	cp $(KERNEL_DIR)/linux.7z $(APP_PRIVATE_DIR)/tclinux_builder
#ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	$(MAKE) $(TC_PARALLEL_BUILD_PARAM_KERNEL) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/scsi/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/fs/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/drivers/scsi/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/drivers/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.36/kernel/fs/	
#ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
#	$(MAKE) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cd $(FILESYSTEM_DIR)/lib/modules/2.6.36/ && find . -name "*.ko" -type f |xargs $(STRIP) --strip-unneeded 
endif
kernel_menuconfig:
	echo "kernel menuconfig"
	echo "build kernel menuconfig"
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)

#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config
#else
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
	rm -f $(KERNEL_DIR)/.config
	rm -f $(KERNEL_DIR)/.config.old
	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
	
else

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162)),)
	cp $(KERNEL_DIR)/tc3162_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_PB)),)
	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_VOIP)),)
	cp $(KERNEL_DIR)/tc3162_voip_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_IPv6)),)
	cp $(KERNEL_DIR)/tc3162_ipv6_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U)),)
ifneq ($(strip $(TCSUPPORT_DMS)),)
	cp $(KERNEL_DIR)/tc3162u_dms_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/tc3162u_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3162u_ipv6_ct_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6_E8B)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_e8b_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3262)),)
	cp $(KERNEL_DIR)/tc3262_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3182)),)
	cp $(KERNEL_DIR)/tc3182_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3182_ct_config $(KERNEL_DIR)/.config;
endif
#if use new qos mechanism, config kernel
#ifneq ($(strip $(TCSUPPORT_QOS)),)
#	cp $(KERNEL_DIR)/tc3182_new_qos_config $(KERNEL_DIR)/.config
#endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63165)),)
	cp $(KERNEL_DIR)/rt63165_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63365)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/rt63365_ct_config $(KERNEL_DIR)/.config
else
	cp $(KERNEL_DIR)/rt63365_config $(KERNEL_DIR)/.config;
endif
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_MT7510)),)
	cp $(KERNEL_DIR)/mt7510_config $(KERNEL_DIR)/.config;
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_EN7512)),)
	cp $(KERNEL_DIR)/en7512_config $(KERNEL_DIR)/.config;
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_EN7521)),)
	cp $(KERNEL_DIR)/en7512_config $(KERNEL_DIR)/.config;
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_MT7505)),)
	cp $(KERNEL_DIR)/mt7505_config $(KERNEL_DIR)/.config;
endif

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT65168)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/rt65168_ct_config $(KERNEL_DIR)/.config
else
	cp $(KERNEL_DIR)/rt65168_config $(KERNEL_DIR)/.config;
endif
endif

endif

	#copy if user make menuconfig
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	if test -e $(PROFILE_DIR)/kernel_36.config; \
#	then cp $(PROFILE_DIR)/kernel_36.config $(KERNEL_DIR)/.config; \
	fi
else
	if test -e $(PROFILE_DIR)/kernel.config; \
#	then cp $(PROFILE_DIR)/kernel.config $(KERNEL_DIR)/.config; \
	fi
endif

#	cp $(APP_PRIVATE_DIR)/etc_script/add_kernel_config.sh $(KERNEL_DIR)/
#	chmod 777 $(KERNEL_DIR)/add_kernel_config.sh
#	cd $(KERNEL_DIR) && ./add_kernel_config.sh $(KERNEL_DIR)/.config $(KERNEL_DIR)/.config_add
#	if test -e $(KERNEL_DIR)/.config_add; \
#	then cp $(KERNEL_DIR)/.config_add $(KERNEL_DIR)/.config; rm $(KERNEL_DIR)/.config_add; \
#	fi

	#copy mow kernel config as kernel_config to support release BSP
	rm -f $(KERNEL_DIR)/kernel_config
	cp $(KERNEL_DIR)/.config $(KERNEL_DIR)/kernel_config

	$(MAKE) -C $(KERNEL_DIR) menuconfig
#	cp $(KERNEL_DIR)/.config  $(PROFILE_DIR)/kernel_template.config
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(KERNEL_DIR)/.config  $(PROFILE_DIR)/kernel_36.config
else
	cp $(KERNEL_DIR)/.config  $(PROFILE_DIR)/kernel.config	
endif

kernel_clean:
	echo "build kernel"
	$(MAKE) -C $(KERNEL_DIR) clean



modules: kernel_hook dmt drivers ra-hwnat wlan autobench kprofile xpon_modules fttdp_inic_modules simcard_driver netlink_msg mtk_multicast wifi_ratelimit
modules_clean: kernel_hook_clean drivers_clean wlan_clean autobench_clean kprofile_clean xpon_modules_clean fttdp_inic_modules_clean simcard_driver_clean mtk_multicast_clean wifi_ratelimit_clean

add_7512_pcie_patch:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify add_patch
	
rem_7512_pcie_patch:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify rem_patch
	
7512_pcie_verify: add_7512_pcie_patch kernel rem_7512_pcie_patch
	echo "build 7512 pcie verify driver"
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify clean	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify
	cp -f  $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify/*.ko $(FILESYSTEM_DIR)/lib/modules/
	cp -f  $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify/pcieclient $(FILESYSTEM_DIR)/usr/bin/
	
7512_pcie_verify_clean:
	echo "clean 7512 pcie verify driver"
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/en7512_pcie_verify clean
	
mtk_multicast:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_MCST)),)
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_multicast/CFH
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_multicast/CJ
endif
endif

mtk_multicast_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_MCST)),)
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_multicast/CFH clean
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_multicast/CJ clean
endif
endif

ifneq ($(strip $(TCSUPPORT_WLAN_RATELIMIT)),)
wifi_ratelimit:
	echo "build wifi ratelimit Modules"
	$(MAKE) -C $(MODULES_WIFI_RATELIMIT_DIR)
	cp $(MODULES_WIFI_RATELIMIT_DIR)/wlan_ratelimit.ko $(FILESYSTEM_DIR)/lib/modules/
wifi_ratelimit_clean:
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_WIFI_RATELIMIT_DIR) clean
endif
else
wifi_ratelimit:
wifi_ratelimit_clean:
endif

dmt:
	echo "Delay cp dmt ko when build fs"
	#cp $(RROFILE_DIR)/dmt/* $(FILESYSTEM_DIR)/lib/modules/

pcmdrivertest:
	echo "build pcmdrivertest"
ifneq ($(strip $(TCSUPPORT_VOIP)),)	
	cp $(MODULES_VOIP_KO_DIR)/pcm_lb.ko $(FILESYSTEM_DIR)/lib/modules/	
	cp $(MODULES_VOIP_KO_DIR)/pcmdrivertest.ko $(FILESYSTEM_DIR)/lib/modules/
endif
pcmdrivertest_clean:
	echo "clean slictest"
	rm -rf $(FILESYSTEM_DIR)/lib/modules/pcm_lb.ko
	rm -rf $(FILESYSTEM_DIR)/lib/modules/pcmdrivertest.ko

slictest:
	echo "build slictest"
	cp $(MODULES_VOIP_KO_DIR)/pcm.ko $(FILESYSTEM_DIR)/lib/modules/	
	cp $(MODULES_VOIP_KO_DIR)/le88221test.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/flash_test $(FILESYSTEM_DIR)/usr/bin/

	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg ./
	tar cvf $(FILESYSTEM_DIR)/romfile.tar romfile.cfg
	rm ./romfile.cfg
	
slictest_clean:
	echo "clean slictest"
	rm -rf $(FILESYSTEM_DIR)/lib/modules/pcm.ko
	rm -rf $(FILESYSTEM_DIR)/lib/modules/le88221test.ko
	rm -rf $(FILESYSTEM_DIR)/usr/bin/flash_test
	rm -rf $(FILESYSTEM_DIR)/romfile.tar

ifneq ($(strip $(KERNEL_2_6_36)),)	
kernel_hook_clean:
	$(MAKE) -C $(MODULES_ECNT_HOOK_DIR) clean

kernel_hook:
#build ecnt hook
	echo "build ECNT HOOK Modules"
	$(MAKE) -C $(MODULES_ECNT_HOOK_DIR)
	cp $(MODULES_ECNT_HOOK_DIR)/ecnthook.ko $(FILESYSTEM_DIR)/lib/modules/
else
kernel_hook_clean:
kernel_hook:
endif

iqos_modules:
#build iqos moduels
	$(MAKE) -C $(MODULES_IQOS_DIR)
	
xt_app:
	$(MAKE) -C $(MODULES_XTAPP_DIR)
	
ra-hwnat:
#build ra-hwnat
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
	echo "build ra-hwnat Modules"

ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	cp $(MODULES_RA_HWNAT_7510_DIR)/foe_fdb_7512.h $(MODULES_RA_HWNAT_7510_DIR)/foe_fdb.h
	cp $(MODULES_RA_HWNAT_7510_DIR)/hwnat_ioctl.h $(APP_API_LIB_PPE_DIR)
	$(MAKE) -C $(MODULES_RA_HWNAT_7510_DIR)
	cp $(MODULES_RA_HWNAT_7510_DIR)/hw_nat.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_RA_HWNAT_DIR)
	cp $(MODULES_RA_HWNAT_DIR)/hw_nat.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

drivers:
	echo "build qdma eth mac sar led tcci igmpsnooping drivers"
ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
	echo "build QDMA bufmgr modules"
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	cp $(MODULES_QDMA_7512_DIR)/Makefile_wan $(MODULES_QDMA_7512_DIR)/Makefile
	$(MAKE) -C $(MODULES_QDMA_7512_DIR) clean
	$(MAKE) -C $(MODULES_QDMA_7512_DIR)
	cp $(MODULES_QDMA_7512_DIR)/qdma_wan.ko $(FILESYSTEM_DIR)/lib/modules/

	cp $(MODULES_QDMA_7512_DIR)/Makefile_lan $(MODULES_QDMA_7512_DIR)/Makefile
	$(MAKE) -C $(MODULES_QDMA_7512_DIR) clean
	$(MAKE) -C $(MODULES_QDMA_7512_DIR)
	cp $(MODULES_QDMA_7512_DIR)/qdma_lan.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_QDMA_DIR)
	cp $(MODULES_QDMA_DIR)/qdma.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_SLM_VERIFY)),)
	echo "build SLM Verify modules"
	$(MAKE) -C $(MODULES_SLM_DIR) clean
	$(MAKE) -C $(MODULES_SLM_DIR)
	cp $(MODULES_SLM_DIR)/slm_verify.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
#	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7510sar.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sar clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sar
	cp $(MODULES_PRIV_SRC_DIR)/mtk_sar/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7510sar.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sar clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sar
	cp $(MODULES_PRIV_SRC_DIR)/mtk_sar/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifeq ($(strip $(TCSUPPORT_CT_SIMCARD_SEPARATION)$(TCSUPPORT_SIMCARD_GENERAL)),)
ifneq ($(strip $(TCSUPPORT_SIM_CONTROLLER)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7510sim.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sim clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/mtk_sim
	cp $(MODULES_PRIV_SRC_DIR)/mtk_sim/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
ifeq ($(strip $(TCSUPPORT_CPU_MT7510) $(TCSUPPORT_CPU_MT7520) $(TCSUPPORT_CPU_MT7505)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2sar.ko $(FILESYSTEM_DIR)/lib/modules/
endif
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcledctrl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/module_sel.ko $(FILESYSTEM_DIR)/lib/modules/
else
ifeq ($(strip $(TCSUPPORT_CPU_MT7510) $(TCSUPPORT_CPU_MT7520) $(TCSUPPORT_CPU_MT7505)),)
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2sar.ko $(FILESYSTEM_DIR)/lib/modules/
endif
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tcledctrl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/module_sel.ko $(FILESYSTEM_DIR)/lib/modules/

endif
#Build sif
ifneq ($(strip $(TCSUPPORT_I2C)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/sif.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/sif
	cp $(MODULES_PRIV_SRC_DIR)/sif/sif.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#Build tcci
ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp -rf $(MODULES_PRIV_SRC_DIR)/obj/$(TCPLATFORM)/version.o $(MODULES_PRIV_SRC_DIR)/tcci/
endif
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tcci
endif
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tccicmd.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tcci/tccicmd.ko $(FILESYSTEM_DIR)/lib/modules/
endif

#build full cone
	echo "build full cone NAT Modules"
ifeq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcfullcone.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_FULLCONE_DIR)
	cp $(MODULES_FULLCONE_DIR)/tcfullcone.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_IGMP_SNOOPING)),)
#build igmp snooping
	echo "build igmp snooping Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/igmpsnoop.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_IGMPSNOOP_DIR)
	cp $(MODULES_IGMPSNOOP_DIR)/igmpsnoop.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_POWERSAVE_ENABLE)),)
    ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
		cp $(MODULES_BACKUP)/$(TCPLATFORM)/pwm.ko $(FILESYSTEM_DIR)/lib/modules/
    else
		$(MAKE) -C $(MODULES_PWM_DIR)
		cp $(MODULES_PWM_DIR)/pwm.ko $(FILESYSTEM_DIR)/lib/modules/
    endif
endif

	

	
#build bridge detect
ifneq ($(strip $(TCSUPPORT_EPON_DUMMY)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/bridgedetect.ko $(FILESYSTEM_DIR)/lib/modules/
else
	echo "build bridgedetect Modules"
	$(MAKE) -C $(MODULES_BRIDGE_DETECT_DIR)
	cp $(MODULES_BRIDGE_DETECT_DIR)/bridgedetect.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)
#build access limit function
	echo "build access limit Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/accesslimit.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_ACCESSLIMIT_DIR)
	cp $(MODULES_ACCESSLIMIT_DIR)/accesslimit.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif		
ifeq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
ifneq ($(strip $(TCSUPPORT_MLD_SNOOPING)),)
#Build mldsnoop module
	echo "build mld snooping Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mldsnooping.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/mldsnooping
	cp $(MODULES_PRIV_SRC_DIR)/net/mldsnooping/mldsnooping.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
endif


#build smux
ifeq ($(strip $(TCSUPPORT_FH_ENV)),)
ifneq ($(strip $(TCSUPPORT_SMUX)),)
	echo "build smux Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcsmux.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_SMUX_DIR)
	cp $(MODULES_SMUX_DIR)/tcsmux.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
endif

#build fast bridge

ifneq ($(strip $(TCSUPPORT_BRIDGE_FASTPATH)),)
	echo "build fast bridge Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/brg_shortcut.ko $(FILESYSTEM_DIR)/lib/modules/
else	
	$(MAKE) -C $(MODULES_FASTBRIDGE_DIR)
	cp $(MODULES_FASTBRIDGE_DIR)/brg_shortcut.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build portbind
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	echo "build portbind Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcportbind.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PORTBIND_DIR)
	cp $(MODULES_PORTBIND_DIR)/tcportbind.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build 7510 swqos
ifneq ($(strip $(TCSUPPORT_CT_SWQOS) $(TCSUPPORT_XPON_HAL_API_QOS)),)
	echo "build 7510 swqos Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/swqos.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_SWQOS_DIR)
	cp $(MODULES_SWQOS_DIR)/swqos.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build ct url filter
ifneq ($(strip $(TCSUPPORT_CT_URL_FILTER)),)
	echo "build CT URL Filter Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/urlfilter.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_URL_FILTER_DIR)
	cp $(MODULES_URL_FILTER_DIR)/urlfilter.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build dying gasp
ifneq ($(strip $(TCSUPPORT_DYING_GASP)),)
	echo "build dying gasp Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/dying_gasp.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_DYING_GASP_DIR)
	cp $(MODULES_DYING_GASP_DIR)/dying_gasp.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build vlan_tag
ifeq ($(strip $(TCSUPPORT_FH_ENV)),)
ifneq ($(strip $(TCSUPPORT_VLAN_TAG)),)
	echo "build vlantag Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcvlantag.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_VLAN_TAG_DIR)
	cp $(MODULES_VLAN_TAG_DIR)/tcvlantag.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
endif

#build hwnat
ifneq ($(strip $(TCSUPPORT_HWNAT)),)
	echo "build hwnat Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/hwnat.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_HWNAT_DIR)
	cp $(MODULES_HWNAT_DIR)/hwnat.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build fe_ppe_test
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	echo "build fe_ppe_test Module"
	$(MAKE) -C $(MODULES_FE_PPE_TEST_DIR)
#	cp $(MODULES_FE_PPE_TEST_DIR)/fe_ppe_test.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	$(MAKE) -C $(MODULES_FE_7512_DIR) 
	cp -f $(MODULES_FE_7512_DIR)/fe_core.ko $(FILESYSTEM_DIR)/lib/modules/
endif
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	$(MAKE) -C $(MODULES_ETHER_PHY_DIR)
	echo 7512
	cp $(MODULES_ETHER_PHY_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	$(MAKE) -C $(MODULES_ETHER_DIR)
	echo 7512
	cp $(MODULES_ETHER_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	echo 63356
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	echo 63368
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	echo 7510
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else


ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	echo 7505
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else

ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	echo 7520
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
endif
endif
endif
endif

ifneq ($(strip $(TC3262_DRIVERS)),)
	$(MAKE) -C $(MODULES_TC3262_DIR)
	cp $(MODULES_TC3262_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	$(MAKE) -C $(MODULES_MT7510_PTM_DIR)
	cp $(MODULES_MT7510_PTM_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
else
ifneq ($(strip $(TCSUPPORT_FTTDP_V2)),)
	$(MAKE) -C $(MODULES_MT7510_PTM_DIR)
	cp $(MODULES_MT7510_PTM_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif	
endif

ifneq ($(strip $(TCSUPPORT_BONDING)),)	
	$(MAKE) -C $(MODULES_BONDING_PCIE_DIR)
	cp $(MODULES_BONDING_PCIE_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifeq ($(strip $(VOIP_DSP)),MTK)
	if test -e $(MODULES_MTK_KSOCK_DIR)/Makefile; \
		then $(MAKE) -C $(MODULES_MTK_KSOCK_DIR); \
	fi

	if test -e $(MODULES_MTK_SLIC3_DIR)/Makefile; \
			then $(MAKE) -C $(MODULES_MTK_SLIC3_DIR) TCSUPPORT_SLIC_SEPARATE=1; cp $(MODULES_MTK_SLIC3_DIR)/slic3_sep.ko $(FILESYSTEM_DIR)/lib/modules/; \
			if test -d $(MODULES_MTK_SLIC3_DIR)/src/silab;	\
		 		then $(MAKE) -C $(MODULES_MTK_SLIC3_DIR) SLIC=SILICON; cp $(MODULES_MTK_SLIC3_DIR)/slic3_silicon.ko $(FILESYSTEM_DIR)/lib/modules/; \
			else \
				if test -e $(MODULES_VOIP_KO_DIR)/slic3_silicon.ko; \
			 		then cp $(MODULES_VOIP_KO_DIR)/slic3_silicon.ko $(FILESYSTEM_DIR)/lib/modules/; \
				fi \
			fi \
	else \
		if test -e $(MODULES_VOIP_KO_DIR)/slic3_silicon.ko; \
			then cp $(MODULES_VOIP_KO_DIR)/slic3_silicon.ko $(FILESYSTEM_DIR)/lib/modules/; \
			if test -e $(MODULES_VOIP_KO_DIR)/slic3_sep.ko; \
				then cp $(MODULES_VOIP_KO_DIR)/slic3_sep.ko $(FILESYSTEM_DIR)/lib/modules/; \
			fi \
		fi \
	fi 

	#if test -e $(MODULES_MTK_SLIC3_DIR)/Makefile; \
		#then $(MAKE) -C $(MODULES_MTK_SLIC3_DIR); cp $(MODULES_MTK_SLIC3_DIR)/slic3.ko $(FILESYSTEM_DIR)/lib/modules/; $(MAKE) -C $(MODULES_MTK_SLIC3_DIR) TCSUPPORT_SLIC_SEPARATE=1; cp $(MODULES_MTK_SLIC3_DIR)/slic3_sep.ko $(FILESYSTEM_DIR)/lib/modules/; \
	#else 
		if test -e $(MODULES_VOIP_KO_DIR)/slic3.ko; \
			then cp $(MODULES_VOIP_KO_DIR)/slic3.ko $(FILESYSTEM_DIR)/lib/modules/; \
			if test -e $(MODULES_VOIP_KO_DIR)/slic3_sep.ko; \
				then cp $(MODULES_VOIP_KO_DIR)/slic3_sep.ko $(FILESYSTEM_DIR)/lib/modules/; \
			fi \
		fi 
	#fi

	cp $(MODULES_MTK_KSOCK_DIR)/ksocket.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/lec.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/ovdsp.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/spi.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/pcm1.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/pcm2.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/DSPCore.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/fxs3_silicon.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/fxs3.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/sys_mod.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/ortp.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/acodec_x.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/pcmDump.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOIP_KO_DIR)/foip.ko $(FILESYSTEM_DIR)/lib/modules/


endif
endif

#ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)

ifneq ($(strip $(TCSUPPORT_USBHOST)),)
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#rm -rf $(FILESYSTEM_DIR)/lib/modules/usbhost
	#mkdir $(FILESYSTEM_DIR)/lib/modules/usbhost
	#cp $(KERNEL_DIR)/drivers/scsi/scsi_mod.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/drivers/scsi/scsi_wait_scan.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/drivers/scsi/sd_mod.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
ifeq ($(strip $(TCSUPPORT_CT_JOYME)),)	
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#cp $(KERNEL_DIR)/drivers/usb/core/usbcore.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
ifneq ($(strip $(TCSUPPORT_MUH)),)
ifneq ($(strip $(TCSUPPORT_MUH_TEST)),)
	cp $(KERNEL_DIR)/drivers/usb/host/mtk_test/xhci-test.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
else
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#cp $(KERNEL_DIR)/drivers/usb/host/mtk_xhci/xhci-hcd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
else
ifeq ($(strip $(TCSUPPORT_CT_JOYME)),)	
	cp $(KERNEL_DIR)/drivers/usb/host/ehci-hcd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/host/ohci-hcd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
endif
ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
	if test -e $(KERNEL_DIR)/fs/nls/nls_utf8.ko; \
	then cp $(KERNEL_DIR)/fs/nls/nls_utf8.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
endif
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#cp $(KERNEL_DIR)/drivers/usb/storage/usb-storage.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	if test -e $(KERNEL_DIR)/fs/fat/fat.ko; \
	then cp $(KERNEL_DIR)/fs/fat/fat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	if test -e $(KERNEL_DIR)/fs/fat/vfat.ko; \
	then cp $(KERNEL_DIR)/fs/fat/vfat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
else
	if test -e $(KERNEL_DIR)/fs/vfat/vfat.ko; \
	then cp $(KERNEL_DIR)/fs/vfat/vfat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
endif
	#cp $(KERNEL_DIR)/fs/fat/fat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/msdos/msdos.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/vfat/vfat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
ifneq ($(strip $(TCSUPPORT_SAMBA)),)
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#cp $(KERNEL_DIR)/fs/nls/nls_cp936.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/nls/nls_utf8.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
else
ifneq ($(strip $(TCSUPPORT_SAMBA_IPv6)),)
#	cp $(KERNEL_DIR)/fs/nls/nls_cp936.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
#	cp $(KERNEL_DIR)/fs/nls/nls_utf8.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
else
	cp $(KERNEL_DIR)/fs/nls/nls_ascii.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/nls/nls_cp437.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
endif
	if test -e $(KERNEL_DIR)/fs/nls/nls_base.ko; \
	then cp $(KERNEL_DIR)/fs/nls/nls_base.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
	#cp $(KERNEL_DIR)/fs/nls/nls_base.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/nls/nls_cp437.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#Modified by Zhao Mengqing, 2016-6-4
	#$(STRIP) --strip-unneeded $(FILESYSTEM_DIR)/lib/modules/usbhost/*.ko
	#rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
	#cp $(APP_PRIVATE_DIR)/rcS/TC3162U_USBHOST_rcS $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif
ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
	#Modified by Zhao Mengqing, 2016-6-4, do not copy these ko
	#$(STRIP) --strip-unneeded $(KERNEL_DIR)/fs/fuse/fuse.ko
	#cp $(KERNEL_DIR)/fs/fuse/fuse.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/serial/usbserial.ko
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/serial/usb_wwan.ko
endif
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/serial/option.ko
	cp $(KERNEL_DIR)/drivers/usb/serial/usbserial.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(KERNEL_DIR)/drivers/usb/serial/usb_wwan.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
	cp $(KERNEL_DIR)/drivers/usb/serial/option.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/ppp_async.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/class/usblp.ko
	cp $(KERNEL_DIR)/drivers/usb/class/usblp.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
	chmod 777 $(MODULES_USB_CAMERA_DRIVER)/v4l/scripts/*
	$(MAKE) -C $(MODULES_USB_CAMERA_DRIVER) clean
	$(MAKE) -C $(MODULES_USB_CAMERA_DRIVER)
	$(STRIP) --strip-unneeded $(MODULES_USB_CAMERA_DRIVER)/v4l/*.ko
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/usbvideo.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/v4l1-compat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/uvcvideo.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/videodev.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
	#Modified by Zhao Mengqing, 2016-6-4
	#cd $(FILESYSTEM_DIR)/lib/modules/usbhost/ && find . -name "*.ko" -type f |xargs $(STRIP) --strip-unneeded 
endif

#endif

ifneq ($(strip $(TCSUPPORT_USBDEVICE20)),)
	echo "copy usb device module from linux into filesystem"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162_udc20.ko $(FILESYSTEM_DIR)/lib/modules
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162_udc20.ko $(FILESYSTEM_DIR)/lib/modules
endif
	cp $(KERNEL_DIR)/drivers/usb/gadget/g_ether.ko $(FILESYSTEM_DIR)/lib/modules	
	cp $(KERNEL_DIR)/drivers/usb/gadget/g_file_storage.ko $(FILESYSTEM_DIR)/lib/modules
	#rm $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
	#cp $(APP_PRIVATE_DIR)/rcS/TC3162U_USBDEVICE_rcS $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif


ifneq ($(strip $(TCSUPPORT_HW_CRYPTO)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/crypto_k.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_CRYPTO_DRIVER) KERNEL_DIR=$(KERNEL_DIR) ARCH=mips
	cd $(MODULES_CRYPTO_DRIVER) && $(STRIP) --strip-unneeded crypto_k.ko && cp crypto_k.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_EIP93_VERIFY)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_EIP93_DRIVERS)/cryptoEngine/V-Driver_93/build clean
	$(MAKE) -C $(MODULES_EIP93_DRIVERS)/cryptoEngine/V-Driver_93/build KERNEL_DIR=$(KERNEL_DIR) ARCH=mips
	cd $(MODULES_EIP93_DRIVERS)/cryptoEngine/V-Driver_93/build/ && $(STRIP) --strip-unneeded vdriver_93_k.ko && cp vdriver_93_k.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif


drivers_clean:
ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	cp $(MODULES_QDMA_7512_DIR)/Makefile_wan $(MODULES_QDMA_7512_DIR)/Makefile
	$(MAKE) -C $(MODULES_QDMA_7512_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f qdma_wan.ko
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f qdma_lan.ko
else
	$(MAKE) -C $(MODULES_QDMA_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f qdma.ko
endif
endif

#clean fe_ppe_test
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	echo "clean fe_ppe_test Module"
	$(MAKE) -C $(MODULES_FE_PPE_TEST_DIR) clean
	rm -f $(FILESYSTEM_DIR)/lib/modules/fe_ppe_test.ko
endif
endif
ifneq ($(strip $(TCSUPPORT_SLM_VERIFY)),)
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f slm_verify.ko
endif

ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	$(MAKE) -C $(MODULES_FE_7512_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifeq ($(strip $(VOIP_DSP)),MTK)
	$(MAKE) -C $(MODULES_MTK_KSOCK_DIR) clean
	$(MAKE) -C $(MODULES_MTK_SLIC3_DIR) clean
endif
endif
	echo "Clean mac sar led tcci crypto drivers"
ifneq ($(strip $(TCSUPPORT_HW_CRYPTO)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_CRYPTO_DRIVER) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f crypto_k.ko
endif
endif
	
ifneq ($(strip $(TCSUPPORT_EIP93_VERIFY)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_EIP93_DRIVERS)/cryptoEngine/V-Driver_93/build clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f vdriver_93_k.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_I2C)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/sif clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f sif.ko
endif
endif

ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tcci clean
endif
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifeq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	$(MAKE) -C $(MODULES_FULLCONE_DIR) clean
endif	
ifneq ($(strip $(TCSUPPORT_IGMP_SNOOPING)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	echo "clean igmpsnoop"
else
	$(MAKE) -C $(MODULES_IGMPSNOOP_DIR) clean
endif
endif

ifneq ($(strip $(TCSUPPORT_POWERSAVE_ENABLE)),)
    ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
		$(MAKE) -C $(MODULES_PWM_DIR) clean
    endif
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f pwm.ko
endif

ifeq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
ifneq ($(strip $(TCSUPPORT_MLD_SNOOPING)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/mldsnooping clean
endif
endif

	
ifneq ($(strip $(TCSUPPORT_SMUX)),)
	$(MAKE) -C $(MODULES_SMUX_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	$(MAKE) -C $(MODULES_PORTBIND_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CT_SWQOS) $(TCSUPPORT_XPON_HAL_API_QOS)),)
	$(MAKE) -C $(MODULES_SWQOS_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CT_URL_FILTER)),)
	$(MAKE) -C $(MODULES_URL_FILTER_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_SLICDRIVER_DIR) clean
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	$(MAKE) -C $(MODULES_MT7510_PTM_DIR) clean
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	$(MAKE) -C $(MODULES_BONDING_PCIE_DIR) clean
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean
endif


else

ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean

endif
endif

login_modules:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/domain_login	
	
dual_modules:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/dual_gpio	

ipt_modules:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/ipt_STAT

ifneq ($(strip $(TCSUPPORT_WLAN)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
wlan:
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt5390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3593ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/mt7601Eap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/mt7610e_ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/mt7662e_ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/mt7603eap.ko
ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
   	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt61ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT61AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2561.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2561S.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2661.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/rt3090ao.ko
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_WLAN_MT7601E)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7601Eap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)MT7601E_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/MT7601E_EEPROM.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)MT7601E_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_WLAN_MT7592)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7603eap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/eeprom/MT7592_EEPROM_layout_v15_20140806.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7610E)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7610e_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/MT7610E-V10-20130321-FEM-1ANT.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7612E)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7662e_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/MT7612E_EEPROM_layout_20131121_5G_iPAiLNA_wTSSI_default_slope_offset.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7615E)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7615_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT2860AP.dat
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/MT7615E1_EEPROM.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
endif

ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860APCard.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP0.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP1.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/BGN/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/AN/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3092E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3390E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5592E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5392E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5391E2P.bin	
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin	
endif

wlan_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build WLAN, do nothing!"
else
wlan:
	echo "Build WLAN!"
ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
#	$(MAKE) -C $(RT2561AP_DIR) clean
	$(MAKE) -C $(RT2561AP_DIR)
	if test -e $(RT2561AP_DIR)/rt61ap.ko; \
	then echo "Compile RT2561 Driver success"; \
	else echo "Compile RT2561 Driver error!"; exit 1; \
	fi
	cp $(RT2561AP_DIR)/rt61ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT61AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2561.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2561S.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2661.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
#	$(MAKE) -C $(RT3390AP_DIR) clean
	$(MAKE) -C $(RT3390AP_DIR)
	if test -e $(RT3390AP_DIR)/os/linux/rt3390ap.ko; \
	then echo "Compile RT3390 Driver success"; \
	else echo "Compile RT3390 Driver error!"; exit 1; \
	fi
	cp $(RT3390AP_DIR)/os/linux/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif

ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
#	$(MAKE) -C $(RT3390AP_DIR) clean
	$(MAKE) -C $(RT3390AP_DIR)
	if test -e $(RT3390AP_DIR)/os/linux/rt3390ap.ko; \
	then echo "Compile RT3390 Driver success"; \
	else echo "Compile RT3390 Driver error!"; exit 1; \
	fi
	cp $(RT3390AP_DIR)/os/linux/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_RT5592)),)
	$(MAKE) -C $(RT5592AP_DIR)
	if test -e $(RT5592AP_DIR)/os/linux/rt5592ap.ko; \
	then echo "Compile RT5592 Driver success"; \
	else echo "Compile RT5592 Driver error!"; exit 1; \
	fi
	cp $(RT5592AP_DIR)/os/linux/rt5592ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT5592AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT5592AP_DIR)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/RT30xxEEPROM.bin
endif	
#RT3593AP_DIR
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_RT3593)),)
	$(MAKE) -C $(RT3593AP_DIR)
	if test -e $(RT3593AP_DIR)/os/linux/rt3593ap.ko; \
	then echo "Compile RT3593 Driver success"; \
	else echo "Compile RT3593 Driver error!"; exit 1; \
	fi
	cp $(RT3593AP_DIR)/os/linux/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT3593AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT3593AP_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)
	if test -e $(WIFI_MULTI_DRIVER_DIR)/os/linux/rt3593ap.ko; \
	then echo "Compile RT5592RT3593 Driver success"; \
	else echo "Compile RT5592RT3593 Driver error!"; exit 1; \
	fi
	cp $(WIFI_MULTI_DRIVER_DIR)/os/linux/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
ifneq ($(strip $(TCSUPPORT_CT_WLAN_WAPI)),)	
	cp $(WIFI_MULTI_DRIVER_DIR)/wapi_module.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(WIFI_MULTI_DRIVER_DIR)/wapid $(FILESYSTEM_DIR)/usr/bin/
endif	
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860APCard.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP0.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP1.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/BGN/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/AN/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3092E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3390E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin	
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5592E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5392E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5391E2P.bin	

endif	
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_WLAN_MT7601E)),)
#	$(MAKE) -C $(MT7601EAP_DIR) clean
	$(MAKE) -C $(MT7601EAP_DIR)
	if test -e $(MT7601EAP_DIR)/os/linux/mt7601Eap.ko; \
	then echo "Compile MT7601E Driver success"; \
	else echo "Compile MT7601E Driver error!"; exit 1; \
	fi
	cp $(MT7601EAP_DIR)/os/linux/mt7601Eap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MT7601EAP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(MT7601EAP_DIR)/MT7601E_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/MT7601E_EEPROM.bin
	cp $(MT7601EAP_DIR)/MT7601E_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko

endif

ifneq ($(strip $(TCSUPPORT_WLAN_MT7592)),)
#	$(MAKE) -C $(MT7592AP_DIR) clean
	$(MAKE) -C $(MT7592AP_DIR)
	if test -e $(MT7592AP_DIR)/os/linux/mt7603eap.ko; \
	then echo "Compile MT7592 Driver success"; \
	else echo "Compile MT7592 Driver error!"; exit 1; \
	fi
	cp $(MT7592AP_DIR)/os/linux/mt7603eap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MT7592AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MT7592AP_DIR)/eeprom/MT7592_EEPROM_layout_v15_20140806.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7610E)),)
#	$(MAKE) -C $(MT7610EAP_DIR) clean
	$(MAKE) -C $(MT7610EAP_DIR)
	if test -e $(MT7610EAP_DIR)/os/linux/mt7610e_ap.ko; \
	then echo "Compile MT7610E Driver success"; \
	else echo "Compile MT7610E Driver error!"; exit 1; \
	fi
	cp $(MT7610EAP_DIR)/os/linux/mt7610e_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7610EAP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7610EAP_DIR)/MT7610E-V10-20130321-FEM-1ANT.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
	cp $(MT7610EAP_DIR)/SingleSKU_5G.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko

endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7612E)),)
#	$(MAKE) -C $(MT7612EAP_DIR) clean
	$(MAKE) -C $(MT7612EAP_DIR)
	if test -e $(MT7612EAP_DIR)/os/linux/mt7662e_ap.ko; \
	then echo "Compile MT7612E Driver success"; \
	else echo "Compile MT7612E Driver error!"; exit 1; \
	fi
	cp $(MT7612EAP_DIR)/os/linux/mt7662e_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7612EAP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7612EAP_DIR)/eeprom/MT7612E_EEPROM_layout_20131121_5G_iPAiLNA_wTSSI_default_slope_offset.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
#	cp $(MT7612EAP_DIR)/SingleSKU_5G.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif

ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7615E)),)
#	$(MAKE) -C $(MT7615EAP_DIR) clean
	$(MAKE) -C $(MT7615EAP_DIR)/embedded
	if test -e $(MT7615EAP_DIR)/os/linux/mt7615_ap.ko; \
	then echo "Compile MT7615E Driver success"; \
	else echo "Compile MT7615E Driver error!"; exit 1; \
	fi
	cp $(MT7615EAP_DIR)/os/linux/mt7615_ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7615EAP_DIR)/embedded/conf/RT2860.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT2860AP.dat
	cp $(MT7615EAP_DIR)/eeprom/MT7615E1_EEPROM.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
#	cp $(MT7615EAP_DIR)/eeprom/MT7615E_EEPROM_layout_20131121_5G_iPAiLNA_wTSSI_default_slope_offset.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_SINGLE_SKU_V2)),)
	cp $(MT7615EAP_DIR)/embedded/conf/7615_SingleSKU.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
#	cp $(MT7615EAP_DIR)/embedded/conf/7615_BF_Gain_Table.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	cp $(MT7615EAP_DIR)/embedded/conf/7615_SingleSKU_BF.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
endif	
#	cp $(MT7615EAP_DIR)/SingleSKU_5G.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP_AC/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
endif

wlan_clean:
	echo "Clean WLAN!"
ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
	$(MAKE) -C $(RT2561AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	$(MAKE) -C $(RT3390AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	$(MAKE) -C $(RT3390AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MT7601E)),)
	$(MAKE) -C $(MT7601EAP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MT7592)),)
	$(MAKE) -C $(MT7592AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7610E)),)
	$(MAKE) -C $(MT7610EAP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7612E)),)
	$(MAKE) -C $(MT7612EAP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7615E)),)
	$(MAKE) -C $(MT7615EAP_DIR)/embedded clean
endif
endif
else
wlan:
	echo "No Build WLAN!"
wlan_clean:
	echo "No Build WLAN!"
endif


#build autobench
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
autobench:
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/auto_bench.ko $(FILESYSTEM_DIR)/lib/modules/
autobench_clean:
	echo "TC_BUILD_RELEASECODE: Build AUTOBEHCH Driver, do nothing!"
else
autobench:
ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	cp -rf $(PROFILE_DIR)/voip $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_VOIP_KO_DIR)/sys_mod.ko $(FILESYSTEM_DIR)/lib/modules/
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)	
	cp $(MODULES_VOIP_KO_DIR)/voice_slt.ko $(FILESYSTEM_DIR)/lib/modules/
endif	
	cp $(MODULES_VOIP_KO_DIR)/pcm_lb.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR)
	cp $(MODULES_AUTOBENCH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_AUTOBENCH_DIR)/rcS_AutoBench $(FILESYSTEM_DIR)/usr/etc/init.d/
ifeq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
autobench_clean:
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR) clean
endif
else
autobench:
	if test -e $(FILESYSTEM_DIR)/usr/etc/init.d/rcS_AutoBench; \
	then rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS_AutoBench; \
	fi
autobench_clean:
endif



#build kprofile
ifneq ($(strip $(TCSUPPORT_KPROFILE)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
kprofile:
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/kprofile.ko $(FILESYSTEM_DIR)/lib/modules/
kprofile_clean:
	echo "TC_BUILD_RELEASECODE: Build kprofile Driver, do nothing!"
else
kprofile:
	$(MAKE) -C $(MODULES_KPROFILE_DIR)
	cp $(MODULES_KPROFILE_DIR)/kprofile.ko $(FILESYSTEM_DIR)/lib/modules/
kprofile_clean:
	$(MAKE) -C $(MODULES_KPROFILE_DIR) clean
endif
else
kprofile:
kprofile_clean:
endif

################################################################################
############## build phy related modules ###################################### 
xpon_phy_modules:
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
	@echo "build PHY modules"
	$(MAKE) -C $(MODULES_PHY_DIR)
	cp $(MODULES_PRIV_SRC_DIR)/xpon_phy/phy.ko $(FILESYSTEM_DIR)/lib/modules/
endif

xpon_phy_modules_clean:
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PHY_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f phy.ko
endif
endif

################################################################################
############## build xPON related modules ###################################### 
xpon_modules:
#build xpon-phy
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
	@echo "build XPON PHY modules"
	$(MAKE) -C $(MODULES_PHY_DIR)
	cp $(MODULES_PRIV_SRC_DIR)/xpon_phy/phy.ko $(FILESYSTEM_DIR)/lib/modules/
endif

#build xpon-wan driver
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
	@echo "build XPON WAN modules"
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/xpon.ko $(FILESYSTEM_DIR)/lib/modules/
#else
	$(MAKE) -C $(MODULES_XPON_WAN_DIR)
	cp $(MODULES_PRIV_SRC_DIR)/xpon/xpon.ko $(FILESYSTEM_DIR)/lib/modules/
#endif
endif


#build ponvlan
ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
	@echo "build XPON vlan modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ponvlan.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PON_VLAN_DIR)
	cp $(MODULES_PON_VLAN_DIR)/ponvlan.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build ponmacfilter
ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
	@echo "build XPON mac filter modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ponmacfilter.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PON_MAC_FILTER_DIR)
	cp $(MODULES_PON_MAC_FILTER_DIR)/ponmacfilter.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build xponmap
ifneq ($(strip $(TCSUPPORT_GPON_MAPPING) $(TCSUPPORT_EPON_MAPPING)),)
	echo "build xponmap Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/xponmap.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_XPON_MAP_DIR) 
	cp $(MODULES_XPON_MAP_DIR)/xponmap.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_XPON_IGMP)),)
	echo "build xPON IGMP Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/xpon_igmp.ko $(FILESYSTEM_DIR)/lib/modules/
else	
	$(MAKE) -C $(MODULES_XPONIGMP_DIR)
	cp $(MODULES_XPONIGMP_DIR)/xpon_igmp.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_ETHER_DOWNVLAN)),)
	echo "build ether down vlan Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ether_downvlan.ko $(FILESYSTEM_DIR)/lib/modules/
else	
	$(MAKE) -C $(MODULES_ETHER_DOWNVLAN_DIR)
	cp $(MODULES_ETHER_DOWNVLAN_DIR)/ether_downvlan.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

xpon_modules_clean:
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PHY_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f phy.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_XPON_WAN_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f xpon.ko
endif
endif


ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PON_VLAN_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f ponvlan.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PON_MAC_FILTER_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f ponmacfilter.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_GPON_MAPPING) $(TCSUPPORT_EPON_MAPPING)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_XPON_MAP_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f xponmap.ko
endif
endif	

ifneq ($(strip $(TCSUPPORT_XPON_IGMP)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_XPONIGMP_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f xpon_igmp.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_ETHER_DOWNVLAN)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_ETHER_DOWNVLAN_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f ether_downvlan.ko
endif
endif

fttdp_inic_modules:
#build FTTdp iNIC driver
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	@echo "build FTTdp iNIC modules"
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/fttdp_inic.ko $(FILESYSTEM_DIR)/lib/modules/
#else
	$(MAKE) -C $(MODULES_FTTDP_INIC_DIR)
	cp $(MODULES_FTTDP_INIC_DIR)/fttdp_inic.ko $(FILESYSTEM_DIR)/lib/modules/
#endif
endif

fttdp_inic_modules_clean:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_FTTDP_INIC_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f fttdp_inic.ko
endif
endif
ifneq ($(strip $(TCSUPPORT_CT_SIMCARD_SEPARATION)$(TCSUPPORT_SIMCARD_GENERAL)),)
simcard_driver:
	@echo "build simcard_driver modules"
ifneq ($(strip $(TCSUPPORT_SIM_CONTROLLER)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mt7510sim.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_SIMCARD_DIR) clean
	$(MAKE) -C $(MODULES_SIMCARD_DIR)
	cp $(MODULES_SIMCARD_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

simcard_driver_clean:
	@echo "build simcard_driver modules"
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_SIMCARD_DIR) clean
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f mt7510sim.ko
endif
else
simcard_driver:
simcard_driver_clean:
endif

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
netlink_msg:
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/nlk_msg.ko $(FILESYSTEM_DIR)/lib/modules/
netlink_msg_clean:
else
netlink_msg:
	#chmod -R 777 $(MODULES_PRIV_SRC_DIR)/netlink_module
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/netlink_module clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/netlink_module
	#chmod -R 777 $(MODULES_PRIV_SRC_DIR)/netlink_module/*.ko
	cp $(MODULES_PRIV_SRC_DIR)/net/netlink_module/*.ko $(FILESYSTEM_DIR)/lib/modules/

netlink_msg_clean:
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/netlink_module clean
endif
else
netlink_msg:
netlink_msg_clean:
endif

#No support Purebridge Mode
#ifeq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
apps: libitfepon libitfgpon libitfswitch libitfphy libmtkitfqos libmtkitfvlan	libmtkitfsim libmtkitfpon libmtkitffe\
	  compileoption_lib	libxpon	ponmgr libatm	br2684ctl brctl	libtcapi libtcapi_enhance json_lib opensource_lib libecb3 libtcapi_cwmp ctsgw_lib bundle_lib api_lib xponcmd mxml	tcapi busybox simcard_app ethcmd cfg_manager ssl wget upnp-dm cwmp	mobile-manager axel	wirelesstool cpu \
	  iptables tc ebtables mtd pppd	tcci tcwdog	utelnetd boa dhcrelay ez-ipupdate osgi \
	  bftpd	inetd openssl snmpd	ntpclient tftpd	stb_test wpas igmpproxy	voip_app pppoe-relay zebra radvd iproute pwctlcmd 8021X ated wscd\
	  vconfig cmd_ci dhcpv6	dnsmasq	smuxctl	ecmh usb_3g_dongle usb_printer ntfs	automount usbmonitor epon_dummy_detect	autoip backuprestore pppoe_svr \
	  dms ssh ip skbmgr	ra_menu	siproxd	restore_linos_info samba traceroute	hw_nat sysstat fon fonV2 samba_ipv6	usb_modeswitch auto_mount_dongle vpn_tools eip93_apps \
	  pmmgr omci epon_oam new_shell libtcapi_inic tcapi_inic inic_client_heartbeat blockProcess mtk_uh_test bandwidth plugin_monitor app_store bundle_cmd httpdetect api_cmd dbgmgr bundle_monitor
	  
	  
apps_clean:	libitfepon_clean libitfgpon_clean libitfswitch_clean libitfphy_clean libmtkitfqos_clean	libmtkitfvlan_clean	libmtkitfsim_clean libmtkitfpon_clean libmtkitffe_clean\
	compileoption_lib_clean	libxpon_clean ponmgr_clean libatm_clean	br2684ctl_clean	brctl_clean	libtcapi_clean libtcapi_enhance_clean opensource_lib_clean libecb3_clean libtcapi_cwmp_clean json_lib_clean ctsgw_lib_clean bundle_lib_clean api_lib_clean xponcmd_clean busybox_clean cfg_manager_clean ssl_clean upnp-dm_clean cwmp_clean mobile-manager_clean axel_clean\
	wirelesstool_clean cpu_clean iptables_clean	tc_clean ebtables_clean	mtd_clean pppd_clean tcci_clean	tcwdog_clean osgi_clean \
	utelnetd_clean mxml_clean boa_clean	tcapi_clean	dhcrelay_clean ez-ipupdate_clean bftpd_clean inetd_clean openssl_clean snmpd_clean \
	ntpclient_clean	tftpd_clean	stb_test_clean wpas_clean igmpproxy_clean voip_app_clean pppoe-relay_clean zebra_clean radvd_clean iproute_clean \
	ethcmd_clean pwctlcmd_clean	8021X_clean	ated_clean wscd_clean vconfig_clean cmd_ci_clean dhcpv6_clean	dnsmasq_clean smuxctl_clean	ecmh_clean usb_3g_dongle_clean \
	usb_printer_clean  ntfs_clean automount_clean usbmonitor_clean epon_dummy_detect_clean autoip_clean dms_clean ssh_clean ip_clean	skbmgr_clean ra_menu_clean siproxd_clean restore_linos_info_clean samba_clean \
	backuprestore_clean	pppoe_svr_clean	traceroute_clean hw_nat_clean sysstat_clean	fon_clean fonV2_clean samba_ipv6_clean usb_modeswitch_clean	auto_mount_dongle_clean	vpn_tools_clean	eip93_apps_clean \
	pmmgr_clean	omci_clean epon_oam_clean new_shell_clean libtcapi_inic_clean tcapi_inic_clean inic_client_heartbeat_clean blockProcess_clean simcard_app_clean	mtk_uh_test_clean bandwidth_clean plugin_monitor_clean app_store_clean bundle_cmd_clean httpdetect_clean dbgmgr_clean \
	api_cmd_clean bundle_monitor_clean
#endif

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
httpdetect:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/httpdetect $(FILESYSTEM_DIR)/userfs/bin
httpdetect_clean:
	echo "TC_BUILD_RELEASECODE: Build httpdetect, do nothing!"
else
httpdetect:
	echo "Build OPENSSL"
	if test -e $(FILESYSTEM_DIR)/lib/libcrypto.so; \
	then echo "already have openssl"; \
	else $(MAKE) -C $(APP_OPENSSL_DIR_V1); \
	$(MAKE) install -C $(APP_OPENSSL_DIR_V1); \
	if test -e $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so; \
	then echo "Compile openssl success"; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so* $(FILESYSTEM_DIR)/lib -avd; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libssl.so*    $(FILESYSTEM_DIR)/lib -avd; \
	else echo "Compile openssl error!"; exit 1; \
	fi; \
	fi
	echo "Build httpdetect"

#	$(MAKE) -C $APP_HTTPDETECT_DIR) clean
	$(MAKE) -C $(APP_HTTPDETECT_DIR)
	if test -e $(APP_HTTPDETECT_DIR)/httpdetect; \
	then echo "Compile httpdetect success"; \
	else echo "Compile httpdetect error!"; exit 1; \
	fi
	cp  $(APP_HTTPDETECT_DIR)/httpdetect  $(FILESYSTEM_DIR)/userfs/bin/
		
httpdetect_clean:
	echo "Clean httpdetect"
	$(MAKE) -C $(APP_HTTPDETECT_DIR) clean
	if test -e $(FILESYSTEM_DIR)/userfs/bin/httpdetect; \
	then rm $(FILESYSTEM_DIR)/userfs/bin/httpdetect ;\
	fi	
	touch $(APP_OPENSSL_DIR_V1)/Makefile; 
	$(MAKE) -C $(APP_OPENSSL_DIR_V1) clean
	if test -e $(FILESYSTEM_DIR)/lib/libcrypto.so*; \
	then rm $(FILESYSTEM_DIR)/lib/libcrypto.so* ; \
	fi
	if test -e $(FILESYSTEM_DIR)/lib/libssl.so*; \
	then rm $(FILESYSTEM_DIR)/lib/libssl.so* ;\
	fi
endif	
else
httpdetect:
httpdetect_clean:
endif


#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#apps: libatm br2684ctl brctl libtcapi busybox cfg_manager wirelesstool\
#      mtd tcci tcwdog utelnetd mxml boa tcapi
#      
#apps_clean: libatm_clean br2684ctl_clean brctl_clean libtcapi_clean busybox_clean cfg_manager_clean  \
#      mtd_clean pppd_clean tcci_clean tcwdog_clean utelnetd_clean mxml_clean boa_clean tcapi_clean
#endif

libmtkitffe:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	@echo "##################Build libmtkitffe#####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_fe
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_fe/libmtk_itf_fe.so;	\
	then echo "Compile itf fe Lib	success"; \
	else echo "Compile itf fe  Lib	error!"; exit 1; \
	fi
endif

libmtkitffe_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	@echo "##################clean libmtkitffe#####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_fe clean
endif

libitfepon:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	@echo "##################Build libitfepon#####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_epon
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_epon/libmtk_itf_epon.so;	\
	then echo "Compile itf epon	Lib	success"; \
	else echo "Compile itf epon	Lib	error!"; exit 1; \
	fi
endif

libitfepon_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	@echo "##################clean libitfepon#####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_epon clean
endif

libitfgpon:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libitfgpon"
	echo "#####################Build libitfgpon####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_gpon
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_gpon/libmtk_itf_gpon.so;	\
	then echo "Compile itf xpon	Lib	success"; \
	else echo "Compile itf xpon	Lib	error!"; exit 1; \
	fi
endif

libitfgpon_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libitfgpon_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_gpon clean
endif

libitfswitch:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libitfswitch"
	echo "#####################Build libitfswitch####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_switch
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_switch/libmtk_itf_switch.so;	\
	then echo "Compile itf switch lib success";	\
	else echo "Compile itf switch lib error!"; exit	1; \
	fi
endif

libitfswitch_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libitfswitch_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_switch clean
endif


libitfphy:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libitfphy"
	echo "#####################Build libitfphy####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_phy
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_phy/libmtk_itf_phy.so; \
	then echo "Compile itf phy lib success"; \
	else echo "Compile itf phy lib error!";	exit 1;	\
	fi
endif


libitfphy_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libitfphy_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_phy clean
endif

libmtkitfqos:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libmtkitfqos"
	echo "#####################Build libmtkitfqos####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_qos
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_qos/libmtk_itf_qos.so; \
	then echo "Compile mtk itf qos Lib success"; \
	else echo "Compile mtk itf qos Lib error!";	exit 1;	\
	fi
endif

libmtkitfqos_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libmtkitfqos_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_qos clean
endif

libmtkitfvlan:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libmtkitfvlan"
	echo "#####################Build libmtkitfvlan####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_vlan
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_vlan/libmtk_itf_vlan.so;	\
	then echo "Compile mtk itf vlan	Lib	success"; \
	else echo "Compile mtk itf vlan	Lib	error!"; exit 1; \
	fi
endif

libmtkitfvlan_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libmtkitfvlan_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_vlan clean
endif

libmtkitfsim:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libmtkitfsim"
	echo "#####################Build libmtkitfsim####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_sim
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_sim/libmtk_itf_sim.so; \
	then echo "Compile mtk itf sim Lib success"; \
	else echo "Compile mtk itf sim Lib error!";	exit 1;	\
	fi
endif

libmtkitfsim_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libmtkitfsim_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_sim clean
endif

libmtkitfpon:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "Build	libmtkitfpon"
	echo "#####################Build libmtkitfpon####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_pon
	@if	test -e	$(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_pon/libmtk_itf_pon.so; \
	then echo "Compile mtk itf pon Lib success"; \
	else echo "Compile mtk itf pon Lib error!";	exit 1;	\
	fi
endif

libmtkitfpon_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#####################clean libmtkitfpon_clean####################"
	$(MAKE)	-C $(APP_PRIVATE_DIR)/mtk_itf/mtk_itf_pon clean
endif

tcpdump:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "##############Build tcpdump###########################"
	#ac_cv_linux_vers=2.6.36
	cd $(APP_PUBLIC_DIR)/libpcap-master	&& ./configure --host=mips-linux --with-pcap=linux
	$(MAKE)	-C $(APP_PUBLIC_DIR)/libpcap-master
	#ac_cv_lib_crypto_DES_cbc_encrypt
	cd $(APP_PUBLIC_DIR)/tcpdump-master	&& ./configure CPPFLAGS="-I$(APP_PUBLIC_DIR)/libpcap-master" LDFLAGS="-L$(APP_PUBLIC_DIR)/libpcap-master" --host=mips-linux	--disable-FEATURE
	$(MAKE)	-C $(APP_PUBLIC_DIR)/tcpdump-master
endif
	
tcpdump_clean:
ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	echo "#############clean tcpdump###########################"
	$(MAKE)	-C $(APP_PUBLIC_DIR)/libpcap-master	 clean
	$(MAKE)	-C $(APP_PUBLIC_DIR)/tcpdump-master	 clean
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
libxpon:
	@echo "TC_BUILD_RELEASECODE: Build libxpon"
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/* $(LIB_XPON_DIR)/
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libepon.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/epon/libepon.h $(LIB_DIR)/	
endif
ifneq ($(strip $(TCSUPPORT_EPON_MAPPING)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libeponmap.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/eponmap/libeponmap.h $(LIB_DIR)/	
endif
ifneq ($(strip $(TCSUPPORT_GPON_MAPPING)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so.* $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libgponmap.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/gponmap/libgponmap.h $(LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_vlan.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/pon_vlan/lib_pon_vlan.h $(LIB_DIR)/	
endif
ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libpon_mac_filter.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/pon_mac_filter/lib_pon_mac_filter.h $(LIB_DIR)/	
endif
ifneq ($(strip $(TCSUPPORT_XPON_IGMP)),)
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/$(TCPLATFORM)/libxpon_igmp.so.* $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/xpon_igmp/lib_xpon_igmp.h $(LIB_DIR)/	
endif
libxpon_clean:
	@echo "TC_BUILD_RELEASECODE: Clean libxpon, do nothing!"
else
libxpon:
	@echo "Build libxpon"
	$(MAKE) -C $(LIB_XPON_DIR)
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	@if test -e $(LIB_XPON_DIR)/libepon.so.1; \
	then echo "Compile epon Lib success"; \
	else echo "Compile epon Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libepon.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libepon.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libepon.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libepon.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/epon/libepon.h $(LIB_DIR)/	
	cp  $(LIB_XPON_DIR)/libepon.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libepon.so.* $(PUBLIC_LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_EPON_MAPPING)),)
	@if test -e $(LIB_XPON_DIR)/libeponmap.so.1; \
	then echo "Compile eponmap Lib success"; \
	else echo "Compile eponmap Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libeponmap.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libeponmap.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libeponmap.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libeponmap.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/eponmap/libeponmap.h $(LIB_DIR)/	
	cp  $(LIB_XPON_DIR)/libeponmap.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libeponmap.so.* $(PUBLIC_LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_GPON_MAPPING)),)
	@if test -e $(LIB_XPON_DIR)/libgponmap.so.1; \
	then echo "Compile gponmap Lib success"; \
	else echo "Compile gponmap Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libgponmap.so $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libgponmap.so.* $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libgponmap.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libgponmap.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/gponmap/libgponmap.h $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libgponmap.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libgponmap.so.* $(PUBLIC_LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
	@if test -e $(LIB_XPON_DIR)/libpon_vlan.so.1; \
	then echo "Compile pon vlan Lib success"; \
	else echo "Compile pon vlan Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libpon_vlan.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libpon_vlan.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libpon_vlan.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libpon_vlan.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/pon_vlan/lib_pon_vlan.h $(LIB_DIR)/	
	cp  $(LIB_XPON_DIR)/libpon_vlan.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libpon_vlan.so.* $(PUBLIC_LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
	@if test -e $(LIB_XPON_DIR)/libpon_mac_filter.so.1; \
	then echo "Compile mac filter Lib success"; \
	else echo "Compile mac filter Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/pon_mac_filter/lib_pon_mac_filter.h $(LIB_DIR)/	
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libpon_mac_filter.so.* $(PUBLIC_LIB_DIR)/
endif
ifneq ($(strip $(TCSUPPORT_XPON_IGMP)),)
	@if test -e $(LIB_XPON_DIR)/libxpon_igmp.so.1; \
	then echo "Compile xpon igmp Lib success"; \
	else echo "Compile xpon igmp Lib error!"; exit 1; \
	fi
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so.* $(LIB_DIR)/
	cp  $(LIB_XPON_DIR)/xpon_igmp/lib_xpon_igmp.h $(LIB_DIR)/	
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so $(PUBLIC_LIB_DIR)/
	cp  $(LIB_XPON_DIR)/libxpon_igmp.so.* $(PUBLIC_LIB_DIR)/
endif

libxpon_clean:
	@echo "Clean libxpon!"
	$(MAKE) -C $(LIB_XPON_DIR) clean	
endif
	
xponcmd:
	@echo "Build xponcmd"
	$(MAKE) -C $(APP_XPON_CMD_DIR)
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	@if test -e $(APP_XPON_CMD_DIR)/eponcmd; \
	then echo "Compile eponcmd success"; \
	else echo "Compile eponcmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/eponcmd $(FILESYSTEM_DIR)/usr/bin
endif
ifneq ($(strip $(TCSUPPORT_EPON_MAPPING)),)
	@if test -e $(APP_XPON_CMD_DIR)/eponmapcmd; \
	then echo "Compile eponmapcmd success"; \
	else echo "Compile eponmapcmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/eponmapcmd $(FILESYSTEM_DIR)/usr/bin/
endif
ifneq ($(strip $(TCSUPPORT_GPON_MAPPING)),)
	@if test -e $(APP_XPON_CMD_DIR)/gponmapcmd; \
	then echo "Compile gponmapcmd success"; \
	else echo "Compile gponmapcmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/gponmapcmd $(FILESYSTEM_DIR)/usr/bin
endif
ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
	@if test -e $(APP_XPON_CMD_DIR)/ponvlancmd; \
	then echo "Compile pon vlan cmd success"; \
	else echo "Compile pon vlan cmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/ponvlancmd $(FILESYSTEM_DIR)/usr/bin/
endif
ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
	@if test -e $(APP_XPON_CMD_DIR)/ponmacfiltercmd; \
	then echo "Compile pon mac filter cmd success"; \
	else echo "Compile pon mac filter cmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/ponmacfiltercmd $(FILESYSTEM_DIR)/usr/bin/
endif
ifneq ($(strip $(TCSUPPORT_XPON_IGMP)),)
	@if test -e $(APP_XPON_CMD_DIR)/xponigmpcmd; \
	then echo "Compile xpon igmp cmd success"; \
	else echo "Compile xpon igmp cmd error!"; exit 1; \
	fi
	cp $(APP_XPON_CMD_DIR)/xponigmpcmd $(FILESYSTEM_DIR)/usr/bin/
endif
xponcmd_clean:
	@echo "Clean xponcmd!"
	$(MAKE) -C $(APP_XPON_CMD_DIR) clean
else
libxpon:
libxpon_clean:
xponcmd:
xponcmd_clean:
endif

tcapi_inic:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	@echo "Build tcapi_inic"
	$(MAKE) -C $(APP_TCAPI_INIC_DIR)
	@if test -e $(APP_TCAPI_INIC_DIR)/tcapi_inic;\
	then echo "Compile tcapi_inic success"; \
	else echo "Compile tcapi_inic error!"; exit 1;\
	fi

	$(MAKE) -C $(APP_TCAPI_INIC_DIR) install
endif

tcapi_inic_clean:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	@echo "Clean tcapi_inic"
	$(MAKE) -C $(APP_TCAPI_INIC_DIR) clean
endif

inic_client_heartbeat:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	@echo "Build inic_client_heartbeat"
	$(MAKE) -C $(APP_INIC_CLIENT_HEARTBEAT_DIR)
	@if test -e $(APP_INIC_CLIENT_HEARTBEAT_DIR)/inic_client_heartbeat;\
	then echo "Compile inic_client_heartbeat success"; \
	else echo "Compile inic_client_heartbeat error!"; exit 1;\
	fi

	$(MAKE) -C $(APP_INIC_CLIENT_HEARTBEAT_DIR) install
endif

inic_client_heartbeat_clean:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	@echo "Clean inic_client_heartbeat"
	$(MAKE) -C $(APP_INIC_CLIENT_HEARTBEAT_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_OMCI)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
omci:
	@echo "Build OMCI"
	cp -rf $(APP_OMCI_DIR)/$(TCPLATFORM)/*.o $(APP_OMCI_DIR)/
	$(MAKE) -C $(APP_OMCI_DIR)
	@if test -e $(APP_OMCI_DIR)/omci;\
	then echo "Compile omci success"; \
	else echo "Compile omci error!"; exit 1;\
	fi
	cp $(APP_OMCI_DIR)/omci $(FILESYSTEM_DIR)/userfs/bin/
omci_clean:
	@echo "Clean OMCI!"
	$(MAKE) -C $(APP_OMCI_DIR) clean
else
ifeq ($(strip $(TCSUPPORT_AUTOBENCH)),)
omci:
	#@echo "Build OMCI!"
ifeq ($(strip $(TCSUPPORT_PARALLEL_BUILD_KERNEL_OFF)),)
	@echo -e "\e[33mParallel build omci!\e[0m"
endif
	$(MAKE) $(TC_PARALLEL_BUILD_PARAM_KERNEL) -C $(APP_OMCI_DIR)	
	@if test -e $(APP_OMCI_DIR)/omci;\
	then echo "Compile omci success"; \
	else echo "Compile omci error!"; exit 1;\
	fi
	cp $(APP_OMCI_DIR)/omci $(FILESYSTEM_DIR)/userfs/bin/
omci_clean:
	@echo "Clean OMCI!"
	@$(MAKE) -C $(APP_OMCI_DIR) clean
else
omci:
	@echo "Build OMCI!"
omci_clean:
	@echo "Clean OMCI!"
endif
endif
else
omci:
omci_clean:
endif	




ifneq ($(strip $(TCSUPPORT_EPON_OAM)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
epon_oam:
	@echo "Build epon_oam!"
	cp -rf $(APP_EPON_OAM_DIR)/$(TCPLATFORM)/*.o $(APP_EPON_OAM_DIR)/
	$(MAKE) -C $(APP_EPON_OAM_DIR)
	@if test -e $(APP_EPON_OAM_DIR)/epon_oam;\
	then echo "Compile epon_oam success"; \
	else echo "Compile epon_oam error!"; exit 1;\
	fi
	cp $(APP_EPON_OAM_DIR)/epon_oam $(FILESYSTEM_DIR)/userfs/bin/
epon_oam_clean:
	@echo "Clean epon_oam!"
	$(MAKE) -C $(APP_EPON_OAM_DIR) clean
else
epon_oam:
	@echo "Build epon_oam!"
	$(MAKE) -C $(APP_EPON_OAM_DIR) clean
	$(MAKE) -C $(APP_EPON_OAM_DIR)
	@if test -e $(APP_EPON_OAM_DIR)/epon_oam;\
	then echo "Compile epon_oam success"; \
	else echo "Compile epon_oam error!"; exit 1;\
	fi
	cp $(APP_EPON_OAM_DIR)/epon_oam $(FILESYSTEM_DIR)/userfs/bin/
epon_oam_clean:
	@echo "Clean epon_oam!"
	$(MAKE) -C $(APP_EPON_OAM_DIR) clean
endif
else
epon_oam:
epon_oam_clean:
endif

ifneq ($(strip $(TCSUPPORT_PONMGR)),)
ponmgr:
	echo "Build PONMGR !"
	$(MAKE) -C $(APP_PONMGR_DIR) all
	if test -e $(APP_PONMGR_DIR)/bin/libponapi.a;\
	then echo "Compile ponmgr success"; \
	else echo "Compile ponmgr error!"; exit 1;\
	fi
	cp $(APP_PONMGR_DIR)/bin/$@ $(FILESYSTEM_DIR)/userfs/bin/
ponmgr_clean:
	echo "Clean PON MGR !"
	$(MAKE) -C $(APP_PONMGR_DIR) distclean	
else
ponmgr:
ponmgr_clean:
endif

ifneq ($(strip $(TCSUPPORT_PMMGR)),)
pmmgr:
	@echo "Build PMMGR !"
	$(MAKE) -C $(APP_PMMGR_DIR) clean
	$(MAKE) -C $(APP_PMMGR_DIR)
	if test -e $(APP_PMMGR_DIR)/libpmapi.a;\
	then echo "Compile pmmgr success"; \
	else echo "Compile pmmgr error!"; exit 1;\
	fi
pmmgr_clean:
	echo "Clean Performance Monitor MGR !"
	$(MAKE) -C $(APP_PMMGR_DIR) clean
else
pmmgr:
pmmgr_clean:
endif

ifneq ($(strip $(TCSUPPORT_GPON_MAPPING)),)
gpon_map:
	echo "Build gponmapcmd !"
	$(MAKE) -C $(APP_GPONMAP_DIR) clean
	$(MAKE) -C $(APP_GPONMAP_DIR)
	if test -e $(APP_GPONMAP_DIR)/gponmapcmd; \
	then echo "Compile gponmapcmd success";\
	else echo "Compile gponmapcmd error!"; exit 1;\
	fi
	cp $(APP_GPONMAP_DIR)/gponmapcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_GPONMAP_DIR)/test_gponmap $(FILESYSTEM_DIR)/usr/bin/
gpon_map_clean:
	echo "Clean gponmapcmd !"
	$(MAKE) -C $(APP_GPONMAP_DIR) clean
else
gpon_map:
gpon_map_clean:
endif


ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#ifneq ($(strip $(TCSUPPORT_CT)),)
#cfg_manager:
#	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/cfg_manager $(FILESYSTEM_DIR)/userfs/bin
#cfg_manager_clean:
#	echo "Clean CFG_MANAGER! do nothing."

cfg_manager:
ifneq ($(strip $(TCSUPPORT_ECN_SIP))_$(strip $(TCSUPPORT_ECN_MEGACO)),_)
	echo ======support ecn general_cfg_manager_ct=======
else
ifneq ($(strip $(TCSUPPORT_VOIP_IMSSIP)),)
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/voip_data_util.o  $(APP_CFG_MANAGER_DIR)/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpcom.a  $(APP_CFG_MANAGER_DIR)/
endif
ifneq ($(strip $(VP_MEGACO)),)
	cp -rf $(APP_VOIP_MEGACO_BIN_DIR)/pmegaco_support.o  $(APP_CFG_MANAGER_DIR)/
	cp -rf $(APP_VOIP_MEGACO_BIN_DIR)/sp_common.a  $(APP_CFG_MANAGER_DIR)/
endif
endif

	echo "Build CFG_MANAGER!"
	cp -rf $(APP_CFG_MANAGER_DIR)/$(TCPLATFORM)/cfg_manager.o $(APP_CFG_MANAGER_DIR)/
	$(MAKE) -C $(APP_CFG_MANAGER_DIR)
	if test -e $(APP_CFG_MANAGER_DIR)/cfg_manager; \
	then echo "Compile cfg_manager success"; \
	else echo "Compile cfg_manager error!"; exit 1; \
	fi
	cp  $(APP_CFG_MANAGER_DIR)/cfg_manager  $(FILESYSTEM_DIR)/userfs/bin/


cfg_manager_clean:
	echo "Clean CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR) clean	
#endif
else
cfg_manager: 
ifneq ($(strip $(TCSUPPORT_ECN_SIP))_$(strip $(TCSUPPORT_ECN_MEGACO)),_)
	echo ======support ecn general_cfg_manager_ct=======
else
ifneq ($(strip $(TCSUPPORT_VOIP_IMSSIP)),)
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/voip_data_util.o  $(APP_CFG_MANAGER_DIR)/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpcom.a  $(APP_CFG_MANAGER_DIR)/
	rm -rf $(APP_CFG_MANAGER_DIR)/voip.o
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/voip.o  $(APP_CFG_MANAGER_DIR)/
endif
ifneq ($(strip $(VP_MEGACO)),)
	cp -rf $(APP_VOIP_MEGACO_BIN_DIR)/pmegaco_support.o  $(APP_CFG_MANAGER_DIR)/
	cp -rf $(APP_VOIP_MEGACO_BIN_DIR)/sp_common.a  $(APP_CFG_MANAGER_DIR)/
endif
endif

	echo "Build CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR)
	if test -e $(APP_CFG_MANAGER_DIR)/cfg_manager; \
	then echo "Compile cfg_manager success"; \
	else echo "Compile cfg_manager error!"; exit 1; \
	fi
	cp  $(APP_CFG_MANAGER_DIR)/cfg_manager  $(FILESYSTEM_DIR)/userfs/bin/

cfg_manager_clean:
	echo "Clean CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR) clean	

endif

ifneq ($(strip $(TCSUPPORT_CT)),)
skbmgr:
skbmgr_clean:
else
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
skbmgr:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/skbmgr $(FILESYSTEM_DIR)/userfs/bin/
skbmgr_clean:
else
skbmgr:
	echo "Build SKBMGR!"
	$(MAKE) -C $(APP_SKB_MANAGER_DIR)
	if test -e $(APP_SKB_MANAGER_DIR)/skbmgr; \
	then echo "Compile skbmgr success"; \
	else echo "Compile skbmgr error!"; exit 1; \
	fi
	cp  $(APP_SKB_MANAGER_DIR)/skbmgr  $(FILESYSTEM_DIR)/userfs/bin/


skbmgr_clean:
	echo "Clean SKB_MANAGER!"
	$(MAKE) -C $(APP_SKB_MANAGER_DIR) clean	
endif
endif


ifneq ($(strip $(TCSUPPORT_CWMP_SSL)),)
ssl:
	rm -f $(FILESYSTEM_DIR)/userfs/default_ssl_ca.pem
	cp $(APP_PRIVATE_DIR)/etc_script/default_ssl_ca.pem $(FILESYSTEM_DIR)/userfs/

	echo "Build Matrix-ssl!"
	$(MAKE) -C $(APP_SSL_DIR)
	if test -e $(APP_SSL_DIR)/libmatrixssl.so; \
	then echo "Compile Matrix-ssl success"; \
	else echo "Compile Matrix-ssl error!"; exit 1; \
	fi
	cp $(APP_SSL_DIR)/libmatrixssl.so  $(FILESYSTEM_DIR)/lib/
		
ssl_clean:
	rm -f $(FILESYSTEM_DIR)/userfs/default_ssl_ca.pem
	$(MAKE) -C $(APP_SSL_DIR) clean
else
ssl:		
ssl_clean:
endif

ifneq ($(strip $(WIZARD_OI_GUI) $(TCSUPPORT_CT_PHONEAPP) $(TCSUPPORT_CT_TR143_WGET_DOWNLOAD)),)
wget:
	#cp $(APP_PRIVATE_DIR)/etc_script/default_ssl_ca.pem $(FILESYSTEM_DIR)/userfs/

	echo "Build Matrix-ssl!"
	$(MAKE) -C $(APP_SSL_DIR)
	if test -e $(APP_SSL_DIR)/libmatrixssl.so; \
	then echo "Compile Matrix-ssl success"; \
	else echo "Compile Matrix-ssl error!"; exit 1; \
	fi
	mkdir -p $(APP_WGET_DIR)/lib
	cp -rf $(APP_SSL_DIR)/libmatrixssl.so  $(APP_WGET_DIR)/src/
	cp -rf $(FILESYSTEM_DIR)/lib/libtcapi.so $(APP_WGET_DIR)/src/libtcapi.so

	echo "Build wget"
	cd $(APP_WGET_DIR) 
	$(MAKE) -C $(APP_WGET_DIR)/src
	if test -e $(APP_WGET_DIR)/src/wget; \
	then echo "Compile wget success"; \
	else echo "Compile wget error!"; exit 1; \
	fi
	cp -rf $(APP_WGET_DIR)/src/wget  $(FILESYSTEM_DIR)/userfs/bin/
		
wget_clean:
	echo "Clean wget"
	rm -f $(FILESYSTEM_DIR)/userfs/default_ssl_ca.pem
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/wget
	$(MAKE) -C $(APP_WGET_DIR) clean
else
wget:		
wget_clean:
endif
	

ifneq ($(TCSUPPORT_CT_UPNP_DM),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
upnp-dm:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/upnp-dm $(FILESYSTEM_DIR)/userfs/bin/
upnp-dm_clean:
	echo "TC_BUILD_RELEASECODE: Build upnp-dm, do nothing!"
else
upnp-dm:
	echo "Build upnp-dm"
	$(MAKE) -C $(APP_UPNP_DM_DIR)
	if test -e $(APP_UPNP_DM_DIR)/upnp-dm; \
	then echo "Compile ctc-upnp-dm success"; \
	else echo "Compile ctc-upnp-dm error!"; exit 1; \
	fi
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/upnp-dm
	cp $(APP_UPNP_DM_DIR)/upnp-dm  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_UPNP_DM_DIR)/tr069client  $(FILESYSTEM_DIR)/userfs/bin/
	
upnp-dm_clean:
	echo "Clean upnp-dm"
	$(MAKE) -C $(APP_UPNP_DM_DIR) clean
endif
else
upnp-dm:
upnp-dm_clean:
endif

ifneq ($(TCSUPPORT_CT_BLOCK_PROCESS),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
blockProcess:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/blockProcess $(FILESYSTEM_DIR)/userfs/bin/
blockProcess_clean:
	echo "TC_BUILD_RELEASECODE: Build blockProcess, do nothing!"
else
blockProcess:
	echo "Build blockProcess"
	$(MAKE) -C $(APP_BLOCK_PROCESS_DIR)
	if test -e $(APP_BLOCK_PROCESS_DIR)/blockProcess; \
	then echo "Compile blockProcess success"; \
	else echo "Compile blockProcess error!"; exit 1; \
	fi
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/blockProcess
	cp $(APP_BLOCK_PROCESS_DIR)/blockProcess  $(FILESYSTEM_DIR)/userfs/bin/
	
blockProcess_clean:
	echo "Clean blockProcess"
	$(MAKE) -C $(APP_BLOCK_PROCESS_DIR) clean
endif
else
blockProcess:
blockProcess_clean:
endif


ifneq ($(TCSUPPORT_CT_SIMCARD_SEPARATION),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
simcard_app:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/simtest $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/simCard $(FILESYSTEM_DIR)/userfs/bin/
simcard_app_clean:
	echo "TC_BUILD_RELEASECODE: Build simCard, do nothing!"
else
simcard_app:
	$(MAKE) -C $(APP_SIM_CARD_DIR)/ all
	if test -e $(APP_SIM_CARD_DIR)/simCard; \
	then echo "Compile simCard success"; \
	else echo "Compile simCard error!"; exit 1; \
	fi
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/simCard
	cp $(APP_SIM_CARD_DIR)/simCard  $(FILESYSTEM_DIR)/userfs/bin/
	
	@if test -e $(APP_SIM_CARD_DIR)/simcardapp/simtest;\
	then echo "Compile simcard app success"; \
	else echo "Compile simcard app error!"; exit 1;\
	fi
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/simtest
	cp $(APP_PRIVATE_DIR)/simcard_app/simcardapp/simtest $(FILESYSTEM_DIR)/userfs/bin/
simcard_app_clean:
	$(MAKE) -C $(APP_SIM_CARD_DIR) clean
endif
else
simcard_app:
simcard_app_clean:
endif

ifneq ($(strip $(TCSUPPORT_MUH_TEST)),)
mtk_uh_test:
	echo "Build mtk_uh_test"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	export TEMPCC=$(CC)
	export CC="$(CC)$(TC3162_CFLAG)"
endif
	$(MAKE) -C $(APP_MTK_UH_TEST_DIR)
	if test -e $(APP_MTK_UH_TEST_DIR)/mtk_xhci_test_cli; \
	then echo "Compile mtk_uh_test success"; \
	else echo "Compile mtk_uh_test error!"; exit 1; \
	fi
	cp  $(APP_MTK_UH_TEST_DIR)/mtk_xhci_test_cli  $(FILESYSTEM_DIR)/usr/bin/
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	CC=$(TEMPCC)
endif
	
mtk_uh_test_clean:
	echo "Clean mtk_uh_test"
	$(MAKE) -C $(APP_MTK_UH_TEST_DIR) clean
else
mtk_uh_test:		
mtk_uh_test_clean:
endif

ifneq ($(strip $(TCSUPPORT_CWMP)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
cwmp:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/tr69  $(FILESYSTEM_DIR)/userfs/bin
cwmp_clean:
	echo "TC_BUILD_RELEASECODE: Build CWMP, do nothing!"
else
cwmp:
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/*.o $(APP_CWMP_DIR)/
ifeq ($(TCSUPPORT_WLAN),)
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/IgdClmp_noWlan.o $(APP_CWMP_DIR)/IgdClmp.o
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/IgdStubsClmp_noWlan.o $(APP_CWMP_DIR)/IgdStubsClmp.o
endif
endif
	echo "Build CWMP!"
	$(MAKE) -C $(APP_CWMP_DIR)
	if test -e $(APP_CWMP_DIR)/tr69; \
	then echo "Compile tr69 success"; \
	else echo "Compile tr69 error!"; exit 1; \
	fi
	cp $(APP_CWMP_DIR)/tr69  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_PRIVATE_DIR)/etc_script/devInf.conf $(FILESYSTEM_DIR)/usr/etc/

		
cwmp_clean:
	$(MAKE) -C $(APP_CWMP_DIR) clean
endif
else
cwmp:
	echo "No Build CWMP!, but we will build upnpd"
	$(MAKE) -C $(APP_UPNP_DIR)
	if test -e $(APP_UPNP_DIR)/upnpd; \
	then echo "Compile upnpd success"; \
	else echo "Compile upnpd error!"; exit 1; \
	fi
	cp $(APP_UPNP_DIR)/upnpd  $(FILESYSTEM_DIR)/userfs/bin/
	
cwmp_clean:
	echo "No Clean CWMP! we clean upnpd"
	$(MAKE) -C $(APP_UPNP_DIR) clean	
endif
ifneq ($(TCSUPPORT_CT_OSGI),)
osgi:
	$(MAKE) -C $(OSGI_DIR) install
	cp -rf $(OSGI_DIR)/zlib_install/lib/libz.so* $(FILESYSTEM_DIR)/lib
	#$(TOOLS_DIR)/mkfs.jffs2 -s 0x800 -e 0x20000 -p 0x2800000 -d $(OSGI_DIR)/_install_jffs2/ -o $(PROJECT_DIR)/images/osgi.img -b -n
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)	
	$(TOOLS_DIR)/mkyaffs2image $(OSGI_DIR)/_install_yaffs2/ $(PROJECT_DIR)/images/osgi.yaffs convert 0 0 0
else
	$(TOOLS_DIR)/mkyaffs2image $(OSGI_DIR)/_install_yaffs2/ $(PROJECT_DIR)/images/osgi.yaffs convert 8 0 0
endif
osgi_clean:
	rm -rf $(FILESYSTEM_DIR)/usr/lib
	rm -rf $(FILESYSTEM_DIR)/usr/share
	rm -rf $(FILESYSTEM_DIR)/usr/bin/jamvm 
	rm -rf $(FILESYSTEM_DIR)/lib/libz.so* 

ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
jamvm:
	$(MAKE) -C $(OSGI_DIR) jamvm
	
jamvm_clean:
	$(MAKE) -C $(OSGI_DIR) jamvm-clean

classpath:
	$(MAKE) -C $(OSGI_DIR) classpath

classpath_clean:
	$(MAKE) -C $(OSGI_DIR) classpath-clean
endif
else
osgi:
osgi_clean:
jamvm:
jamvm_clean:
classpath:
classpath_clean:
endif
ifneq ($(TCSUPPORT_CT_PHONEAPP),)
mobile-manager:
	echo "Build mobile-manager!"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp -rf $(MOBILE_MANAGEER_DIR)/$(TCPLATFORM)/src/* $(MOBILE_MANAGEER_DIR)/src/
	cp -rf $(MOBILE_MANAGEER_DIR)/$(TCPLATFORM)/libmobile/* $(MOBILE_MANAGEER_DIR)/libmobile/
endif
	$(MAKE) -C $(MOBILE_MANAGEER_DIR)
	if test -e $(MOBILE_MANAGEER_DIR)/mobile-manager; \
	then echo "Compile mobile-manager success"; \
	else echo "Compile mobile-manager error!"; exit 1; \
	fi
ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/mobile-manager
	ln -fs /usr/osgi/mobile/mobile-manager $(FILESYSTEM_DIR)/userfs/bin/mobile-manager
else
	rm -f $(FILESYSTEM_DIR)/userfs/bin/mobile-manager
	cp $(MOBILE_MANAGEER_DIR)/mobile-manager  $(FILESYSTEM_DIR)/userfs/bin/	
endif
mobile-manager_clean:
	echo "Clean mobile-manager!"
	$(MAKE) -C $(MOBILE_MANAGEER_DIR) clean

axel:
	echo "Build axel"
	$(MAKE) -C $(APP_AXEL_DIR)
	if test -e $(APP_AXEL_DIR)/axel; \
	then echo "Compile axel success"; \
	else echo "Compile axel error!"; exit 1; \
	fi
	cp $(APP_AXEL_DIR)/axel  $(FILESYSTEM_DIR)/userfs/bin/
		
axel_clean:
	echo "Clean axel"
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/axel
	$(MAKE) -C $(APP_AXEL_DIR) clean
else
mobile-manager:
	echo "donot build mobile-manager!"
mobile-manager_clean:
axel:
axel_clean:
endif

#Build linux-atm
libatm:
	echo "Build linux-atm library"
	$(MAKE) -C $(APP_LIBATM_DIR)
	if test -e $(APP_LIBATM_DIR)/lib/libatm.a; \
	then echo "Compile LIB ATM success"; \
	else echo "Compile LIB ATM error!"; exit 1; \
	fi
	
libatm_clean:
	echo "Clean linux-atm library"
	$(MAKE) -C $(APP_LIBATM_DIR) clean

#Build br2684ctl
br2684ctl:
	echo "Building br2684ctl"
	$(MAKE) -C $(APP_BR2684CTL_DIR)
	if test -e $(APP_BR2684CTL_DIR)/br2684ctl; \
	then echo "Compile Br2684ctl success"; \
	else echo "Compile Br2684ctl error!"; exit 1; \
	fi
	cp  $(APP_BR2684CTL_DIR)/br2684ctl  $(FILESYSTEM_DIR)/usr/bin/

br2684ctl_clean:
	echo "Clean br2684ctl"
	$(MAKE) -C $(APP_BR2684CTL_DIR) clean

#Build smuxctl
ifneq ($(strip $(TCSUPPORT_SMUX)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
smuxctl:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/smuxctl  $(FILESYSTEM_DIR)/usr/bin
smuxctl_clean:
	echo "TC_BUILD_RELEASECODE: Build SMUXCTL, do nothing!"
else
smuxctl:
	echo "Building smuxctl"
	$(MAKE) -C $(APP_SMUXCTL_DIR)
	if test -e $(APP_SMUXCTL_DIR)/smuxctl; \
	then echo "Compile smuxctl success"; \
	else echo "Compile smuxctl error!"; exit 1; \
	fi
	cp  $(APP_SMUXCTL_DIR)/smuxctl  $(FILESYSTEM_DIR)/usr/bin/

smuxctl_clean:
	echo "Clean smuxctl"
	$(MAKE) -C $(APP_SMUXCTL_DIR) clean
endif
else
smuxctl:		
smuxctl_clean:
endif

#Build bridge-utils-1.0.6
brctl:
	echo "Build bridge-utils-1.0.6"
	$(MAKE) -C $(APP_BRCTL_DIR)
	if test -e $(APP_BRCTL_DIR)/brctl/brctl; \
	then echo "Compile Brctl success"; \
	else echo "Compile Brctl error!"; exit 1; \
	fi
	cp  $(APP_BRCTL_DIR)/brctl/brctl  $(FILESYSTEM_DIR)/usr/bin/

brctl_clean:
	echo "Clean bridge-utils-1.0.6"
	$(MAKE) -C $(APP_BRCTL_DIR) clean

#Build tcapi library
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
libtcapi:
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/* $(APP_TCAPILIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.* $(PUBLIC_LIB_DIR)/
libtcapi_clean:
	echo "TC_BUILD_RELEASECODE: Building tcapi library, do nothing!"
else
libtcapi:
	echo "Building tcapi library"
	$(MAKE) -C $(APP_TCAPILIB_DIR)
	if test -e $(APP_TCAPILIB_DIR)/libtcapi.so.1.4; \
	then echo "Compile TCAPI Lib success"; \
	else echo "Compile TCAPI Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_TCAPILIB_DIR) install
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.* $(PUBLIC_LIB_DIR)/


libtcapi_clean:
	echo "Clean tcapi library"
	$(MAKE) -C $(APP_TCAPILIB_DIR) clean
endif

ifneq ($(strip $(TCSUPPORT_TCAPI_ENHANCE)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
libtcapi_enhance:
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/* $(APP_TCAPILIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/$(TCPLATFORM)/libtcapi_enhance.so.* $(PUBLIC_LIB_DIR)/
libtcapi_enhance_clean:
	echo "TC_BUILD_RELEASECODE: Building tcapi Enhance library, do nothing!"
else
libtcapi_enhance:
	echo "Building tcapi library"
	$(MAKE) -C $(APP_TCAPILIB_ENHANCE_DIR)
	if test -e $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so.1.4; \
	then echo "Compile TCAPI Enhance Lib success"; \
	else echo "Compile TCAPI Enhance Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_TCAPILIB_ENHANCE_DIR) install
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_ENHANCE_DIR)/libtcapi_enhance.so.* $(PUBLIC_LIB_DIR)/


libtcapi_enhance_clean:
	echo "Clean tcapi Enhance library"
	$(MAKE) -C $(APP_TCAPILIB_ENHANCE_DIR) clean
endif
else
libtcapi_enhance:
libtcapi_enhance_clean:
endif

ifneq ($(TCSUPPORT_CT_PHONEAPP),)
json_lib:
	echo "Building json_lib library"	
	$(MAKE) -C $(APP_JSON_DIR)
	if test -e $(APP_JSON_DIR)/libmjson-1.5.so; \
	then echo "Compile APP_JSON_DIR Lib success"; \
	else echo "Compile APP_JSON_DIR Lib error!"; exit 1; \
	fi
	
	$(MAKE) -C $(APP_JSON_DIR) install
	cp  $(APP_JSON_DIR)/libmjson-1.5.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_JSON_DIR)/libmjson-1.5.so $(LIB_DIR)/
	cp  $(APP_JSON_DIR)/libmjson-1.5.so $(PUBLIC_LIB_DIR)/


json_lib_clean: 
	echo "Clean APP_JSON_DIR library"
	$(MAKE) -C $(APP_JSON_DIR) clean
else
json_lib:
json_lib_clean: 
endif



ifneq ($(strip $(TCSUPPORT_CT_JOYME_BANDWIDTH)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
bandwidth:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/bandwidth $(FILESYSTEM_DIR)/userfs/bin
bandwidth_clean:
	echo "TC_BUILD_RELEASECODE: Build bandwidth, do nothing!"
else
bandwidth:
	echo "Build bandwidth"
	$(MAKE) -C $(APP_BANDWIDTH_DIR)
	if test -e $(APP_BANDWIDTH_DIR); \
	then echo "Compile bandwidth success"; \
	else echo "Compile bandwidth error!"; exit 1; \
	fi
	
	cp $(APP_BANDWIDTH_DIR)/bandwidth $(FILESYSTEM_DIR)/userfs/bin

bandwidth_clean:
	$(MAKE) -C $(APP_BANDWIDTH_DIR) clean
endif
else
bandwidth:
bandwidth_clean: 	
endif

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
plugin_monitor:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/plugin_monitor $(FILESYSTEM_DIR)/userfs/bin
plugin_monitor_clean:
	echo "TC_BUILD_RELEASECODE: Build plugin_monitor, do nothing!"
else
plugin_monitor:
	echo "Build plugin_monitor"
	$(MAKE) -C $(APP_PLUGIN_MONITOR_DIR)
	if test -e $(APP_PLUGIN_MONITOR_DIR); \
	then echo "Compile plugin_monitor success"; \
	else echo "Compile plugin_monitor error!"; exit 1; \
	fi
	
	cp $(APP_PLUGIN_MONITOR_DIR)/plugin_monitor $(FILESYSTEM_DIR)/userfs/bin

plugin_monitor_clean:
	$(MAKE) -C $(APP_PLUGIN_MONITOR_DIR) clean
endif

joyme_lib:
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp  $(APP_JOYME_DIR)/$(TCPLATFORM)/* $(APP_JOYME_DIR)/
endif
	echo "Building joyme_lib library"	
	$(MAKE) -C $(APP_JOYME_DIR)
	if test -e $(APP_JOYME_DIR)/libjoyme.so.1.4; \
	then echo "Compile APP_JOYME_DIR Lib success"; \
	else echo "Compile APP_JOYME_DIR Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_JOYME_DIR) install
	rm -f $(FILESYSTEM_DIR)/lib/libjoyme.so*
	ln -fs /usr/osgi/ctgwlib/libjoyme.so.1.4 $(FILESYSTEM_DIR)/lib/libjoyme.so
	ln -fs /usr/osgi/ctgwlib/libjoyme.so.1.4 $(FILESYSTEM_DIR)/lib/libjoyme.so.1
	cp  $(APP_JOYME_DIR)/libjoyme.so $(LIB_DIR)/
	cp  $(APP_JOYME_DIR)/libjoyme.so.* $(LIB_DIR)/
	cp  $(APP_JOYME_DIR)/libjoyme.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_JOYME_DIR)/libjoyme.so.* $(PUBLIC_LIB_DIR)/


joyme_lib_clean: 
	echo "Clean APP_JOYME_DIR library"
	$(MAKE) -C $(APP_JOYME_DIR) clean

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)

ctsgw_lib: joyme_lib
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/* $(APP_CTSGWLIB_DIR)/
	$(MAKE) -C $(APP_CTSGWLIB_DIR) install
	rm -f $(FILESYSTEM_DIR)/lib/libctsgw.so*
	ln -fs /usr/osgi/ctgwlib/libctsgw.so.1.4 $(FILESYSTEM_DIR)/lib/libctsgw.so
	ln -fs /usr/osgi/ctgwlib/libctsgw.so.1.4 $(FILESYSTEM_DIR)/lib/libctsgw.so.1
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/libctsgw.so $(LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/libctsgw.so.* $(LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/libctsgw.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/libctsgw.so.* $(PUBLIC_LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/$(TCPLATFORM)/ctsgw_test  $(FILESYSTEM_DIR)/userfs/bin/

ctsgw_lib_clean:joyme_lib_clean
	echo "TC_BUILD_RELEASECODE: Building ctsgw_lib library, do nothing!"

bundle_lib:
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/* $(APP_BUNDLELIB_DIR)/
	$(MAKE) -C $(APP_BUNDLELIB_DIR) install
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so $(LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so.* $(LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/$(TCPLATFORM)/libbundle.so.* $(PUBLIC_LIB_DIR)/

bundle_lib_clean:
	echo "TC_BUILD_RELEASECODE: Building bundle_lib library, do nothing!"

else

ctsgw_lib: joyme_lib
	echo "Building ctsgw_lib library"	
	$(MAKE) -C $(APP_CTSGWLIB_DIR)
	if test -e $(APP_CTSGWLIB_DIR)/libctsgw.so.1.4; \
	then echo "Compile APP_CTSGWLIB_DIR Lib success"; \
	else echo "Compile APP_CTSGWLIB_DIR Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_CTSGWLIB_DIR) install
	rm -f $(FILESYSTEM_DIR)/lib/libctsgw.so*
	ln -fs /usr/osgi/ctgwlib/libctsgw.so.1.4 $(FILESYSTEM_DIR)/lib/libctsgw.so
	ln -fs /usr/osgi/ctgwlib/libctsgw.so.1.4 $(FILESYSTEM_DIR)/lib/libctsgw.so.1
	cp  $(APP_CTSGWLIB_DIR)/libctsgw.so $(LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/libctsgw.so.* $(LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/libctsgw.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_CTSGWLIB_DIR)/libctsgw.so.* $(PUBLIC_LIB_DIR)/

	$(MAKE) -C $(APP_CTSGWLIB_DIR)/ctsgw_test
	if test -e $(APP_CTSGWLIB_DIR)/ctsgw_test/ctsgw_test; \
	then echo "Compile ctsgw_test success"; \
	else echo "Compile ctsgw_test error!"; exit 1; \
	fi
	cp $(APP_CTSGWLIB_DIR)/ctsgw_test/ctsgw_test  $(FILESYSTEM_DIR)/userfs/bin/

ctsgw_lib_clean:joyme_lib_clean
	echo "Clean APP_CTSGWLIB_DIR library"
	$(MAKE) -C $(APP_CTSGWLIB_DIR) clean

bundle_lib:
	echo "Building bundle_lib library"	
	$(MAKE) -C $(APP_BUNDLELIB_DIR)
	if test -e $(APP_BUNDLELIB_DIR)/libbundle.so.1.4; \
	then echo "Compile APP_BUNDLELIB_DIR Lib success"; \
	else echo "Compile APP_BUNDLELIB_DIR Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_BUNDLELIB_DIR) install
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so $(LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so.* $(LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_BUNDLELIB_DIR)/libbundle.so.* $(PUBLIC_LIB_DIR)/


bundle_lib_clean:
	echo "Clean APP_BUNDLELIB_DIR library"
	$(MAKE) -C $(APP_BUNDLELIB_DIR) clean
endif
else
plugin_monitor:
plugin_monitor_clean: 	

joyme_lib:
joyme_lib_clean: 

ctsgw_lib: 
ctsgw_lib_clean:

bundle_lib:
bundle_lib_clean:
endif
	

compileoption_lib:
	echo "Copy compileoption_lib source code from kernel"
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(KERNEL_DIR)/arch/mips/ralink/libcompileoption.c $(APP_COMPILEOPTION_LIB_DIR)
else
	cp $(KERNEL_DIR)/arch/mips/trendchip/tc3162/libcompileoption.c $(APP_COMPILEOPTION_LIB_DIR)
endif
	cp $(KERNEL_DIR)/include/linux/libcompileoption.h $(APP_COMPILEOPTION_LIB_DIR)
	echo "Building compileoption_lib library"	
	$(MAKE) -C $(APP_COMPILEOPTION_LIB_DIR)
	if test -e $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so.1.4; \
	then echo "Compile APP_COMPILEOPTION_LIB_DIR Lib success"; \
	else echo "Compile APP_COMPILEOPTION_LIB_DIR Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_COMPILEOPTION_LIB_DIR) install
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so $(LIB_DIR)/
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so.* $(LIB_DIR)/
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_COMPILEOPTION_LIB_DIR)/libcompileoption.so.* $(PUBLIC_LIB_DIR)/


compileoption_lib_clean:
	echo "Clean APP_COMPILEOPTION_LIB_DIR library"
	$(MAKE) -C $(APP_COMPILEOPTION_LIB_DIR) clean


opensource_lib: libtcapi
	echo "Building opensource_lib library"	
	$(MAKE) -C $(APP_OPENSOURCELIB_DIR)
	if test -e $(APP_OPENSOURCELIB_DIR)/libopensource.so.1.4; \
	then echo "Compile APP_OPENSOURCELIB_DIR Lib success"; \
	else echo "Compile APP_OPENSOURCELIB_DIR Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_OPENSOURCELIB_DIR) install
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so $(LIB_DIR)/
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so.* $(LIB_DIR)/
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_OPENSOURCELIB_DIR)/libopensource.so.* $(PUBLIC_LIB_DIR)/


opensource_lib_clean: libtcapi_clean
	echo "Clean APP_OPENSOURCELIB_DIR library"
	$(MAKE) -C $(APP_OPENSOURCELIB_DIR) clean

libtcapi_inic:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	echo "Building tcapi_inic library"
	$(MAKE) -C $(APP_TCAPILIB_INIC_DIR)
	if test -e $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so.1.4; \
	then echo "Compile TCAPI_INIC Lib success"; \
	else echo "Compile TCAPI_INIC Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_TCAPILIB_INIC_DIR) install
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_INIC_DIR)/libtcapi_inic.so.* $(PUBLIC_LIB_DIR)/
endif

libtcapi_inic_clean:
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	echo "Clean tcapi_inic library"
	$(MAKE) -C $(APP_TCAPILIB_INIC_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CT_DHCPC_OPTION60) $(TCSUPPORT_CT_DHCP6_OPTION) $(TCSUPPORT_CT_SIMCARD_SEPARATION)$(TCSUPPORT_SIMCARD_GENERAL)),)
libecb3:
	echo "Building ecb3 library"
	$(MAKE) -C $(APP_ECB3LIB_DIR)
	if test -e $(APP_ECB3LIB_DIR)/libecb3.so.1.4; \
	then echo "Compile ECB3 Lib success"; \
	else echo "Compile ECB3 Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_ECB3LIB_DIR) install
	cp  $(APP_ECB3LIB_DIR)/libecb3.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_ECB3LIB_DIR)/libecb3.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_ECB3LIB_DIR)/libecb3.so $(LIB_DIR)/
	cp  $(APP_ECB3LIB_DIR)/libecb3.so.* $(LIB_DIR)/
	cp  $(APP_ECB3LIB_DIR)/libecb3.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_ECB3LIB_DIR)/libecb3.so.* $(PUBLIC_LIB_DIR)/
libecb3_clean:
	echo "Clean ecb3 library"
	$(MAKE) -C $(APP_ECB3LIB_DIR) clean
else
libecb3:		
libecb3_clean:
endif

ifneq ($(strip $(TCSUPPORT_CWMP_FAST_GET)),)
#Build tcapi_cwmp library
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
libtcapi_cwmp:
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/* $(APP_TCAPILIB_DIR)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so $(LIB_DIR)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so.* $(LIB_DIR)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so $(PUBLIC_LIB_DIR_CWMP)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/$(TCPLATFORM)/libtcapi_cwmp.so.* $(PUBLIC_LIB_DIR_CWMP)/
libtcapi_cwmp_clean:
	echo "TC_BUILD_RELEASECODE: Building tcapi library, do nothing!"
else
libtcapi_cwmp:
	echo "Building tcapi_cwmp library"
	$(MAKE) -C $(APP_TCAPI_CWMP_LIB_DIR)
	if test -e $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so.1.4; \
	then echo "Compile TCAPI Lib success"; \
	else echo "Compile TCAPI Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_TCAPI_CWMP_LIB_DIR) install
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so $(LIB_DIR_CWMP)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so.* $(LIB_DIR_CWMP)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPI_CWMP_LIB_DIR)/libtcapi_cwmp.so.* $(PUBLIC_LIB_DIR)/


libtcapi_cwmp_clean:
	echo "Clean tcapi_cwmp library"
	$(MAKE) -C $(APP_TCAPI_CWMP_LIB_DIR) clean
endif
else
libtcapi_cwmp:
libtcapi_cwmp_clean:
endif

#Build busybox-1.00
busybox:
	echo "Building Busybox-1.00"
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_AUTO)),)
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_busybox_config
	cp $(PROJECT_AUTOCONFIG_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config
else

ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162)),)
	cp $(APP_BUSYBOX_DIR)/3162_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_PB)),)
	cp $(APP_BUSYBOX_DIR)/3162_pb_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U)),)
	cp $(APP_BUSYBOX_DIR)/3162u_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_config $(APP_BUSYBOX_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_ct_config $(APP_BUSYBOX_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6_E8B)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_e8b_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3262)),)
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cp $(APP_BUSYBOX_DIR)/3262_new_toolchain_config $(APP_BUSYBOX_DIR)/.config;
else
	cp $(APP_BUSYBOX_DIR)/3262_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BUSYBOX_DIR)/3262_ct_config $(APP_BUSYBOX_DIR)/.config;
endif
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/busybox.config; \
	then cp $(PROFILE_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config; \
	fi

ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	if test -e $(PROFILE_DIR)/busybox_new_toolchain.config; \
	then cp $(PROFILE_DIR)/busybox_new_toolchain.config $(APP_BUSYBOX_DIR)/.config; \
	fi
endif

	#copy mow kernel config as busybox_config to support release BSP
	rm -f $(APP_BUSYBOX_DIR)/busybox_config
	cp $(APP_BUSYBOX_DIR)/.config $(APP_BUSYBOX_DIR)/busybox_config
	echo "" > $(APP_BUSYBOX_DIR)/.depend
	
	#$(MAKE) -C $(APP_BUSYBOX_DIR) clean
	$(MAKE) -C $(APP_BUSYBOX_DIR)
	if test -e $(APP_BUSYBOX_DIR)/busybox; \
	then echo "Compile BusyBox success"; \
	else echo "Compile BusyBox error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_BUSYBOX_DIR) install
	
ifneq ($(TCSUPPORT_TRACEROUTE),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/traceroute
	ln -fs ../../bin/busybox $(FILESYSTEM_DIR)/usr/bin/traceroute
endif

busybox_menuconfig:
	echo "busybox menuconfig"
	echo "Building Busybox menuconfig"
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_AUTO)),)
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_busybox_config
	cp $(PROJECT_AUTOCONFIG_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config
else

ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162)),)
	cp $(APP_BUSYBOX_DIR)/3162_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_PB)),)
	cp $(APP_BUSYBOX_DIR)/3162_pb_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U)),)
	cp $(APP_BUSYBOX_DIR)/3162u_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6_E8B)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_e8b_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3262)),)
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cp $(APP_BUSYBOX_DIR)/3262_new_toolchain_config $(APP_BUSYBOX_DIR)/.config;
else
	cp $(APP_BUSYBOX_DIR)/3262_config $(APP_BUSYBOX_DIR)/.config;
endif
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/busybox.config; \
	then cp $(PROFILE_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config; \
	fi

ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	if test -e $(PROFILE_DIR)/busybox_new_toolchain.config; \
	then cp $(PROFILE_DIR)/busybox_new_toolchain.config $(APP_BUSYBOX_DIR)/.config; \
	fi
endif	

	#copy mow kernel config as busybox_config to support release BSP
	rm -f $(APP_BUSYBOX_DIR)/busybox_config
	cp $(APP_BUSYBOX_DIR)/.config $(APP_BUSYBOX_DIR)/busybox_config

	$(MAKE) -C $(APP_BUSYBOX_DIR) menuconfig
#	cp $(APP_BUSYBOX_DIR)/.config  $(PROFILE_DIR)/busybox_template.config
#	cp $(APP_BUSYBOX_DIR)/.config  $(PROFILE_DIR)/busybox.config
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cp $(APP_BUSYBOX_DIR)/.config $(PROFILE_DIR)/busybox_new_toolchain.config
else
	cp $(APP_BUSYBOX_DIR)/.config  $(PROFILE_DIR)/busybox.config
endif
	
busybox_clean:
	echo "Clean Busybox-1.00"
	$(MAKE) -C $(APP_BUSYBOX_DIR) clean
	
cpu:
	echo "Build cpu"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	export TEMPCC=$(CC)
	export CC="$(CC)$(TC3162_CFLAG)"
endif
#	$(MAKE) -C $(APP_CPU_DIR) clean
	$(MAKE) -C $(APP_CPU_DIR)
	if test -e $(APP_CPU_DIR)/cpu; \
	then echo "Compile cpu success"; \
	else echo "Compile cpu error!"; exit 1; \
	fi
	cp  $(APP_CPU_DIR)/cpu  $(FILESYSTEM_DIR)/usr/bin/
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	CC=$(TEMPCC)
endif
	
cpu_clean:
	echo "Clean cpu"
	$(MAKE) -C $(APP_CPU_DIR) clean

iptables:
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	echo "Build iptables 1.4.10"
	cd $(APP_IPTABLES_DIR) && ./configure --host=$(COMPILE_TOOLCHAIN) --target=$(COMPILE_TOOLCHAIN) --with-kernel=$(KERNEL_DIR) --prefix=$(APP_IPTABLES_INSTALL_DIR) --enable-static --disable-shared CFLAGS="$(CFG_CFLAGS)"
	make -C $(APP_IPTABLES_DIR) CC=$(CROSS)gcc AR=$(CROSS)ar RANLIB=$(CROSS)ranlib LD=$(CROSS)ld clean
	cd $(APP_IPTABLES_DIR) && ./configure --host=$(COMPILE_TOOLCHAIN) --target=$(COMPILE_TOOLCHAIN) --with-kernel=$(KERNEL_DIR) --prefix=$(APP_IPTABLES_INSTALL_DIR) --enable-static --disable-shared CFLAGS="$(CFG_CFLAGS)"
	make -C $(APP_IPTABLES_DIR) CC=$(CROSS)gcc AR=$(CROSS)ar RANLIB=$(CROSS)ranlib LD=$(CROSS)ld
	make -C $(APP_IPTABLES_DIR) CC=$(CROSS)gcc AR=$(CROSS)ar RANLIB=$(CROSS)ranlib LD=$(CROSS)ld install
	if test -e $(APP_IPTABLES_INSTALL_DIR)/sbin/iptables-multi; \
	then echo "Compile iptables 1.4.10 success"; \
	else echo "Compile iptables 1.4.10 error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_IPTABLES_INSTALL_DIR)/sbin/iptables-multi;\
	cp  $(APP_IPTABLES_INSTALL_DIR)/sbin/iptables-multi  $(FILESYSTEM_DIR)/usr/bin/iptables
ifneq ($(strip $(TCSUPPORT_IPV6_ADVANCE)),)
	$(STRIP) --strip-unneeded $(APP_IPTABLES_INSTALL_DIR)/sbin/ip6tables-multi;\
	cp  $(APP_IPTABLES_INSTALL_DIR)/sbin/ip6tables-multi  $(FILESYSTEM_DIR)/usr/bin/ip6tables
endif
iptables_clean:
	echo "Clean iptables 1.4.10"
#	ln -s $(KERNEL_DIR)/include/asm-mips $(KERNEL_DIR)/include/asm
	cd $(APP_IPTABLES_DIR) && ./configure --host=$(COMPILE_TOOLCHAIN) --target=$(COMPILE_TOOLCHAIN) --with-kernel=$(KERNEL_DIR) --prefix=$(APP_IPTABLES_INSTALL_DIR) --enable-static --disable-shared CFLAGS="$(CFG_CFLAGS)"
	make -C $(APP_IPTABLES_DIR) CC=$(CROSS)gcc AR=$(CROSS)ar RANLIB=$(CROSS)ranlib LD=$(CROSS)ld clean
	rm -f $(APP_IPTABLES_DIR)/extensions/.*.o.d

else
	echo "Build iptables"
	$(MAKE) -C $(APP_IPTABLES_DIR)
	if test -e $(APP_IPTABLES_DIR)/iptables; \
	then echo "Compile iptables success"; \
	else echo "Compile iptables error!"; exit 1; \
	fi
	cp  $(APP_IPTABLES_DIR)/iptables  $(FILESYSTEM_DIR)/usr/bin/		
ifneq ($(strip $(TCSUPPORT_IPV6_ADVANCE)),)
	cp  $(APP_IPTABLES_DIR)/ip6tables  $(FILESYSTEM_DIR)/usr/bin/
endif
	
iptables_clean:
	echo "Clean iptables"
#	ln -s $(KERNEL_DIR)/include/asm-mips $(KERNEL_DIR)/include/asm
	$(MAKE) -C $(APP_IPTABLES_DIR) clean
endif

tc:
	echo "Build tc"
	$(MAKE) -C $(APP_IPROUTE_TC_DIR)
	if test -e $(APP_IPROUTE_TC_DIR)/tc/tc; \
	then echo "Compile tc success"; \
	else echo "Compile tc error;" exit 1; \
	fi
ifeq ($(strip $(TCSUPPORT_CT_SWQOS) $(TCSUPPORT_XPON_HAL_API_QOS)),)	
	cp $(APP_IPROUTE_TC_DIR)/tc/tc $(FILESYSTEM_DIR)/usr/bin/
endif
	cp $(APP_IPROUTE_TC_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/

	
tc_clean:
	echo "Clean tc"
	$(MAKE) -C $(APP_IPROUTE_TC_DIR) clean
#Use new version ip command for DS-Lite and 6rd
ifneq ($(strip $(TCSUPPORT_DSLITE)),)
ip:
	echo "Build ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR)
	if test -e $(APP_IPROUTE_IP_DIR)/ip/ip; \
	then echo "Compile ip success"; \
	else echo "Compile ip error;" exit 1; \
	fi
	cp $(APP_IPROUTE_IP_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/

	
ip_clean:
	echo "Clean ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR) clean

else

ifneq ($(strip $(TCSUPPORT_6RD)),)
ip:
	echo "Build ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR)
	if test -e $(APP_IPROUTE_IP_DIR)/ip/ip; \
	then echo "Compile ip success"; \
	else echo "Compile ip error;" exit 1; \
	fi
	cp $(APP_IPROUTE_IP_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/	
ip_clean:
	echo "Clean ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR) clean
else
ip:
ip_clean:
endif

ip:
ip_clean:
endif

ebtables:
	echo "Build ebtables"
	$(MAKE) -C $(APP_EBTABLES_DIR)
	if test -e $(APP_EBTABLES_DIR)/ebtables; \
	then echo "Compile ebtables success"; \
	else echo "Compile ebtables error!"; exit 1; \
	fi
	cp $(APP_EBTABLES_DIR)/ebtables  $(FILESYSTEM_DIR)/usr/bin/		
	cp $(APP_EBTABLES_DIR)/libebtc.so $(FILESYSTEM_DIR)/lib
	cp $(APP_EBTABLES_DIR)/extensions/*.so $(FILESYSTEM_DIR)/lib/
	cp $(APP_EBTABLES_DIR)/ethertypes $(FILESYSTEM_DIR)/usr/etc/
	
ebtables_clean:
	echo "Clean ebtables"
	$(MAKE) -C $(APP_EBTABLES_DIR) clean
	
flash:
	echo "Build flash"
	$(MAKE) -C $(APP_FLASH_DIR)
	if test -e $(APP_FLASH_DIR)/flash; \
	then echo "Compile flash success"; \
	else echo "Compile flash error!"; exit 1; \
	fi
	cp $(APP_FLASH_DIR)/flash  $(FILESYSTEM_DIR)/userfs/bin/
	
flash_clean:
	echo "Clean flash"
	$(MAKE) -C $(APP_FLASH_DIR) clean

mtd:
	echo "Build mtd"
	$(MAKE) -C $(APP_MTD_DIR)
	if test -e $(APP_MTD_DIR)/mtd; \
	then echo "Compile mtd success"; \
	else echo "Compile mtd error!"; exit 1; \
	fi
	cp $(APP_MTD_DIR)/mtd  $(FILESYSTEM_DIR)/userfs/bin/
	
mtd_clean:
	echo "Clean mtd"
	$(MAKE) -C $(APP_MTD_DIR) clean

ifneq ($(strip $(TCSUPPORT_CT)),)
pppd:
	echo "Build pppd"
	$(MAKE) -C $(APP_PPPD_DIR)
	if test -e $(APP_PPPD_DIR)/pppd/pppd; \
	then echo "Compile pppd success"; \
	else echo "Compile pppd error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/libpppoatm.so; \
	then echo "Compile libpppoatm.so success"; \
	else echo "Compile libpppoatm.so error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/pppoe/libpppoe.so; \
	then echo "Compile libpppoe.so success"; \
	else echo "Compile libpppoe.so error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_PPPD_DIR) install
else
pppd:
	echo "Build pppd"
	$(MAKE) -C $(APP_PPPD_DIR)
	if test -e $(APP_PPPD_DIR)/pppd/pppd; \
	then echo "Compile pppd success"; \
	else echo "Compile pppd error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/pppoatm/libpppoatm.so; \
	then echo "Compile libpppoatm.so success"; \
	else echo "Compile libpppoatm.so error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/rp-pppoe/libpppoe.so; \
	then echo "Compile libpppoe.so success"; \
	else echo "Compile libpppoe.so error!"; exit 1; \
	fi
	cp $(APP_PPPD_DIR)/pppd/plugins/pppoatm/libpppoatm.so $(FILESYSTEM_DIR)/lib
	cp $(APP_PPPD_DIR)/pppd/plugins/rp-pppoe/libpppoe.so $(FILESYSTEM_DIR)/lib
	cp $(APP_PPPD_DIR)/pppd/pppd $(FILESYSTEM_DIR)/usr/bin/
#	$(MAKE) -C $(APP_PPPD_DIR) install
endif

pppd_clean:
	echo "Clean pppd"
	$(MAKE) -C $(APP_PPPD_DIR) clean

ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
tcci:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/tcci  $(FILESYSTEM_DIR)/usr/bin
	rm -f $(FILESYSTEM_DIR)/usr/bin/tce
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/tce
	rm -f $(FILESYSTEM_DIR)/usr/bin/sys
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/sys
	rm -f $(FILESYSTEM_DIR)/usr/bin/wan
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/wan
	rm -f $(FILESYSTEM_DIR)/usr/bin/w
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/w
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/hwnat
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/hwnat
endif
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/epon
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/epon
endif
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/ether
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/ether
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/sendicmp  $(FILESYSTEM_DIR)/userfs/bin/			
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_KPROFILE)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/profiling
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/profiling	
endif

tcci_clean:
	echo "TC_BUILD_RELEASECODE: Build tcci, do nothing!"
else
tcci:
	echo "Build tcci"
	$(MAKE) -C $(APP_TCCI_DIR)
	if test -e $(APP_TCCI_DIR)/tcci; \
	then echo "Compile tcci success"; \
	else echo "Compile tcci error!"; exit 1; \
	fi
	cp $(APP_TCCI_DIR)/tcci  $(FILESYSTEM_DIR)/usr/bin/
	rm -f $(FILESYSTEM_DIR)/usr/bin/tce
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/tce
	rm -f $(FILESYSTEM_DIR)/usr/bin/sys
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/sys
	rm -f $(FILESYSTEM_DIR)/usr/bin/wan
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/wan
	rm -f $(FILESYSTEM_DIR)/usr/bin/w
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/w
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/hwnat
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/hwnat
endif
ifneq ($(strip $(TCSUPPORT_I2C)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/sifm
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/sifm
endif
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/epon
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/epon
endif
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/ether
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/ether
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd
	
	echo "Building sendicmp"
	$(MAKE) -C $(APP_SENDICMP_DIR)
	if test -e $(APP_SENDICMP_DIR)/sendicmp; \
	then echo "Compile sendicmp success"; \
	else echo "Compile sendicmp error!"; exit 1; \
	fi
	cp $(APP_SENDICMP_DIR)/sendicmp  $(FILESYSTEM_DIR)/userfs/bin/
			
endif
	
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	#rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	#ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_USBDEVICE20)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
endif
ifneq ($(strip $(TCSUPPORT_KPROFILE)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/profiling
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/profiling	
endif
ifneq ($(strip $(TCSUPPORT_HEC_6906)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/amcv
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/amcv	
endif
		
tcci_clean:
	echo "Clean tcci"
	$(MAKE) -C $(APP_TCCI_DIR) clean
endif

#Building tcwdog
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
tcwdog:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/tcwdog $(FILESYSTEM_DIR)/usr/bin/
tcwdog_clean:
	echo "TC_BUILD_RELEASECODE: Build tcwdog, do nothing!"
else
tcwdog:
	echo "Build tcwdog"
	$(MAKE) -C $(APP_TCWDOG_DIR)
	if test -e $(APP_TCWDOG_DIR)/tcwdog; \
	then echo "Compile tcwdog success"; \
	else echo "Compile tcwdog error!"; exit 1; \
	fi
	cp $(APP_TCWDOG_DIR)/tcwdog  $(FILESYSTEM_DIR)/usr/bin/
	
tcwdog_clean:
	echo "Clean tcwdog"
	$(MAKE) -C $(APP_TCWDOG_DIR) clean
endif

utelnetd:
	echo "Build utelnetd"
	$(MAKE) -C $(APP_UTELNETD_DIR)
	if test -e $(APP_UTELNETD_DIR)/utelnetd; \
	then echo "Compile utelnetd success"; \
	else echo "Compile utelnetd error!"; exit 1; \
	fi
	cp $(APP_UTELNETD_DIR)/utelnetd  $(FILESYSTEM_DIR)/usr/bin/
	
utelnetd_clean:
	echo "Clean tcwdog"
	$(MAKE) -C $(APP_UTELNETD_DIR) clean
	
mxml:
	echo "Build mxml"
	$(MAKE) -C $(APP_MXML_DIR)
	if test -e $(APP_MXML_DIR)/libmxml.so.1.4; \
	then echo "Compile mxml success"; \
	else echo "Compile mxml error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_MXML_DIR)/libmxml.so.1.4
	$(MAKE) -C $(APP_MXML_DIR) install
	mv $(APP_MXML_DIR)/libmxml.so  $(FILESYSTEM_DIR)/lib/
	mv $(APP_MXML_DIR)/libmxml.so.*  $(FILESYSTEM_DIR)/lib/
	
mxml_clean:
	echo "Clean mxml"
	$(MAKE) -C $(APP_MXML_DIR) clean

boa:
ifneq ($(strip $(TCSUPPORT_WEBSERVER_SSL)),)
	echo "Build Matrix-ssl!"
	$(MAKE) -C $(APP_SSL_DIR)
	if test -e $(APP_SSL_DIR)/libmatrixssl.so; \
	then echo "Compile Matrix-ssl success"; \
	else echo "Compile Matrix-ssl error!"; exit 1; \
	fi
	cp $(APP_SSL_DIR)/libmatrixssl.so  $(FILESYSTEM_DIR)/lib/
	cp $(APP_BOA_DIR)/../key.pem $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_BOA_DIR)/../cert.pem $(FILESYSTEM_DIR)/usr/etc/
endif
	
	echo "Build boa"
	$(MAKE) -C $(APP_BOA_DIR)
	if test -e $(APP_BOA_DIR)/boa; \
	then echo "Compile boa success"; \
	else echo "Compile boa error!"; exit 1; \
	fi
	cp $(APP_BOA_DIR)/boa  $(FILESYSTEM_DIR)/userfs/bin/
		
boa_clean:
	echo "Clean boa"
	$(MAKE) -C $(APP_BOA_DIR) clean
ifneq ($(strip $(TCSUPPORT_WEBSERVER_SSL)),)
	$(MAKE) -C $(APP_SSL_DIR) clean
endif


#Build tcapi
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
tcapi:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/tcapi $(FILESYSTEM_DIR)/userfs/bin/
tcapi_clean:
	echo "TC_BUILD_RELEASECODE: Build tcapi, do nothing!"
else
tcapi:
	echo "Build tcapi"
	$(MAKE) -C $(APP_TCAPI_DIR)
	if test -e $(APP_TCAPI_DIR)/tcapi; \
	then echo "Compile tcapi success"; \
	else echo "Compile tcapi error!"; exit 1; \
	fi
	cp $(APP_TCAPI_DIR)/tcapi  $(FILESYSTEM_DIR)/userfs/bin/
	
tcapi_clean:
	echo "Clean tcapi"
	$(MAKE) -C $(APP_TCAPI_DIR) clean

endif

dhcrelay:
	echo "Build dhcrelay"
	$(MAKE) -C $(APP_DHCPRELAY_DIR)
	if test -e $(APP_DHCPRELAY_DIR)/relay/dhcrelay; \
	then echo "Compile dhcrelay success"; \
	else echo "Compile dhcrelay error!"; exit 1; \
	fi
	cp $(APP_DHCPRELAY_DIR)/relay/dhcrelay  $(FILESYSTEM_DIR)/userfs/bin/
	
dhcrelay_clean:
	echo "Clean dhcrelay"
	$(MAKE) -C $(APP_DHCPRELAY_DIR) clean
	
dproxy:
	echo "Build dproxy"
	$(MAKE) -C $(APP_DPROXY_DIR)
	if test -e $(APP_DPROXY_DIR)/dproxy; \
	then echo "Compile dproxy success"; \
	else echo "Compile dproxy error!"; exit 1; \
	fi
	cp $(APP_DPROXY_DIR)/dproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
dproxy_clean:
	echo "Clean dproxy"
	$(MAKE) -C $(APP_DPROXY_DIR) clean

ez-ipupdate:
	echo "Build dsdfsdns"
ifneq ($(strip $(TCSUPPORT_CT_E8DDNS)),)
#	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS=" -DTCSUPPORT_CT_E8DDNS $(CFG_CFLAGS)"
endif
	$(MAKE) -C $(APP_EZ-IPUPDATE_DIR)
	if test -e $(APP_EZ-IPUPDATE_DIR)/ez-ipupdate; \
	then echo "Compile ez-ipupdate success"; \
	else echo "Compile ez-ipupdate error!"; exit 1; \
	fi
	cp $(APP_EZ-IPUPDATE_DIR)/ez-ipupdate  $(FILESYSTEM_DIR)/userfs/bin/
	
ez-ipupdate_clean:
	echo "Clean ddns"
	$(MAKE) -C $(APP_EZ-IPUPDATE_DIR) clean

bftpd:
	echo "Build bftpd"
	$(MAKE) -C $(APP_BFTPD_DIR)
	if test -e $(APP_BFTPD_DIR)/bftpd; \
	then echo "Compile bftpd success"; \
	else echo "Compile bftpd error!"; exit 1; \
	fi
	cp $(APP_BFTPD_DIR)/bftpd  $(FILESYSTEM_DIR)/userfs/bin/



ifneq ($(strip $(TCSUPPORT_USB_FTP_SERVER)),)
	rm -rf $(FILESYSTEM_DIR)/usr/etc/bftpd.conf
	cp $(APP_PRIVATE_DIR)/etc_script/bftpd/bftpd.conf $(FILESYSTEM_DIR)/usr/etc/bftpd.conf
endif   	



bftpd_clean:
	echo "Clean bftpd"
	$(MAKE) -C $(APP_BFTPD_DIR) clean


#Build inetd
inetd:
	echo "Build inetd"
	$(MAKE) -C $(APP_INETD_DIR)
	if test -e $(APP_INETD_DIR)/inetd; \
	then echo "Compile inetd success"; \
	else echo "Compile inetd error!"; exit 1; \
	fi
	cp $(APP_INETD_DIR)/inetd  $(FILESYSTEM_DIR)/userfs/bin/
	
inetd_clean:
	echo "Clean inetd"
	$(MAKE) -C $(APP_INETD_DIR) clean
	
#build openssl
ifneq ($(strip $(TCSUPPORT_ENCRYPT_ROMFILE_AES)),)	
openssl:
	echo "Build OPENSSL"
	$(MAKE) -C $(APP_OPENSSL_DIR)
	$(MAKE) install -C $(APP_OPENSSL_DIR)
	if test -e $(APP_OPENSSL_DIR)/OPSSL/bin/openssl; \
	then cp -f $(APP_OPENSSL_DIR)/OPSSL/bin/openssl $(FILESYSTEM_DIR)/userfs/bin/; \
	fi
openssl_clean:	
	$(MAKE) -C $(APP_OPENSSL_DIR) clean
	if test -e $(FILESYSTEM_DIR)/userfs/bin/openssl; \
	then rm $(FILESYSTEM_DIR)/userfs/bin/openssl; \
	fi
else
openssl:
openssl_clean:
endif

#Build NET-SNMP
ifneq ($(strip $(TCSUPPORT_SNMP)),) 
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
snmpd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/snmpd $(FILESYSTEM_DIR)/userfs/bin/
snmpd_clean:
	echo "TC_BUILD_RELEASECODE: Build snmpd, do nothing!"
else
snmpd:
	echo "Build  snmpd"
ifneq ($(strip $(TCSUPPORT_SNMP_V3)),)
	echo "Build OPENSSL"
	$(MAKE) -C $(APP_OPENSSL_DIR)
	$(MAKE) install -C $(APP_OPENSSL_DIR)
	if test -e $(APP_OPENSSL_DIR)/OPSSL/lib/libcrypto.a; \
	then echo "Compile openssl success"; \
	else echo "Compile openssl error!"; exit 1; \
	fi
	cp -rf $(APP_OPENSSL_DIR)/OPSSL  $(APP_PUBLIC_DIR)/net-snmp-5.3.1/
	
	rm -rf $(FILESYSTEM_DIR)/usr/etc/net-snmp/
	mkdir $(FILESYSTEM_DIR)/usr/etc/net-snmp
	mkdir $(FILESYSTEM_DIR)/usr/etc/net-snmp/snmp
endif   	
	rm -rf $(APP_SNMPD_DIR)
	cp -rf $(APP_PUBLIC_DIR)/net-snmp-5.3.1 $(APP_SNMPD_DIR)
	
	cd $(APP_PUBLIC_DIR) && find . -name ".svn" | xargs rm -rf
	chmod 777 $(APP_PRIVATE_DIR)/code_reduce_patch/net-snmp-5.3.1_config.sh
	cd $(APP_SNMPD_DIR) && ../code_reduce_patch/net-snmp-5.3.1_config.sh
	
	if test -e $(APP_SNMPD_DIR)/agent/snmpd; \
	then echo "Compile snmpd success"; \
	else echo "Compile snmpd error!"; exit 1; \
	fi
	cp $(APP_SNMPD_DIR)/agent/snmpd  $(FILESYSTEM_DIR)/userfs/bin/
	
snmpd_clean:
	echo "Clean snmpd"
	rm -rf $(APP_SNMPD_DIR)
endif
else
snmpd:
snmpd_clean:
endif

#Build ntpclinet
ntpclient:
	echo "Build ntpclient"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	export TEMPCC=$(CC)
	export CC="$(CC)$(TC3162_CFLAG)"
	echo $(CC)
endif
	$(MAKE) -C $(APP_NTPCLIENT_DIR)
	if test -e $(APP_NTPCLIENT_DIR)/ntpclient; \
	then echo "Compile ntpclient success"; \
	else echo "Compile ntpclient error!"; exit 1; \
	fi
	cp $(APP_NTPCLIENT_DIR)/ntpclient  $(FILESYSTEM_DIR)/userfs/bin/
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	CC=$(TEMPCC)
endif
	
ntpclient_clean:
	echo "Clean ntpclient"
	$(MAKE) -C $(APP_NTPCLIENT_DIR) clean

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
zebra:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/zebra $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ripd $(FILESYSTEM_DIR)/userfs/bin/
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ripngd $(FILESYSTEM_DIR)/userfs/bin/
endif
zebra_clean:
	echo "TC_BUILD_RELEASECODE: Zebra do nothing!"
else
zebra:
ifneq ($(strip $(TCSUPPORT_CZ_GENERAL)),)
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS=" -DTCSUPPORT_CZ_GENERAL $(CFG_CFLAGS)"
else
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-ipv6 --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="-DTCSUPPORT_CZ_GENERAL $(CFG_CFLAGS)"
endif
else
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
else
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-ipv6 --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
endif
endif
	$(MAKE) -C $(APP_ZEBRA_DIR)
	if test -e $(APP_ZEBRA_DIR)/zebra/zebra; \
	then echo "Compile zebra success"; \
	else echo "Compile zebra error!"; exit 1; \
	fi	
	if test -e $(APP_ZEBRA_DIR)/ripd/ripd; \
	then echo "Compile ripd success"; \
	else echo "Compile ripd error!"; exit 1; \
	fi
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	if test -e $(APP_ZEBRA_DIR)/ripngd/ripngd; \
	then echo "Compile ripngd success"; \
	else echo "Compile ripngd error!"; exit 1; \
	fi
endif
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/zebra/zebra
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/ripd/ripd
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/ripngd/ripngd
endif
	cp $(APP_ZEBRA_DIR)/zebra/zebra  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_ZEBRA_DIR)/ripd/ripd  $(FILESYSTEM_DIR)/userfs/bin/
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cp $(APP_ZEBRA_DIR)/ripngd/ripngd  $(FILESYSTEM_DIR)/userfs/bin/
endif

ifneq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_RIPD)),)
	echo "Compile zebra success"
	echo "Compile ripd success"
else
	rm -f $(FILESYSTEM_DIR)/userfs/bin/zebra
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ripd
endif
endif

zebra_clean:
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
else
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-ipv6 --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
endif
	$(MAKE) -C $(APP_ZEBRA_DIR) clean
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	if test -e $(FILESYSTEM_DIR)/userfs/bin/ripngd; \
	then rm $(FILESYSTEM_DIR)/userfs/bin/ripngd; \
	fi
endif
endif

#Build tftp-1.0
tftpd:
	echo "Build tftpd"
	$(MAKE) -C $(APP_TFTPD_DIR)
	if test -e $(APP_TFTPD_DIR)/tftpd; \
	then echo "Compile tftpd success"; \
	else echo "Compile tftpd error!"; exit 1; \
	fi
	cp $(APP_TFTPD_DIR)/tftpd  $(FILESYSTEM_DIR)/userfs/bin/
tftpd_clean:
	echo "Clean tftpd"
	$(MAKE) -C $(APP_TFTPD_DIR) clean

#Build stb_test
ifneq ($(strip $(TCSUPPORT_CT_STB_TEST)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
stb_test:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/stb_test $(FILESYSTEM_DIR)/userfs/bin/
stb_test_clean:
	echo "TC_BUILD_RELEASECODE: Build stb_test, do nothing!"
else
stb_test:
	echo "Build stb_test"
	$(MAKE) -C $(APP_STB_TEST_DIR)
	if test -e $(APP_STB_TEST_DIR)/stb_test; \
	then echo "Compile stb_test success"; \
	else echo "Compile stb_test error!"; exit 1; \
	fi
	cp $(APP_STB_TEST_DIR)/stb_test  $(FILESYSTEM_DIR)/userfs/bin/
stb_test_clean:
	echo "Clean stb_test"
	$(MAKE) -C $(APP_STB_TEST_DIR) clean
endif
else
stb_test:
	echo "No Build stb_test!"
stb_test_clean:
	echo "No Clean stb_test!"
endif
	
#Build wpas
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
wpas:
	echo "BUILD WPA SUPPLICANT"
	$(MAKE) -C $(APP_OPENSSL_DIR)
	$(MAKE) install -C $(APP_OPENSSL_DIR)
	
	cp -r $(APP_OPENSSL_DIR)/OPSSL $(APP_WPA_SUPP_DIR)/
	
	$(MAKE) wpa_supplicant -C $(APP_WPA_SUPP_DIR)
	if test -e $(APP_WPA_SUPP_DIR)/wpa_supplicant; \
	then echo "Wpa supplicant success"; \
	else echo "Wpa supplicant error"; exit 1; \
	fi;

	$(MAKE) wpa_cli -C $(APP_WPA_SUPP_DIR)
	if test -e $(APP_WPA_SUPP_DIR)/wpa_cli; \
	then echo "Wpa cli success"; \
	else echo "Wpa cli error"; exit 1; \
	fi;

	$(STRIP) $(APP_WPA_SUPP_DIR)/wpa_supplicant
	$(STRIP) $(APP_WPA_SUPP_DIR)/wpa_cli

	cp $(APP_WPA_SUPP_DIR)/wpa_supplicant $(FILESYSTEM_DIR)/userfs/bin
	cp $(APP_WPA_SUPP_DIR)/wpa_cli $(FILESYSTEM_DIR)/userfs/bin

wpas_clean:
	$(MAKE) -C $(APP_WPA_SUPP_DIR) clean
	$(MAKE) -C $(APP_OPENSSL_DIR) clean
else
wpas:
	echo "NO Build WPA supplicant"
wpas_clean:
	echo "NO clean WPA supplicant"
endif

#Build wireless_tools.28
ifneq ($(strip $(TCSUPPORT_WLAN)),)
wirelesstool:
	echo "Build wirelesstool"
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR) clean
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR)
	if test -e $(APP_WRIELESSTOOL_DIR)/iwpriv; \
	then echo "Compile iwpriv success"; \
	else echo "Compile iwpriv error!"; exit 1; \
	fi
	if test -e $(APP_WRIELESSTOOL_DIR)/libiw.so.28; \
	then echo "Compile libiw.so.28 success"; \
	else echo "Compile libiw.so.28 error!"; exit 1; \
	fi
	cp $(APP_WRIELESSTOOL_DIR)/iwpriv  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_WRIELESSTOOL_DIR)/libiw.so.28  $(FILESYSTEM_DIR)/lib/
	
wirelesstool_clean:
	echo "Clean wirelesstool"
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR) clean
	
else
wirelesstool:
	echo "No Build Wireless!"
wirelesstool_clean:
	echo "No Clean Wireless!"	
endif


#Build igmpproxy
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_IGMP_PROXY_V3)),)
igmpproxy:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/igmpproxy $(FILESYSTEM_DIR)/userfs/bin/
igmpproxy_clean:
	echo "TC_BUILD_RELEASECODE: Build igmpproxy, do nothing!"
else
igmpproxy:
	echo "Build igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR)
	if test -e $(APP_IGMPPROXY_DIR)/igmpproxy; \
	then echo "Compile igmpproxy success"; \
	else echo "Compile igmpproxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_IGMPPROXY_DIR)/igmpproxy
	cp $(APP_IGMPPROXY_DIR)/igmpproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
igmpproxy_clean:
	echo "Clean igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR) clean
endif
else
igmpproxy:
	echo "Build igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR)
	if test -e $(APP_IGMPPROXY_DIR)/igmpproxy; \
	then echo "Compile igmpproxy success"; \
	else echo "Compile igmpproxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_IGMPPROXY_DIR)/igmpproxy
	cp $(APP_IGMPPROXY_DIR)/igmpproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
igmpproxy_clean:
	echo "Clean igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
traceroute:
	echo "Build traceroute"
	$(MAKE) -C $(APP_TRACEROUTE_DIR)
	if test -e $(APP_TRACEROUTE_DIR)/traceroute/traceroute; \
	then echo "Compile traceroute success"; \
	else echo "Compile traceroute error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_TRACEROUTE_DIR)/traceroute/traceroute	
	cp $(APP_TRACEROUTE_DIR)/traceroute/traceroute  $(FILESYSTEM_DIR)/userfs/bin/traceroute6
	
traceroute_clean:
	echo "Clean traceroute"
	$(MAKE) -C $(APP_TRACEROUTE_DIR) clean
else
traceroute:
traceroute_clean:
endif

#Build hw_nat
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
hw_nat:
ifeq ($(strip $(TCSUPPORT_MT7510_FE)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ac $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/acl $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/mtr $(FILESYSTEM_DIR)/userfs/bin/
endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/hw_nat $(FILESYSTEM_DIR)/userfs/bin/
hw_nat_clean:
	echo "TC_BUILD_RELEASECODE: Build hw_nat, do nothing!"
else
hw_nat:
	echo "Build hw_nat"
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	$(MAKE) -C $(APP_RA_HWNAT_7510_DIR)
	if test -e $(APP_RA_HWNAT_7510_DIR)/hw_nat; \
	then echo "Compile hw_nat success"; \
	else echo "Compile hw_nat error!"; exit 1; \
	fi
	cp $(APP_RA_HWNAT_7510_DIR)/hw_nat  $(FILESYSTEM_DIR)/userfs/bin/
else
	$(MAKE) -C $(APP_RA_HWNAT_DIR)
	if test -e $(APP_RA_HWNAT_DIR)/hw_nat; \
	then echo "Compile hw_nat success"; \
	else echo "Compile hw_nat error!"; exit 1; \
	fi
	cp $(APP_RA_HWNAT_DIR)/ac  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/acl  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/hw_nat  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/mtr  $(FILESYSTEM_DIR)/userfs/bin/
endif	
hw_nat_clean:
	echo "Clean hw_nat"
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	$(MAKE) -C $(APP_RA_HWNAT_7510_DIR) clean
else
	$(MAKE) -C $(APP_RA_HWNAT_DIR) clean
endif
endif
else
hw_nat:
	echo "No Build hw_nat!"
hw_nat_clean:
	echo "No Clean hw_nat!"
endif

#Build sysstat
sysstat:
	echo "Build sysstat"
	$(MAKE) -C $(APP_SYSSTAT_DIR)
	if test -e $(APP_SYSSTAT_DIR)/mpstat; \
	then echo "Compile sysstat success"; \
	else echo "Compile sysstat error!"; exit 1; \
	fi
	cp $(APP_SYSSTAT_DIR)/mpstat  $(FILESYSTEM_DIR)/usr/bin/
	
sysstat_clean:
	echo "Clean sysstat"
	$(MAKE) -C $(APP_SYSSTAT_DIR) clean

ifneq ($(strip $(RELEASEBSP)),)
	rm -rf $(APP_PRIVATE_DIR)/voip/Dare/
	rm -rf $(APP_PRIVATE_DIR)/voip/dare_megaco/
	rm -rf $(APP_PRIVATE_DIR)/voip/imssip/
endif

ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifeq ($(strip $(VOIP_DSP)),MTK)
ifneq ($(strip $(TCSUPPORT_CT)),)
voip_app:	
	echo "Build mtk"
#	$(MAKE) -C $(APP_VOIP_EVA_DIR) PLATFORM=tc3182 DSP=mtk
	-cp -rf $(APP_VOIP_EVA_DIR)/bin/*.so  $(FILESYSTEM_DIR)/lib
	-cp -rf $(APP_MTKSIP_DIR)/install/lib/*.so  $(FILESYSTEM_DIR)/lib
ifneq ($(strip $(TCSUPPORT_ECN_SIP))_$(strip $(TCSUPPORT_ECN_MEGACO)),_)
ifneq ($(strip $(TCSUPPORT_ECN_SIP)),)
	cp $(APP_VOIP_BIN_DIR)/sipclient  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_VOIP_BIN_DIR)/voip_sys.cfg  $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_ECN_MEGACO)),)
	cp -rf $(APP_VOIP_BIN_DIR)/mgapp  $(FILESYSTEM_DIR)/userfs/bin/
	cp -rf $(APP_VOIP_BIN_DIR)/tcVoIPApiServer  $(FILESYSTEM_DIR)/userfs/bin/
endif
else
ifneq ($(strip $(TCSUPPORT_VOIP_IMSSIP)),)
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpMsgSvr  $(FILESYSTEM_DIR)/userfs/bin/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/sipapp  $(FILESYSTEM_DIR)/userfs/bin/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpsip  $(FILESYSTEM_DIR)/userfs/bin/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpdrc  $(FILESYSTEM_DIR)/userfs/bin/
	cp -rf $(APP_VOIP_IMSSIP_BIN_DIR)/vpcfg  $(FILESYSTEM_DIR)/userfs/bin/
endif
ifneq ($(strip $(VP_MEGACO)),)
	cp -rf $(APP_VOIP_MEGACO_BIN_DIR)/voip  $(FILESYSTEM_DIR)/userfs/bin/
endif
endif
	echo "Installing CountrySetting..."
	cp -rf $(APP_PRIVATE_DIR)/voip/CountrySetting $(FILESYSTEM_DIR)/userfs/
	-cp -rf $(APP_VOIP_EVA_DIR)/evcom/evcom  $(FILESYSTEM_DIR)/userfs/bin/
	-cp -rf $(APP_VOIP_EVA_DIR)/loader/voip_loader $(FILESYSTEM_DIR)/userfs/bin/
voip_app_clean:
#	$(MAKE) -C $(APP_VOIP_EVA_DIR) PLATFORM=tc3182 DSP=mtk clean
ifneq ($(strip $(TCSUPPORT_ECN_SIP))_$(strip $(TCSUPPORT_ECN_MEGACO)),_)
ifneq ($(strip $(TCSUPPORT_ECN_SIP)),)
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/sipclient
	rm -rf $(FILESYSTEM_DIR)/usr/etc/voip_sys.cfg
endif
ifneq ($(strip $(TCSUPPORT_ECN_MEGACO)),)
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/mgapp
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/tcVoIPApiServer
endif
else
ifneq ($(strip $(TCSUPPORT_VOIP_IMSSIP)),)
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/vpMsgSvr
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/sipapp
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/vpsip
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/vpdrc
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/vpcfg
endif
ifneq ($(strip $(VP_MEGACO)),)
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/voip
endif
endif
	echo "Uninstalling CountrySetting..."
	rm -rf $(FILESYSTEM_DIR)/userfs/CountrySetting
else
voip_app:
	echo "Build mtk"
#	$(MAKE) -C $(APP_VOIP_EVA_DIR) PLATFORM=tc3182 DSP=mtk
	-cp -rf $(APP_VOIP_EVA_DIR)/bin/*.so  $(FILESYSTEM_DIR)/lib
	-cp -rf $(APP_MTKSIP_DIR)/install/lib/*.so  $(FILESYSTEM_DIR)/lib
	cp $(APP_VOIP_BIN_DIR)/sipclient  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_VOIP_BIN_DIR)/voip_sys.cfg  $(FILESYSTEM_DIR)/usr/etc/
	-cp -rf $(APP_VOIP_BIN_DIR)/mgapp  $(FILESYSTEM_DIR)/userfs/bin/
	-cp -rf $(APP_VOIP_BIN_DIR)/tcVoIPApiServer  $(FILESYSTEM_DIR)/userfs/bin/

	echo "Installing CountrySetting..."
	cp -rf $(APP_PRIVATE_DIR)/voip/CountrySetting $(FILESYSTEM_DIR)/userfs/
	-cp -rf $(APP_VOIP_EVA_DIR)/evcom/evcom  $(FILESYSTEM_DIR)/userfs/bin/
	-cp -rf $(APP_VOIP_EVA_DIR)/loader/voip_loader $(FILESYSTEM_DIR)/userfs/bin/
voip_app_clean:
#	$(MAKE) -C $(APP_VOIP_EVA_DIR) PLATFORM=tc3182 DSP=mtk clean
endif
endif
else
voip_app:	
voip_app_clean:
endif

#Build rp-pppoe-3.10
pppoe_svr:
pppoe_svr_clean:
pppoe-relay:
	echo "Build pppoe-relay"
	$(MAKE) -C $(APP_PPPOERELAY_DIR)
	if test -e $(APP_PPPOERELAY_DIR)/pppoe-relay; \
	then echo "Compile pppoe-relay success"; \
	else echo "Compile pppoe-relay error!"; exit 1; \
	fi
	cp $(APP_PPPOERELAY_DIR)/pppoe-relay  $(FILESYSTEM_DIR)/userfs/bin/
	
pppoe-relay_clean:
	echo "Clean pppoe-relay"
	$(MAKE) -C $(APP_PPPOERELAY_DIR) clean
	
ifneq ($(strip $(TCSUPPORT_IPV6)),)
#Build flex for radvd
flex:
	echo "Build flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
	$(MAKE) -C $(APP_FLEX_DIR)
	if test -e $(APP_FLEX_DIR)/libfl.a; \
	then echo "Compile flex success"; \
	else echo "Compile flex error!"; exit 1; \
	fi
	cp $(APP_FLEX_DIR)/libfl.a  $(PUBLIC_LIB_DIR)
	cp $(APP_FLEX_DIR)/libfl.a  $(LIB_DIR)
	
flex_clean:
	echo "Clean flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
	$(MAKE) -C $(APP_FLEX_DIR) clean

#Build radvd for IPv6
radvd:  flex
	echo "Build radvd"
	$(MAKE) -C $(APP_RADVD_DIR)
	if test -e $(APP_RADVD_DIR)/radvd; \
	then echo "Compile radvd success"; \
	else echo "Compile radvd error!"; exit 1; \
	fi
	$(STRIP) $(APP_RADVD_DIR)/radvd
	cp $(APP_RADVD_DIR)/radvd  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RADVD_DIR)/radvd.conf  $(FILESYSTEM_DIR)/usr/etc/
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
endif

radvd_clean: flex_clean
	echo "Clean radvd"
	$(MAKE) -C $(APP_RADVD_DIR) clean

#Build dhcpv6 for IPv6
dhcpv6:  flex
	echo "Build dhcpv6"
	$(MAKE) -C $(APP_DHCPV6_DIR)
	if test -e $(APP_DHCPV6_DIR)/dhcp6c; \
	then echo "Compile dhcpv6 client success"; \
	else echo "Compile dhcpv6 client error!"; exit 1; \
	fi
	if test -e $(APP_DHCPV6_DIR)/dhcp6s; \
	then echo "Compile dhcpv6 server success"; \
	else echo "Compile dhcpv6 server error!"; exit 1; \
	fi
	$(STRIP) $(APP_DHCPV6_DIR)/dhcp6c
	$(STRIP) $(APP_DHCPV6_DIR)/dhcp6s
	cp $(APP_DHCPV6_DIR)/dhcp6c  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_DHCPV6_DIR)/dhcp6s  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_DHCPV6_DIR)/dhcp6c.conf  $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_DHCPV6_DIR)/dhcp6s.conf  $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_DHCPV6_DIR)/dhcp6c_script  $(FILESYSTEM_DIR)/usr/script/
	
dhcpv6_clean: flex_clean
	echo "Clean dhcpv6"
	$(MAKE) -C $(APP_DHCPV6_DIR) clean

#Build iproute
iproute:
#	echo "Build iproute"
#	$(MAKE) -C $(APP_IPROUTE_DIR)
#	if test -e $(APP_IPROUTE_DIR)/ip/ip; \
#	then echo "Compile ip success"; \
#	else echo "Compile ip error!"; exit 1; \
#	fi
#	cp $(APP_IPROUTE_DIR)/ip/ip  $(FILESYSTEM_DIR)/userfs/bin/
#	
iproute_clean:
#	echo "Clean iproute"
#	$(MAKE) -C $(APP_IPROUTE_DIR) clean
#Build MLD proxy application
ifneq ($(strip $(TCSUPPORT_MLD_PROXY)),)
ecmh:
	@echo "Build MLD proxy"
	$(MAKE) -C $(APP_MLDPROXY_DIR)
	@if test -e $(APP_MLDPROXY_DIR)/src/ecmh; \
	then echo "Compile MLD proxy success"; \
	else echo "Compile MLD proxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_MLDPROXY_DIR)/src/ecmh
	cp $(APP_MLDPROXY_DIR)/src/ecmh  $(FILESYSTEM_DIR)/userfs/bin/

ecmh_clean:
	$(MAKE) -C $(APP_MLDPROXY_DIR) clean
else
ecmh:
ecmh_clean:
endif

else
radvd:
radvd_clean:
dhcpv6:
dhcpv6_clean:
iproute:
iproute_clean:
ecmh:
ecmh_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
ntfs:
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux --disable-library CFLAGS="-g -O2 -Wall -mips1"
else
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux-gnu --disable-library CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_NTFS_DIR)
	$(STRIP) $(APP_NTFS_DIR)/src/ntfs-3g
	cp $(APP_NTFS_DIR)/src/ntfs-3g $(FILESYSTEM_DIR)/userfs/bin/
ntfs_clean:
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux --disable-library CFLAGS="-g -O2 -Wall -mips1"
else
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux-gnu --disable-library CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_NTFS_DIR) clean  
else
ntfs:
ntfs_clean:
endif	


#AutoMount
ifneq ($(strip $(TCSUPPORT_USB_AUTOMOUNT)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
automount:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/usb_auto_mount $(FILESYSTEM_DIR)/userfs/bin/
automount_clean:
else
automount:
	$(MAKE) -C $(APP_AUTOMOUNT_DIR)
	$(STRIP) $(APP_AUTOMOUNT_DIR)/usb_auto_mount
	cp $(APP_AUTOMOUNT_DIR)/usb_auto_mount $(FILESYSTEM_DIR)/userfs/bin/
automount_clean:
	$(MAKE) -C $(APP_AUTOMOUNT_DIR) clean
endif

else
automount:
automount_clean:
endif


#UsbMonitor
ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
usbmonitor:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/usb_monitor $(FILESYSTEM_DIR)/userfs/bin/
usbmonitor_clean:
else
usbmonitor:
	$(MAKE) -C $(USB_MONITOR_DIR)
	$(STRIP) $(USB_MONITOR_DIR)/usb_monitor
	cp $(USB_MONITOR_DIR)/usb_monitor $(FILESYSTEM_DIR)/userfs/bin/
usbmonitor_clean:
	$(MAKE) -C $(USB_MONITOR_DIR) clean
endif
else
usbmonitor:
usbmonitor_clean:
endif





#Epon Dummy Detect
ifneq ($(strip $(TCSUPPORT_EPON_DUMMY)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
epon_dummy_detect:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/epon_dummy_detect $(FILESYSTEM_DIR)/userfs/bin/
epon_dummy_detect_clean:
else
epon_dummy_detect:
	$(MAKE) -C $(APP_EPON_DUMMY_DETECT_DIR)
	$(STRIP) $(APP_EPON_DUMMY_DETECT_DIR)/epon_dummy_detect
	cp $(APP_EPON_DUMMY_DETECT_DIR)/epon_dummy_detect $(FILESYSTEM_DIR)/userfs/bin/
epon_dummy_detect_clean:
	$(MAKE) -C $(APP_EPON_DUMMY_DETECT_DIR) clean
endif

else
epon_dummy_detect:
epon_dummy_detect_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
usb_3g_dongle:
#	the same deamon with pppd
#	$(MAKE) -C $(APP_USB_3G_PPP_DIR)
	$(STRIP) --strip-unneeded $(APP_USB_3G_PPP_DIR)/chat/chat
#	$(STRIP) --strip-unneeded $(APP_USB_3G_PPP_DIR)/pppd/pppd
	cp $(APP_USB_3G_PPP_DIR)/chat/chat $(FILESYSTEM_DIR)/userfs/bin/
#	cp $(APP_USB_3G_PPP_DIR)/pppd/pppd $(FILESYSTEM_DIR)/userfs/bin/pppd_3g
	rm -rf $(FILESYSTEM_DIR)/usr/etc/ppp/peers/
	mkdir $(FILESYSTEM_DIR)/usr/etc/ppp/peers
	cp $(APP_USB_3G_PPP_DIR)/wcdma $(FILESYSTEM_DIR)/usr/etc/ppp/peers/
	cp $(APP_USB_3G_PPP_DIR)/ppp_connect $(FILESYSTEM_DIR)/usr/etc/ppp/peers/

#ifneq ($(strip $(TCSUPPORT_USB_MODESWITCH)),)
libusb:
	echo "Building usb library"
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_PUBLIC_DIR)/libusb-1.0.8 && autoreconf -i && ./configure --build=i686-linux --host=mips-linux --prefix=$(APP_PUBLIC_DIR)/libusb-1.0.8/install
else
	cd $(APP_PUBLIC_DIR)/libusb-1.0.8 && ./configure --build=i686-linux --host=mips-linux --prefix=$(APP_PUBLIC_DIR)/libusb-1.0.8/install
endif	
	$(MAKE) -C $(APP_PUBLIC_DIR)/libusb-1.0.8 install
libusb_clean:
	if test -e $(APP_PUBLIC_DIR)/libusb-1.0.8/Makefile; \
	then $(MAKE) -C $(APP_PUBLIC_DIR)/libusb-1.0.8 clean; \
	fi

export PKG_CONFIG_PATH=$(APP_PUBLIC_DIR)/libusb-1.0.8/install/lib/pkgconfig
libcompat:
	echo "Building usb compat"
	cd $(APP_PUBLIC_DIR)/libusb-compat-0.1.3 && ./configure --build=i686-linux --host=mips-linux --prefix=$(APP_PUBLIC_DIR)/libusb-compat-0.1.3/install
	$(MAKE) -C $(APP_PUBLIC_DIR)/libusb-compat-0.1.3 install
libcompat_clean:
	if test -e $(APP_PUBLIC_DIR)/libusb-compat-0.1.3/Makefile; \
	then $(MAKE) -C $(APP_PUBLIC_DIR)/libusb-compat-0.1.3 clean; \
	fi

usb_modeswitch: libusb libcompat
	echo "Building usb_modeswicth"
	cp $(APP_PUBLIC_DIR)/libusb-1.0.8/install/lib/libusb-1.0.so* $(APP_PUBLIC_DIR)/lib/
	cp  $(APP_PUBLIC_DIR)/libusb-compat-0.1.3/install/lib/libusb-0.1.so.4*  $(APP_PUBLIC_DIR)/lib/
	cp  $(APP_PUBLIC_DIR)/libusb-compat-0.1.3/install/lib/libusb.so  $(APP_PUBLIC_DIR)/lib/
	$(MAKE) -C $(APP_PUBLIC_DIR)/usb-modeswitch-1.2.3 install
	mv $(APP_PUBLIC_DIR)/libusb-1.0.8/install/lib/libusb-1.0.so* $(FILESYSTEM_DIR)/lib/
	mv $(APP_PUBLIC_DIR)/libusb-compat-0.1.3/install/lib/libusb-0.1.so.4*  $(FILESYSTEM_DIR)/lib/
	mv $(APP_PUBLIC_DIR)/libusb-compat-0.1.3/install/lib/libusb.so  $(FILESYSTEM_DIR)/lib/

	cp $(APP_USB_3G_PPP_DIR)/dongle_dial_on.sh $(FILESYSTEM_DIR)/usr/script/  
	cp $(APP_USB_3G_PPP_DIR)/dongle_dial_off.sh $(FILESYSTEM_DIR)/usr/script/  
	cp $(APP_USB_3G_PPP_DIR)/ppp_on_dialer.sh $(FILESYSTEM_DIR)/usr/etc/ppp/peers/ 


usb_modeswitch_clean: libusb_clean libcompat_clean
	$(MAKE) -C $(APP_PUBLIC_DIR)/usb-modeswitch-1.2.3 uninstall
	$(MAKE) -C $(APP_PUBLIC_DIR)/usb-modeswitch-1.2.3 clean
	rm -rf $(FILESYSTEM_DIR)/lib/libusb-1.0.so*
	rm -rf $(FILESYSTEM_DIR)/lib/libusb-0.1.so.4*
	rm -rf $(FILESYSTEM_DIR)/lib/libusb.so

usb_switch_data:
	#$(MAKE) -C $(APP_PUBLIC_DIR)/usb-modeswitch-data-20120120 install
	$(MAKE) -C $(APP_PUBLIC_DIR)/usb-modeswitch-data-20120531 install

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
auto_mount_dongle:
	echo "TC_BUILD_RELEASECODE: auto_mount_dongle!"	
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/auto_mount_dongle $(FILESYSTEM_DIR)/userfs/bin/
auto_mount_dongle_clean:
	echo "TC_BUILD_RELEASECODE: auto_mount_dongle_clean!"
	rm -f $(FILESYSTEM_DIR)/userfs/bin/auto_mount_dongle

else

auto_mount_dongle:
	echo "compile auto_mount_dongle"
	$(MAKE) -C $(APP_PRIVATE_DIR)/auto_mount_dongle
	cp $(APP_PRIVATE_DIR)/auto_mount_dongle/auto_mount_dongle $(FILESYSTEM_DIR)/userfs/bin/
auto_mount_dongle_clean:
	echo "clean auto_mount_dongle"
	$(MAKE) -C $(APP_PRIVATE_DIR)/auto_mount_dongle clean

endif

usb_3g_dongle_clean:
	$(MAKE) -C $(APP_USB_3G_PPP_DIR) clean

else
usb_3g_dongle:
usb_3g_dongle_clean:
usb_modeswitch:
usb_modeswitch_clean:
auto_mount_dongle:
auto_mount_dongle_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)
usb_printer:
	$(MAKE) -C $(APP_USB_PRINTER_DIR)
	if test -e $(APP_USB_PRINTER_DIR)/p910nd; \
	then echo "Compile usb printer server daemon success"; \
	else echo "Compile usb printer server daemon error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_USB_PRINTER_DIR)/p910nd
	cp $(APP_USB_PRINTER_DIR)/p910nd $(FILESYSTEM_DIR)/userfs/bin/

usb_printer_clean:
	$(MAKE) -C $(APP_USB_PRINTER_DIR) clean
else
usb_printer:
usb_printer_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
usb_camera:
	$(MAKE) -C $(APP_MJPEG_LIB_DIR) 
	$(STRIP) --strip-unneeded $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62.0.0
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62.0.0 $(FILESYSTEM_DIR)/lib
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62 $(FILESYSTEM_DIR)/lib
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so $(FILESYSTEM_DIR)/lib
	$(MAKE) -C $(APP_USB_MJPEG_STREAM_SERVER_DIR)
	$(STRIP) --strip-unneeded $(APP_USB_MJPEG_STREAM_SERVER_DIR)/*.so
	$(STRIP) --strip-unneeded $(APP_USB_MJPEG_STREAM_SERVER_DIR)/mjpg_streamer
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/mjpg_streamer $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/output_http.so $(FILESYSTEM_DIR)/lib
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/input_uvc.so $(FILESYSTEM_DIR)/lib
usb_camera_clean:
	$(MAKE) -C $(APP_MJPEG_LIB_DIR) clean 
	$(MAKE) -C $(APP_USB_MJPEG_STREAM_SERVER_DIR) clean
else
usb_camera:
usb_camera_clean:
endif

ifneq ($(strip $(TCSUPPORT_VPN)),)
vpn_tools:
	echo "Build openssl"
	$(MAKE) -C $(APP_OPENSSL_VPN_DIR)
	if test -d $(APP_OPENSSL_VPN_DIR)/lib; \
	then rm -rf $(APP_OPENSSL_VPN_DIR)/lib; \
	fi
	cd $(APP_OPENSSL_VPN_DIR) && mkdir lib && cp libcrypto.a libssl.a lib
	echo "Build flex"
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
else
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float"
endif	
	$(MAKE) -C $(APP_FLEX_DIR) clean
	$(MAKE) -C $(APP_FLEX_DIR)
	echo "Build ipsec-tools"
	rm -f $(APP_IPSEC_TOOLS)/src/include-glibc/linux
	touch -m $(APP_IPSEC_TOOLS)/*
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-unknown-linux-uclibc --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a --disable-dependency-tracking
else
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float" --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a --disable-dependency-tracking
endif
	$(MAKE) -C $(APP_IPSEC_TOOLS)
	if test -d $(FILESYSTEM_DIR)/usr/ipsec_tools; \
	then rm -rf $(FILESYSTEM_DIR)/usr/ipsec_tools; \
	fi
	mkdir $(FILESYSTEM_DIR)/usr/ipsec_tools
	mkdir $(FILESYSTEM_DIR)/usr/ipsec_tools/sbin
	$(STRIP) --strip-unneeded $(APP_IPSEC_TOOLS)/src/racoon/racoon
	$(STRIP) --strip-unneeded $(APP_IPSEC_TOOLS)/src/setkey/setkey
	cp $(APP_IPSEC_TOOLS)/src/racoon/racoon $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_IPSEC_TOOLS)/src/setkey/setkey $(FILESYSTEM_DIR)/usr/bin

vpn_tools_clean:
	echo "Clean ipsec-tools"
	rm -f $(APP_IPSEC_TOOLS)/src/include-glibc/linux
	touch -m $(APP_IPSEC_TOOLS)/*
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-unknown-linux-uclibc --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a --disable-dependency-tracking
else
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float" --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a --disable-dependency-tracking
endif		
	$(MAKE) -C $(APP_IPSEC_TOOLS) clean
	rm -rf $(FILESYSTEM_DIR)/usr/ipsec_tools
	echo "Clean flex"
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
else
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float"
endif	
	$(MAKE) -C $(APP_FLEX_DIR) clean
	echo "Clean openssl"
	touch $(APP_OPENSSL_VPN_DIR)/Makefile
	$(MAKE) -C $(APP_OPENSSL_VPN_DIR) clean
	rm -rf $(APP_OPENSSL_VPN_DIR)/lib

else
vpn_tools:
vpn_tools_clean:
endif


ifneq ($(strip $(TCSUPPORT_EIP93_VERIFY)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
eip93_apps:
	$(MAKE) -C $(APP_EIP93_APPS)/SLAD_TestTool/build clean
	$(MAKE) -C $(APP_EIP93_APPS)/SLAD_TestTool/build KERNEL_DIR=$(KERNEL_DIR) ARCH=mips
	cd $(APP_EIP93_APPS)/SLAD_TestTool/scripts && export ARCH=mips && chmod 777 ./* && ./archive_93.sh && cp $(APP_EIP93_APPS)/builds_93_mips.tar.gz $(FILESYSTEM_DIR)/userfs/ && rm -f $(APP_EIP93_APPS)/builds_93_mips.tar.gz  && cd $(FILESYSTEM_DIR)/userfs && tar zxvf builds_93_mips.tar.gz  && rm -f builds_93_mips.tar.gz
	cd $(APP_EIP93_APPS)/Regress_93 && export KERNEL_DIR=$(KERNEL_DIR) ARCH=mips && chmod 777 ./*.sh && ./build_93.sh ALL eip93ies && cp $(APP_EIP93_APPS)/Regress_93/regress93_mips.tar.gz $(FILESYSTEM_DIR)/userfs/ && cd $(FILESYSTEM_DIR)/userfs && mkdir Regression && mv regress93_mips.tar.gz Regression && cd Regression && tar zxvf regress93_mips.tar.gz && rm -f regress93_mips.tar.gz
eip93_apps_clean:
	$(MAKE) -C $(APP_EIP93_APPS)/SLAD_TestTool/build clean
	rm -rf $(FILESYSTEM_DIR)/userfs/SLAD_TestTool
	rm -rf $(FILESYSTEM_DIR)/userfs/Regression
	cd $(APP_EIP93_APPS)/Regress_93 && rm -rf Builds Logs regress93_mips.tar.gz
endif

else
eip93_apps:
eip93_apps_clean:
endif


#Build ssh
ifneq ($(strip $(TCSUPPORT_SSH)),)
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#ssh:
#	cp $(APP_SSH_DIR)/dropbear $(FILESYSTEM_DIR)/userfs/bin
#ssh_clean:
#	echo "TC_BUILD_RELEASECODE: Build ssh, do nothing!"
#else
ssh:
	echo "Build ssh"
#	cd $(APP_SSH_DIR) && ./configure --host=mips-linux --disable-zlib
	cd $(APP_SSH_DIR)
	$(MAKE) -C $(APP_SSH_DIR)
	if test -e $(APP_SSH_DIR)/dropbear; \
	then echo "Compile SSH success"; \
	else echo "Compile SSH error!"; exit 1; \
	fi
	cp $(APP_SSH_DIR)/dropbear $(FILESYSTEM_DIR)/userfs/bin/
ssh_clean:
	echo "Clean ssh"
	$(MAKE) -C $(APP_SSH_DIR) clean
#endif
else
ssh:
ssh_clean:
endif


#Build ethcmd
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
ethcmd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ethcmd $(FILESYSTEM_DIR)/userfs/bin/ethphxcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ethcmd_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build ethcmd, do nothing!"
else
ethcmd:
	echo "Build ethcmd"
	$(MAKE) -C $(APP_ETHCMD_DIR)
	if test -e $(APP_ETHCMD_DIR)/ethcmd; \
	then echo "Compile ethcmd success"; \
	else echo "Compile ethcmd error!"; exit 1; \
	fi
	cp $(APP_ETHCMD_DIR)/ethcmd  $(FILESYSTEM_DIR)/userfs/bin/ethphxcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif
ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_MT7530_SWITCH_API)),)
	$(MAKE) -C $(APP_ETHCMD_DIR) install
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so $(FILESYSTEM_DIR)/lib/
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so.* $(FILESYSTEM_DIR)/lib/
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so $(LIB_DIR)/
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so.* $(LIB_DIR)/
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so $(PUBLIC_LIB_DIR)/
#	-cp $(APP_ETHCMD_DIR)/libmtkswitch.so.* $(PUBLIC_LIB_DIR)/ 
endif	
	
ethcmd_clean:
	echo "Clean ethcmd"
	$(MAKE) -C $(APP_ETHCMD_DIR) clean
ifneq ($(strip $(TCSUPPORT_MT7530_SWITCH_API)),)
	$(MAKE) -C $(APP_ETHCMD_DIR) lib_clean
endif	

endif
	
#Build eponcmd
ifneq ($(strip $(TCSUPPORT_EPONCMD)),)
eponcmd:
	echo "Build eponcmd"
	$(MAKE) -C $(APP_EPONCMD_DIR)
	if test -e $(APP_EPONCMD_DIR)/eponcmd; \
	then echo "Compile eponcmd success"; \
	else echo "Compile eponcmd error!"; exit 1; \
	fi
	cp $(APP_EPONCMD_DIR)/eponcmd  $(FILESYSTEM_DIR)/userfs/bin/eponcmd
eponcmd_clean:
	echo "Clean eponcmd"
	$(MAKE) -C $(APP_EPONCMD_DIR) clean
else
eponcmd:
eponcmd_clean:
endif

#Build pwctlcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
pwctlcmd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/pwctlcmd $(FILESYSTEM_DIR)/userfs/bin/
pwctlcmd_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build pwctlcmd, do nothing!"
else
pwctlcmd:
	echo "Build pwctlcmd"
	$(MAKE) -C $(APP_PWCTLCMD_DIR)
	if test -e $(APP_PWCTLCMD_DIR)/pwctlcmd; \
	then echo "Compile pwctlcmd success"; \
	else echo "Compile pwctlcmd error!"; exit 1; \
	fi
	cp $(APP_PWCTLCMD_DIR)/pwctlcmd  $(FILESYSTEM_DIR)/userfs/bin/
	
pwctlcmd_clean:
	echo "Clean pwctlcmd"
	$(MAKE) -C $(APP_PWCTLCMD_DIR) clean
endif
else
pwctlcmd:
pwctlcmd_clean:
endif
	
#Build 8021X
ifneq ($(strip $(TCSUPPORT_WLAN_8021X)),)
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#8021X:
	#cp $(APP_BINARY_DIR)/rtdot1xd $(FILESYSTEM_DIR)/userfs/bin/
#8021X_clean:
	#echo "TC_BUILD_RELEASECODE: Build 8021X, do nothing!"
#else
8021X:
	echo "Build 8021X"
	$(MAKE) -C $(APP_8021X_DIR)
	if test -e $(APP_8021X_DIR)/rtdot1xd; \
	then echo "Compile 8021X success"; \
	else echo "Compile 8021X error!"; exit 1; \
	fi
	cp $(APP_8021X_DIR)/rtdot1xd  $(FILESYSTEM_DIR)/userfs/bin/
	
8021X_clean:
	echo "Clean 8021X"
	$(MAKE) -C $(APP_8021X_DIR) clean
#endif
else
8021X:
8021X_clean:
endif

#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
ated:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
ated_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build ated , do nothing!"	
else	
ated:
	echo "Build ated"
#	ATED_DIR=$(APP_PRIVATE_DIR)/ATED
	$(MAKE) -C $(APP_PRIVATE_DIR)/ATED
	if test -e $(APP_PRIVATE_DIR)/ATED/ated;  \
	then echo "Compile ATED success";   \
	else echo "Compile ATED error!"; exit 1;  \
	fi
	cp $(APP_PRIVATE_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
ated_clean:
	echo "Clean ated"
	$(MAKE) -C $(APP_PRIVATE_DIR)/ATED clean
endif
else
ated:
ated_clean:
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
wscd:
		cp $(APP_BINARY_DIR)/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin/
wscd_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build wscd, do nothing!"
else
wscd:
	echo "Build wscd"
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile	
	touch -m $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1/*
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1
	$(MAKE) -C $(APP_PRIVATE_DIR)/WSC_UPNP
	if test -e $(APP_PRIVATE_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile wscd success";   \
	else echo "Compile wscd error!"; exit 1;  \
	fi
	cp $(APP_PRIVATE_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml		
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(APP_PRIVATE_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(APP_PRIVATE_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
wscd_clean:
	echo "Clean wscd"
	rm -f $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile	
	touch -m $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1/*
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_PRIVATE_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(APP_PRIVATE_DIR)/WSC_UPNP clean
endif	
else
wscd:
wscd_clean:
endif

#Build dnsmasq
dnsmasq:
	echo "Build dnsmasq"
	$(MAKE) -C $(APP_DNSMASQ_DIR)
	if test -e $(APP_DNSMASQ_DIR)/src/dnsmasq; \
	then echo "Compile dnsmasq success"; \
	else echo "Compile dnsmasq error!"; exit 1; \
	fi
	cp $(APP_DNSMASQ_DIR)/src/dnsmasq  $(FILESYSTEM_DIR)/userfs/bin/
	
dnsmasq_clean:
	echo "Clean dnsmasq"
	$(MAKE) -C $(APP_DNSMASQ_DIR) clean


#Build vconfig
vconfig:
	echo "Build vconfig"
	$(MAKE) -C $(APP_VCONFIG_DIR)
	if test -e $(APP_VCONFIG_DIR)/vconfig; \
	then echo "Compile vconfig success"; \
	else echo "Compile vconfig error!"; exit 1; \
	fi
	cp $(APP_VCONFIG_DIR)/vconfig  $(FILESYSTEM_DIR)/userfs/bin/
	
vconfig_clean:
	echo "Clean vconfig"
	$(MAKE) -C $(APP_VCONFIG_DIR) clean
	
ifneq ($(strip $(TCSUPPORT_AUTO_IP)),)
#Build avahi-autoipd
autoip:
	echo "Build libdaemon"
	cd $(APP_LIBDAEMON_DIR) && echo "ac_cv_func_setpgrp_void=yes" > config.cache
	cd $(APP_LIBDAEMON_DIR) && ./configure --host=mips-linux --config-cache --prefix=$(APP_PUBLIC_DIR)
	$(MAKE) -C $(APP_LIBDAEMON_DIR)
	$(MAKE) -C $(APP_LIBDAEMON_DIR) install
	$(STRIP) $(PUBLIC_LIB_DIR)/libdaemon.so.0.5.0
	#cp $(PUBLIC_LIB_DIR)/libdaemon.so* $(FILESYSTEM_DIR)/lib/

	cd $(APP_AUTOIP_DIR) && ./configure --host=mips-linux --with-distro=none --enable-qt4=no --enable-gtk=no --enable-gtk3=no --enable-dbus=no --enable-dbm=no --enable-gdbm=no --enable-libdaemon=yes --enable-python=no --with-xml=none PKG_CONFIG_PATH=$(PUBLIC_LIB_DIR)/pkgconfig/
	$(MAKE) -C $(APP_AUTOIP_DIR)/avahi-autoipd
	$(STRIP) $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd
	cp $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd $(FILESYSTEM_DIR)/userfs/bin/
	mv $(PUBLIC_LIB_DIR)/libdaemon.so* $(FILESYSTEM_DIR)/lib/
	cp  $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd.action $(FILESYSTEM_DIR)/usr/script/
	cp  $(APP_AUTOIP_DIR)/avahi-autoipd/udhcpc_autoip.sh $(FILESYSTEM_DIR)/usr/script/
	
autoip_clean:
	if test -e $(APP_AUTOIP_DIR)/avahi-autoipd/Makefile; \
	then $(MAKE) -C $(APP_AUTOIP_DIR)/avahi-autoipd clean; \
	fi
	if test -e $(APP_LIBDAEMON_DIR)/Makefile; \
	then $(MAKE) -C $(APP_LIBDAEMON_DIR) clean; \
	fi

else
autoip:
autoip_clean:
endif

ifneq ($(strip $(TCSUPPORT_DMS)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
dms:
	rm -rf $(FILESYSTEM_DIR)/userfs/dlna
	cp -R $(APP_BINARY_DIR)/$(TCPLATFORM)/dlna $(FILESYSTEM_DIR)/userfs/dlna
dms_clean:
	echo "TC_BUILD_RELEASECODE: Build dms, do nothing!"
else
dms:
ifneq ($(strip $(TCSUPPORT_NEWTOOLCHAIN)),)
	cd $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ && autoreconf -i && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install/Thirdp
else
	cd $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install/Thirdp
endif
	$(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6
	$(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ install

	cd $(APP_DMS_DIR)/src && ./premake.sh
	cd $(APP_DMS_DIR)/src && ./set.sh
ifneq ($(strip $(DMS_CFLAGS)),)
	cd $(APP_DMS_DIR)/src && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install CFLAGS="$(DMS_CFLAGS)"
else
	cd $(APP_DMS_DIR)/src && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install
endif
	$(MAKE) -C $(APP_DMS_DIR)/src
	$(MAKE) -C $(APP_DMS_DIR)/src install

	$(MAKE) -C $(APP_DMS_DIR)/src/dms/UnitTest
	$(MAKE) -C $(APP_DMS_DIR)/src/dms/UnitTest install

	if test -d $(APP_DMS_DIR)/dlna_output; \
	then rm -rf $(APP_DMS_DIR)/dlna_output; \
	fi	
	mkdir $(APP_DMS_DIR)/dlna_output
	mkdir $(APP_DMS_DIR)/dlna_output/bin
	mkdir $(APP_DMS_DIR)/dlna_output/lib
	mkdir $(APP_DMS_DIR)/dlna_output/Thirdp
	mkdir $(APP_DMS_DIR)/dlna_output/Thirdp/lib

	$(STRIP) $(APP_DMS_DIR)/install/bin/dlna_dmsTcApp
	cp $(APP_DMS_DIR)/install/bin/dlna_dmsTcApp $(APP_DMS_DIR)/dlna_output/bin/
	cp $(APP_DMS_DIR)/install/share/*.* $(APP_DMS_DIR)/dlna_output/bin/
	$(STRIP) $(APP_DMS_DIR)/install/lib/libdlna_dms.so.0.0.0
	mv $(APP_DMS_DIR)/install/lib/libdlna_dms.so* $(APP_DMS_DIR)/dlna_output/lib/
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libixml.so.2.0.4
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libthreadutil.so.2.2.3
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libupnp.so.3.0.5

	mv $(APP_DMS_DIR)/install/Thirdp/lib/libixml.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mv $(APP_DMS_DIR)/install/Thirdp/lib/libthreadutil.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mv $(APP_DMS_DIR)/install/Thirdp/lib/libupnp.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mkdir $(APP_DMS_DIR)/dlna_output/media
	if test -d $(FILESYSTEM_DIR)/userfs/dlna; \
	then rm -rf $(FILESYSTEM_DIR)/userfs/dlna; \
	fi
	cp -R $(APP_DMS_DIR)/dlna_output $(FILESYSTEM_DIR)/userfs/dlna
	cp  $(APP_ETC_SCRIPT_DIR)/dms_start.sh $(FILESYSTEM_DIR)/usr/script/
	
dms_clean:
	if test -e $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/Makefile; \
	then $(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ clean; \
	fi
	if test -e $(APP_DMS_DIR)/src/Makefile; \
	then $(MAKE) -C $(APP_DMS_DIR)/src clean; \
	fi
	if test -d $(APP_DMS_DIR)/dlna_output; \
	then rm -rf $(APP_DMS_DIR)/dlna_output; \
	fi
	if test -d $(FILESYSTEM_DIR)/userfs/dlna; \
	then rm -rf $(FILESYSTEM_DIR)/userfs/dlna; \
	fi
	
endif
else
dms:
dms_clean:
endif

ifneq ($(strip $(TCSUPPORT_FON)),)
fon: getrandom fonsmcd coova fon_api
fon_clean: getrandom_clean fonsmcd_clean coova_clean  fon_api_clean
else
fon:
	echo "Not support fon"
fon_clean:
	echo "Not support fon"
endif

ifneq ($(strip $(TCSUPPORT_FON)),)
getrandom:
	echo "Build  GetRandom"
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/getrandom
	if test -e $(APP_FONSMCD_DIR)/src/getrandom; \
	then echo "Compile getrandom success"; \
	else echo "Compile getrandom error!"; exit 1; \
	fi
	cp  $(APP_FONSMCD_DIR)/src/getrandom/getrandom  $(FILESYSTEM_DIR)/usr/sbin/

getrandom_clean:
	echo "Clean cpu"
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/getrandom/ clean
	rm -f $(FILESYSTEM_DIR)/usr/sbin/getrandom

fonsmcd:
	echo "Build libdaemon"
	cd $(APP_LIBDAEMON_DIR) && echo "ac_cv_func_setpgrp_void=yes" > config.cache
	cd $(APP_LIBDAEMON_DIR) && ./configure --host=mips-linux --config-cache --localstatedir=/var --prefix=$(APP_PUBLIC_DIR) CFLAGS="-Os -Wall -mips1" 
	$(MAKE) -C $(APP_LIBDAEMON_DIR)
	$(MAKE) -C $(APP_LIBDAEMON_DIR) install
	$(STRIP) $(PUBLIC_LIB_DIR)/libdaemon.so.0.5.0
#	rm $(PUBLIC_LIB_DIR)/libdaemon.a
	if test -e $(APP_LIBDAEMON_DIR)/Makefile; \
	then \
	cp -f $(PUBLIC_LIB_DIR)/libdaemon.so* $(FILESYSTEM_DIR)/lib/; \
	fi

	echo "Build fonsmcd"
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/fonsmcd
	if test -e $(APP_FONSMCD_DIR)/src/fonsmcd/fonsmcd; \
	then \
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/fonsmcd/fonsmcd; \
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fonsmcd $(FILESYSTEM_DIR)/usr/sbin/; \
	fi
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_keyword $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_mac $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_regurl $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fonsmcd.conf $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/public_sm_rsa_key.pem $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_device $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_revision $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_version $(FILESYSTEM_DIR)/usr/etc/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon
	mkdir  $(FILESYSTEM_DIR)/usr/etc/fon
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_down.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_up.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_watch.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/hb_down.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/hb_up.sh $(FILESYSTEM_DIR)/usr/etc/fon/
#for C1 FON
ifneq ($(strip $(TCSUPPORT_C1_OBM)),)
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_device_C1 $(FILESYSTEM_DIR)/usr/etc/fon_device
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_revision_C1 $(FILESYSTEM_DIR)/usr/etc/fon_revision
	cp -rf $(APP_FONSMCD_DIR)/src/fonsmcd/fon_conf/fon_version_C1 $(FILESYSTEM_DIR)/usr/etc/fon_version
endif	##($(strip $(TCSUPPORT_C1_OBM)),)
else
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/$(TCPLATFORM)/fonsmcd $(FILESYSTEM_DIR)/usr/sbin/
	
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_keyword $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_mac $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_regurl $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fonsmcd.conf $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/public_sm_rsa_key.pem $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_device $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_revision $(FILESYSTEM_DIR)/usr/etc/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_version $(FILESYSTEM_DIR)/usr/etc/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon
	mkdir  $(FILESYSTEM_DIR)/usr/etc/fon
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_down.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_up.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_watch.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/hb_down.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/hb_up.sh $(FILESYSTEM_DIR)/usr/etc/fon/
	#for C1 FON
ifneq ($(strip $(TCSUPPORT_C1_OBM)),)
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_device_C1 $(FILESYSTEM_DIR)/usr/etc/fon_device
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_revision_C1 $(FILESYSTEM_DIR)/usr/etc/fon_revision
	cp -rf $(APP_FONSMCD_DIR)/libs/fonsmcd/fon_conf/fon_version_C1 $(FILESYSTEM_DIR)/usr/etc/fon_version
endif 	##($(strip $(TCSUPPORT_C1_OBM)),)
endif


fonsmcd_clean:
	echo "Clean fonsmcd"
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/fonsmcd/ clean
endif
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/fonsmcd
	echo "Clean libdaemon"
	if test -e $(APP_LIBDAEMON_DIR)/Makefile; \
	then $(MAKE) -C $(APP_LIBDAEMON_DIR) clean; \
	fi

	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_device
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_keyword
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_mac
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_revision
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_version
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon_regurl
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fonsmcd.conf
	rm -rf $(FILESYSTEM_DIR)/usr/etc/public_sm_rsa_key.pem
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon

coova:
	echo "Build coova"
	
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_FON_MODEL_B)),)
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/chilli $(FILESYSTEM_DIR)/usr/sbin/chilli_main
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/chilli_opt $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/chilli_query $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/chilli_radconfig $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/chilli_response $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_b/libchilli.so* $(FILESYSTEM_DIR)/lib
else
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/chilli $(FILESYSTEM_DIR)/usr/sbin/chilli_main
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/chilli_opt $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/chilli_query $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/chilli_radconfig $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/chilli_response $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/model_a/libchilli.so* $(FILESYSTEM_DIR)/lib
endif
	cp $(APP_FONSMCD_DIR)/libs/coova/$(TCPLATFORM)/libbstring.so* $(FILESYSTEM_DIR)/lib
	cp  $(APP_FONSMCD_DIR)/libs/coova/files_fon/localusers $(FILESYSTEM_DIR)/usr/etc/fon/
else
	cd $(APP_FONSMCD_DIR)/src/coova && ./bootstrap && chmod 777 configure
ifneq ($(strip $(TCSUPPORT_FON_MODEL_B)),)
	cd $(APP_FONSMCD_DIR)/src/coova && ./configure --host=mips-linux --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-ipwhitelist --enable-uamdomainfile --enable-redirdnsreq --enable-binstatusfile --disable-accounting-onoff CFLAGS="$(FON_CFLAGS)" LDFLAGS="-lrt $(TRUNK_DIR)/apps/private/lib/libtcapi.so"	
else
	cd $(APP_FONSMCD_DIR)/src/coova && ./configure --host=mips-linux --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-ipwhitelist --enable-uamdomainfile --enable-redirdnsreq --enable-binstatusfile --disable-accounting-onoff CFLAGS="-Os -Wall -mips1"
endif
	touch $(APP_FONSMCD_DIR)/src/coova/src/cmdline.h
	touch $(APP_FONSMCD_DIR)/src/coova/src/cmdline.c
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/coova
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_opt
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_query
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_radconfig
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_response
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/src/.libs/libchilli.so*
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/coova/bstring/.libs/libbstring.so*
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli $(FILESYSTEM_DIR)/usr/sbin/chilli_main
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_opt $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_query $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_radconfig $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/chilli_response $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/src/coova/src/.libs/libchilli.so* $(FILESYSTEM_DIR)/lib
	cp $(APP_FONSMCD_DIR)/src/coova/bstring/.libs/libbstring.so* $(FILESYSTEM_DIR)/lib
	cp  $(APP_FONSMCD_DIR)/src/coova/files_fon/localusers $(FILESYSTEM_DIR)/usr/etc/fon/
endif	

coova_clean:
	echo "Clean coova"
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	if test -e $(APP_FONSMCD_DIR)/src/coova/Makefile; \
	then $(MAKE) -C $(APP_FONSMCD_DIR)/src/coova clean; \
	fi 
endif
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/chilli_main
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/chilli_opt
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/chilli_response
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/chilli_query
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/chilli_radconfig
	rm -rf $(FILESYSTEM_DIR)/lib/libchilli.so*
	rm -rf $(FILESYSTEM_DIR)/lib/libbstring.so*
	rm -rf $(FILESYSTEM_DIR)/usr/etc/fon/localusers

fon_api:
	echo "Build fon_api"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_FON_MODEL_B)),)
	cp $(APP_FONSMCD_DIR)/libs/fon-api/$(TCPLATFORM)/model_b/fonctl $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/fon-api/$(TCPLATFORM)/model_b/fon-api.so $(FILESYSTEM_DIR)/lib/
else
	cp $(APP_FONSMCD_DIR)/libs/fon-api/$(TCPLATFORM)/model_a/fonctl $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/libs/fon-api/$(TCPLATFORM)/model_a/fon-api.so $(FILESYSTEM_DIR)/lib/
endif
else
	cd $(APP_FONSMCD_DIR)/src/fon-api && ./bootstrap && chmod 777 configure
ifneq ($(strip $(TCSUPPORT_FON_MODEL_B)),)
	cd $(APP_FONSMCD_DIR)/src/fon-api && ./configure --host=mips-linux CFLAGS="$(FON_CFLAGS)" LDFLAGS="-lrt $(TRUNK_DIR)/apps/private/lib/libtcapi.so" 
else
	cd $(APP_FONSMCD_DIR)/src/fon-api && ./configure --host=mips-linux CFLAGS="-Os -Wall -mips1"
endif
	$(MAKE) -C $(APP_FONSMCD_DIR)/src/fon-api
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/fon-api/.libs/fonctl
	$(STRIP) --strip-unneeded -R .comment $(APP_FONSMCD_DIR)/src/fon-api/.libs/fon-api.so
	cp $(APP_FONSMCD_DIR)/src/fon-api/.libs/fonctl $(FILESYSTEM_DIR)/usr/sbin/
	cp $(APP_FONSMCD_DIR)/src/fon-api/.libs/fon-api.so $(FILESYSTEM_DIR)/lib/
endif

fon_api_clean:
	echo "Clean fon_api"
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	if test -e $(APP_FONSMCD_DIR)/src/fon-api/Makefile; \
	then $(MAKE) -C $(APP_FONSMCD_DIR)/src/fon-api clean; \
	fi 
endif
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/fonctl
	rm -rf $(FILESYSTEM_DIR)/lib/fon-api.so
endif

ifneq ($(strip $(TCSUPPORT_FON_V2)),)
fonV2: pcre hotspotd
fonV2_clean: pcre_clean hotspotd_clean
else
fonV2:
	echo "Not support fonV2"
fonV2_clean:
	echo "Not support fonV2"
endif

ifneq ($(strip $(TCSUPPORT_FON_V2)),)
pcre:
	echo "Build pcre to support uamdomain"
	cd $(APP_PCRE_DIR)/ && ./configure --host=mips-linux --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-ipwhitelist --enable-uamdomainfile --enable-redirdnsreq --enable-binstatusfile --disable-accounting-onoff
	$(MAKE) -C $(APP_PCRE_DIR)
	$(STRIP) --strip-unneeded -R .comment $(APP_PCRE_DIR)/.libs/libpcre.so*
	cp $(APP_PCRE_DIR)/.libs/libpcre.so* $(FILESYSTEM_DIR)/lib/
pcre_clean:
	if test -e $(APP_PCRE_DIR)/Makefile; \
	then \
		$(MAKE) -C $(APP_PCRE_DIR) clean; \
	fi
	rm -rf $(FILESYSTEM_DIR)/lib/libpcre.so*

hotspotd:
	echo "Build hotspotd"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(STRIP) --strip-unneeded -R .comment $(APP_PUBLIC_DIR)/hotspot/$(TCPLATFORM)/hotspotd
	cp -rf $(APP_PUBLIC_DIR)/hotspot/$(TCPLATFORM)/hotspotd $(FILESYSTEM_DIR)/usr/sbin/
		
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_keyword $(FILESYSTEM_DIR)/usr/etc/.fon_keyword
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_mac $(FILESYSTEM_DIR)/usr/etc/.fon_mac
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_device $(FILESYSTEM_DIR)/usr/etc/.fon_device
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_revision $(FILESYSTEM_DIR)/usr/etc/.fon_revision
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_version $(FILESYSTEM_DIR)/usr/etc/.fon_version
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon
	mkdir  $(FILESYSTEM_DIR)/usr/etc/.fon
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_down.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/fon_up.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/hb_down.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/hb_up.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_PUBLIC_DIR)/hotspot/conf/radconf_store.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
else
	$(MAKE) -C $(APP_FON_HOTSPOT_DIR) MODULES="fonsmc fonapi radius radconf fonctl tunnel" LDFLAGS="-lrt $(TRUNK_DIR)/apps/private/lib/libtcapi.so -lrt $(TRUNK_DIR)/apps/public/pcre-8.32/.libs/libpcre.so" 
	if test -e $(APP_FON_HOTSPOT_DIR)/hotspotd; \
	then \
		$(STRIP) --strip-unneeded -R .comment $(APP_FON_HOTSPOT_DIR)/hotspotd; \
		cp -rf $(APP_FON_HOTSPOT_DIR)/hotspotd $(FILESYSTEM_DIR)/usr/sbin/; \
	fi

	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_keyword $(FILESYSTEM_DIR)/usr/etc/.fon_keyword
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_mac $(FILESYSTEM_DIR)/usr/etc/.fon_mac
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_device $(FILESYSTEM_DIR)/usr/etc/.fon_device
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_revision $(FILESYSTEM_DIR)/usr/etc/.fon_revision
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_version $(FILESYSTEM_DIR)/usr/etc/.fon_version
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon
	mkdir  $(FILESYSTEM_DIR)/usr/etc/.fon
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_down.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/fon_up.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/hb_down.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/hb_up.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
	cp -rf $(APP_FON_HOTSPOT_DIR)/conf/radconf_store.sh $(FILESYSTEM_DIR)/usr/etc/.fon/
endif

hotspotd_clean:
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/hotspotd
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_device
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_keyword
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_mac
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_revision
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_version
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon/
else
	$(MAKE) -C $(APP_FON_HOTSPOT_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/usr/sbin/hotspotd
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_device
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_keyword
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_mac
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_revision
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon_version
	rm -rf $(FILESYSTEM_DIR)/usr/etc/.fon/
endif
endif

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
cmd_ci:
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmd $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/adslcmd $(FILESYSTEM_DIR)/usr/bin/adslphxcmd

endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/algcmd $(FILESYSTEM_DIR)/usr/bin/
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/wlancmd $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/firewallcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
cmd_ci_clean:
	echo "TC_BUILD_RELEASECODE: Build cmdci, do nothing!"
else
cmd_ci:
ifeq ($(strip $(TCSUPPORT_CT)),)
	echo "Build cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR)
	if test -e $(APP_CMDCI_DIR)/atmcmd; \
	then echo "Compile atmcmd success"; \
	else echo "Compile atmcmd error!"; exit 1; \
	fi
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_CMDCI_DIR)/atmcmd  $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp $(APP_CMDCI_DIR)/adslcmd  $(FILESYSTEM_DIR)/usr/bin/adslphxcmd

ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp $(APP_CMDCI_DIR)/wlancmd $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/algcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/firewallcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
cmd_ci_clean:
ifeq ($(strip $(TCSUPPORT_CT)),)
	echo "TC_BUILD_RELEASECODE: Build atmcmd adslcmd wlancmd!"
	$(MAKE) -C $(APP_CMDCI_DIR) clean

endif
endif
else
cmd_ci:
	echo "Build cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR)
	if test -e $(APP_CMDCI_DIR)/atmcmd; \
	then echo "Compile atmcmd success"; \
	else echo "Compile atmcmd error!"; exit 1; \
	fi
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_CMDCI_DIR)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(APP_CMDCI_DIR)/atmcmd  $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp -f $(APP_CMDCI_DIR)/adslcmd  $(FILESYSTEM_DIR)/usr/bin/adslphxcmd
endif

ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp -f $(APP_CMDCI_DIR)/wlancmd  $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
	cp $(APP_CMDCI_DIR)/algcmd  $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_CMDCI_DIR)/firewallcmd  $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_CMDCI_DIR)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_CMDCI_DIR)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_CMDCI_DIR)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_CMDCI_DIR)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
	
cmd_ci_clean:
	echo "Clean cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR) clean

endif

ifneq ($(strip $(TCSUPPORT_RA_MENU)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ra_menu:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ra_menu $(FILESYSTEM_DIR)/userfs/bin/
ra_menu_clean:
	echo "TC_BUILD_RELEASECODE: Build ra_menu, do nothing!"
else
ra_menu:
	echo "ra_menu building"
	$(MAKE) -C $(APP_RA_MENU_DIR)
	if test -e $(APP_RA_MENU_DIR)/ra_menu; \
	then echo "Compile ra_menu success"; \
	else echo "Compile ra_menu error!"; exit 1; \
	fi
	cp $(APP_RA_MENU_DIR)/ra_menu  $(FILESYSTEM_DIR)/userfs/bin/
ra_menu_clean:
	echo "ra_menu clean"
	$(MAKE) -C $(APP_RA_MENU_DIR) clean
endif
else
ra_menu:
	echo "Not support ra_menu"
ra_menu_clean:
	echo "Not support ra_menu"
endif

ifneq ($(strip $(TCSUPPORT_NEW_SHELL)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
new_shell:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/new_shell $(FILESYSTEM_DIR)/userfs/bin/
new_shell_clean:
	echo "TC_BUILD_RELEASECODE: Build new_shell, do nothing!"
else
new_shell:
	echo "new_shell building"
	$(MAKE) -C $(APP_NEW_SHELL_DIR)
	if test -e $(APP_NEW_SHELL_DIR)/new_shell; \
	then echo "Compile new_shell success"; \
	else echo "Compile new_shell error!"; exit 1; \
	fi
	cp $(APP_NEW_SHELL_DIR)/new_shell  $(FILESYSTEM_DIR)/userfs/bin/
new_shell_clean:
	echo "new_shell clean"
	$(MAKE) -C $(APP_NEW_SHELL_DIR) clean
endif
else
new_shell:
	echo "Not support new_shell"
new_shell_clean:
	echo "Not support new_shell"
endif

ifneq ($(strip $(TCSUPPORT_SIPROXD)),)
#Build siproxd-0.8.0
siproxd:
	echo "Build libosip2-2.0.4"
	cd $(APP_LIBOSIP_DIR) && touch aclocal.m4
	chmod 777 $(APP_LIBOSIP_DIR)/configure
	cd $(APP_LIBOSIP_DIR) && ./configure --host=mips-linux --with-pic --prefix=$(APP_LIBOSIP_DIR)/installDir CFLAGS="$(CFG_CFLAGS)"
	$(MAKE) -C $(APP_LIBOSIP_DIR)
	$(MAKE) -C $(APP_LIBOSIP_DIR) install
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.2.0.4; \
	then echo "Compile libosip success"; \
	else echo "Compile libosip error!"; exit 1; \
	fi
	
	echo "Build siproxd-0.5.12"
	cd $(APP_SIPROXD_DIR) && touch configure.in
	chmod 777 $(APP_SIPROXD_DIR)/configure
	cd $(APP_SIPROXD_DIR) && ./configure --host=mips-linux --prefix=$(APP_SIPROXD_DIR)/installDir --with-libosip-prefix=$(APP_LIBOSIP_DIR)/installDir CFLAGS="$(CFG_CFLAGS)"
	$(MAKE) -C $(APP_SIPROXD_DIR)
	$(MAKE) -C $(APP_SIPROXD_DIR) install
	if test -e $(APP_SIPROXD_DIR)/installDir/sbin/siproxd; \
	then echo "Compile siporxd success"; \
	else echo "Compile siproxd error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_SIPROXD_DIR)/installDir/sbin/siproxd
	cp $(APP_SIPROXD_DIR)/installDir/sbin/siproxd  $(FILESYSTEM_DIR)/userfs/bin/
	
siproxd_clean:
	echo "Clean siproxd-0.5.12"
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.a; \
	then cd $(APP_SIPROXD_DIR) && touch configure.in; \
	chmod 777 $(APP_SIPROXD_DIR)/configure; \
	cd $(APP_SIPROXD_DIR) && ./configure --host=mips-linux --prefix=$(APP_SIPROXD_DIR)/installDir --with-libosip-prefix=$(APP_LIBOSIP_DIR)/installDir; \
	else cd $(APP_SIPROXD_DIR); \
	fi
	if test -e $(APP_SIPROXD_DIR)/Makefile; \
	then $(MAKE) -C $(APP_SIPROXD_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
	
	echo "Clean libosip2-2.0.4"
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.a; \
	then cd $(APP_LIBOSIP_DIR) && touch aclocal.m4; \
	chmod 777 $(APP_LIBOSIP_DIR)/configure; \
	cd $(APP_LIBOSIP_DIR) && ./configure --host=mips-linux --with-pic --prefix=$(APP_LIBOSIP_DIR)/installDir; \
	else cd $(APP_LIBOSIP_DIR); \
	fi
	if test -e $(APP_LIBOSIP_DIR)/Makefile; \
	then $(MAKE) -C $(APP_LIBOSIP_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
else
siproxd:
	echo "Not support siproxd"
siproxd_clean:
	echo "Not support siproxd"
endif

#USB Backup and  Restore
ifneq ($(strip $(TCSUPPORT_CT_USB_BACKUPRESTORE)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
backuprestore:
	echo "Build backuprestore"
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/backuprestorecmd $(FILESYSTEM_DIR)/usr/bin/
backuprestore_clean:
	echo "TC_BUILD_RELEASECODE: Build backuprestore, do nothing!"
else
backuprestore:
	echo "Build backuprestore"
	$(MAKE) -C $(APP_BACKUPRESTORE_DIR)
	cp $(APP_BACKUPRESTORE_DIR)/backuprestorecmd $(FILESYSTEM_DIR)/usr/bin/
	
backuprestore_clean:
	echo "Clean backuprestore"
	$(MAKE) -C $(APP_BACKUPRESTORE_DIR) clean
endif
else
backuprestore:
backuprestore_clean:
endif

ifneq ($(strip $(TCSUPPORT_RESTORE_LINOS_INFO)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
restore_linos_info:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/restore_linos_info $(FILESYSTEM_DIR)/userfs/bin/
restore_linos_info_clean:
else
restore_linos_info:
	echo "Build restore linos info!"
	$(MAKE) -C $(APP_RESTORE_LINOS_INFO_DIR)
	if test -e $(APP_RESTORE_LINOS_INFO_DIR)/restore_linos_info; \
	then echo "Compile restore_linos_info success"; \
	else echo "Compile restore_linos_info error!"; exit 1; \
	fi
	cp  $(APP_RESTORE_LINOS_INFO_DIR)/restore_linos_info  $(FILESYSTEM_DIR)/userfs/bin/

restore_linos_info_clean:
	echo "Clean restore_linos_info!"
	$(MAKE) -C $(APP_RESTORE_LINOS_INFO_DIR) clean
endif
else
restore_linos_info:
restore_linos_info_clean:
endif

ifneq ($(strip $(TCSUPPORT_SAMBA)),)
#Build samba-3.0.2
samba:
	echo "Build Samba-3.0.2"
	cd $(APP_SAMBA_DIR)/source
	$(MAKE) -C $(APP_SAMBA_DIR)/source
	if (test -e $(APP_SAMBA_DIR)/source/bin/nmbd)&&(test -e $(APP_SAMBA_DIR)/source/bin/smbd); \
	then echo "Compile samba success"; \
	else echo "Compile samba error!"; exit 1; \
	fi
	
	if test -d  $(FILESYSTEM_DIR)/usr/etc/samba; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/samba; \
	fi
	
	mkdir $(FILESYSTEM_DIR)/usr/etc/samba

#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/samba.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/samba_add_dir.sh $(FILESYSTEM_DIR)/usr/script/
#endif

	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/nmbd
	cp -f $(APP_SAMBA_DIR)/source/bin/nmbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/smbd
	cp -f $(APP_SAMBA_DIR)/source/bin/smbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/smbpasswd
	cp -f $(APP_SAMBA_DIR)/source/bin/smbpasswd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/libbigballofmud.so
	cp -f $(APP_SAMBA_DIR)/source/bin/libbigballofmud.so  $(FILESYSTEM_DIR)/lib/
	cd $(FILESYSTEM_DIR)/lib
	ln -snf libbigballofmud.so  $(FILESYSTEM_DIR)/lib/libbigballofmud.so.0

	
samba_clean:
	echo "Clean Samba-3.0.2"
	cd $(APP_SAMBA_DIR)/source
	if test -e $(APP_SAMBA_DIR)/source/Makefile; \
	then $(MAKE) -C $(APP_SAMBA_DIR)/source clean; \
	else echo "Makefile not exist"; \
	fi
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba.sh
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba_add_dir.sh
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbd
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbpasswd
	rm -rf $(FILESYSTEM_DIR)/lib/libbigballofmud.so
	rm -rf $(FILESYSTEM_DIR)/lib/libbigballofmud.so.0

else
samba:
samba_clean:	
endif

ifneq ($(strip $(TCSUPPORT_SAMBA_IPv6)),)
#Build samba-3.2.5
samba_ipv6:
	echo "Build Samba-3.2.5"
	cd $(APP_SAMBA_IPv6_DIR)/source
	$(MAKE) -C $(APP_SAMBA_IPv6_DIR)/source
	if (test -e $(APP_SAMBA_IPv6_DIR)/source/bin/nmbd)&&(test -e $(APP_SAMBA_IPv6_DIR)/source/bin/smbd); \
	then echo "Compile samba_ipv6 success"; \
	else echo "Compile samba_ipv6 error!"; exit 1; \
	fi
	
	if test -d  $(FILESYSTEM_DIR)/usr/etc/samba; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/samba; \
	fi
	
	mkdir $(FILESYSTEM_DIR)/usr/etc/samba

#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/samba.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/samba_add_dir.sh $(FILESYSTEM_DIR)/usr/script/
#endif

	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/nmbd
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/nmbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/smbd
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/smbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/smbpasswd
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/smbpasswd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/libtalloc.so.1
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/libtalloc.so.1  $(FILESYSTEM_DIR)/lib/
	cd $(FILESYSTEM_DIR)/lib
	ln -snf libtalloc.so.1  $(FILESYSTEM_DIR)/lib/libtalloc.so

	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/libtdb.so.1
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/libtdb.so.1  $(FILESYSTEM_DIR)/lib/
	cd $(FILESYSTEM_DIR)/lib
	ln -snf libtdb.so.1  $(FILESYSTEM_DIR)/lib/libtdb.so

	$(STRIP) --strip-unneeded $(APP_SAMBA_IPv6_DIR)/source/bin/libwbclient.so.0
	cp -f $(APP_SAMBA_IPv6_DIR)/source/bin/libwbclient.so.0  $(FILESYSTEM_DIR)/lib/
	cd $(FILESYSTEM_DIR)/lib
	ln -snf libwbclient.so.0  $(FILESYSTEM_DIR)/lib/libwbclient.so
	
samba_ipv6_clean:
	echo "Clean Samba-3.2.5"
	cd $(APP_SAMBA_IPv6_DIR)
	if test -e $(APP_SAMBA_IPv6_DIR)/source/Makefile; \
	then $(MAKE) -C $(APP_SAMBA_IPv6_DIR)/source clean; \
	else echo "Makefile not exist"; \
	fi
	
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba.sh
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba_add_dir.sh
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbd
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/nmbd
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbpasswd
	rm -rf $(FILESYSTEM_DIR)/lib/libtalloc.so.1
	rm -rf $(FILESYSTEM_DIR)/lib/libtalloc.so
	rm -rf $(FILESYSTEM_DIR)/lib/libtdb.so.1
	rm -rf $(FILESYSTEM_DIR)/lib/libtdb.so
	rm -rf $(FILESYSTEM_DIR)/lib/libwbclient.so.0 
	rm -rf $(FILESYSTEM_DIR)/lib/libwbclient.so
else
samba_ipv6:
samba_ipv6_clean:	
endif

api_lib:
#Build API library
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	echo "Build API library."
	$(MAKE) -C $(APP_API_LIB_DIR)
endif
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)
#Build fe library
	echo "Build fe library."
	$(MAKE) -C $(APP_API_LIB_FE_DIR)
#Build atmmgr library
ifneq ($(strip $(TCSUPPORT_WAN_ATM)),)
	echo "Build atmmgr library."
	$(MAKE) -C $(APP_API_LIB_ATM_DIR)
endif
#Build vdslmgr library.
ifneq ($(strip $(TCSUPPORT_WAN_PTM)),)
	echo "Build vdslmgr library."
	$(MAKE) -C $(APP_API_LIB_VDSL_DIR)
endif
#Build gponmgr library.
ifneq ($(strip $(TCSUPPORT_WAN_GPON)),)
	echo "Build gponmgr library."
	$(MAKE) -C $(APP_API_LIB_GPON_DIR)
endif
#Build eponmgr library.
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	echo "Build eponmgr library."
	$(MAKE) -C $(APP_API_LIB_EPON_DIR)
endif
#Build qdmamgr library
ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
	cp $(KERNEL_DIR)/include/ecnt_hook/ecnt_hook_qdma_type.h $(APP_API_LIB_QDMA_DIR)/qdma_type.h
	echo "Build qdmamgr_wan library."	
	cp $(APP_API_LIB_QDMA_DIR)/Makefile_wan $(APP_API_LIB_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR) clean
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR)

	echo "Build qdmamgr_lan library."
	cp $(APP_API_LIB_QDMA_DIR)/Makefile_lan $(APP_API_LIB_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR) clean
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR)
	rm -rf $(APP_API_LIB_QDMA_DIR)/qdma_type.h
endif
#Build pcie library.
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	echo "Build pcie library."
	$(MAKE) -C $(APP_API_LIB_PCIE_DIR)
endif
endif

#Build ppe library.
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	echo "Build ppe library."
	$(MAKE) -C $(APP_API_LIB_PPE_DIR)
endif
endif

api_lib_clean:
#Clean API library
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	echo "Clean API library."
	$(MAKE) -C $(APP_API_LIB_DIR)
endif
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)
#clean fe library
	echo "Clean fe library."
	$(MAKE) -C $(APP_API_LIB_FE_DIR) clean
#Clean atmmgr library
ifneq ($(strip $(TCSUPPORT_WAN_ATM)),)
	echo "Clean atmmgr library." 
	$(MAKE) -C $(APP_API_LIB_ATM_DIR) clean
endif
#Clean vdslmgr library
ifneq ($(strip $(TCSUPPORT_WAN_PTM)),)
	echo "Clean vdslmgr library."
	$(MAKE) -C $(APP_API_LIB_VDSL_DIR) clean
endif	
#Clean gponmgr library
ifneq ($(strip $(TCSUPPORT_WAN_GPON)),)
	echo "Clean gponmgr library."
	$(MAKE) -C $(APP_API_LIB_GPON_DIR) clean
endif
#Clean eponmgr library
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	echo "Clean eponmgr library."
	$(MAKE) -C $(APP_API_LIB_EPON_DIR) clean
endif
#Clean qdmamgr library
ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
	echo "Clean qdmamgr_wan library." 
	cp $(APP_API_LIB_QDMA_DIR)/Makefile_wan $(APP_API_LIB_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR) clean

	echo "Clean qdmamgr_lan library." 
	cp $(APP_API_LIB_QDMA_DIR)/Makefile_lan $(APP_API_LIB_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_LIB_QDMA_DIR) clean
endif
#Clean pcie library
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	echo "Clean pcie library."
	$(MAKE) -C $(APP_API_LIB_PCIE_DIR) clean
endif
endif

#Clean ppe library
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	echo "Clean ppe library."
	$(MAKE) -C $(APP_API_LIB_PPE_DIR) clean
endif
endif

dbgmgr:
#Build debug cmd
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)	
	echo "Build debug cmd."
	$(MAKE) -C $(APP_API_DBG_DIR) 
	if test -e $(APP_API_DBG_DIR)/dbgmgr;\
	then echo "Compile dbgmgr cmd success";\
	else echo "Compile dbgmgr cmd error";  exit 1;\
	fi
	cp  $(APP_API_DBG_DIR)/dbgmgr  $(FILESYSTEM_DIR)/usr/bin/
endif	

dbgmgr_clean:
#Clean debug cmd
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)	
	echo "Clean debug cmd." 
	if test -e $(APP_API_DBG_DIR)/Makefile;\
	then $(MAKE) -C $(APP_API_DBG_DIR) clean;\
	else echo "Makefile not exist";\
	fi
endif	

api_cmd:
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)
	echo "Build API cmd."
#Build gponmgr cmd
ifneq ($(strip $(TCSUPPORT_WAN_GPON)),)
	echo "Build gponmgr cmd."
	$(MAKE) -C $(APP_API_CMD_GPON_DIR)
	if test -e $(APP_API_CMD_GPON_DIR)/gponmgr ; \
	then echo "Compile gponmgr cmd success"; \
	else echo "Compile gponmgr cmd error!"; exit 1; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
#Build qdmamg_wan cmd
	echo "Build qdmamgr_wan cmd."
	cp $(APP_API_CMD_QDMA_DIR)/Makefile_wan $(APP_API_CMD_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_CMD_QDMA_DIR) clean
	$(MAKE) -C $(APP_API_CMD_QDMA_DIR)
	if test -e $(APP_API_CMD_QDMA_DIR)/qdmamgr_wan ; \
	then echo "Compile qdmamgr_wan cmd success"; \
	else echo "Compile qdmamgr_wan cmd error!"; exit 1; \
	fi
	
#Build qdmamg_lan cmd
	echo "Build qdmamgr_lan cmd."
	cp $(APP_API_CMD_QDMA_DIR)/Makefile_lan $(APP_API_CMD_QDMA_DIR)/Makefile
	$(MAKE) -C $(APP_API_CMD_QDMA_DIR) clean
	$(MAKE) -C $(APP_API_CMD_QDMA_DIR)
	if test -e $(APP_API_CMD_QDMA_DIR)/qdmamgr_lan ; \
	then echo "Compile qdmamgr_lan cmd success"; \
	else echo "Compile qdmamgr_lan cmd error!"; exit 1; \
	fi
endif
#Build pcie cmd
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	echo "Build pcie cmd."
	$(MAKE) -C $(APP_API_CMD_PCIE_DIR)
	if test -e $(APP_API_CMD_PCIE_DIR)/pcie ; \
	then echo "Compile pcie cmd success"; \
	else echo "Compile pcie cmd error!"; exit 1; \
	fi
endif
endif

#Build ppe cmd
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	echo "Build ppe cmd."
	$(MAKE) -C $(APP_API_CMD_PPE_DIR)
	if test -e $(APP_API_CMD_PPE_DIR)/ppe ; \
	then echo "Compile ppe cmd success"; \
	else echo "Compile ppe cmd error!"; exit 1; \
	fi
endif
endif

api_cmd_clean:
ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)
	echo "Clean API cmd."
#Clean gponmgr cmd
ifneq ($(strip $(TCSUPPORT_WAN_GPON)),)
	echo "Clean gponmgr cmd."
	if test -e $(APP_API_CMD_GPON_DIR)/Makefile; \
	then $(MAKE) -C $(APP_API_CMD_GPON_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
#Clean qdmamgr_wan cmd
	echo "Clean qdmamgr_wan cmd."
	cp $(APP_API_CMD_QDMA_DIR)/Makefile_wan $(APP_API_CMD_QDMA_DIR)/Makefile
	if test -e $(APP_API_CMD_QDMA_DIR)/Makefile; \
	then $(MAKE) -C $(APP_API_CMD_QDMA_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
	
#Clean qdmamgr_lan cmd
	echo "Clean qdmamgr_lan cmd."
	cp $(APP_API_CMD_QDMA_DIR)/Makefile_lan $(APP_API_CMD_QDMA_DIR)/Makefile
	if test -e $(APP_API_CMD_QDMA_DIR)/Makefile; \
	then $(MAKE) -C $(APP_API_CMD_QDMA_DIR) clean; \
	else echo "Makefile not exist"; \
	fi	
endif
#Clean pcie cmd
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	echo "Clean pcie cmd."
	if test -e $(APP_API_CMD_PCIE_DIR)/Makefile; \
	then $(MAKE) -C $(APP_API_CMD_PCIE_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
endif
endif

#Clean ppe cmd
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TCSUPPORT_MT7510_FE)),)
	echo "Clean ppe cmd."
	$(MAKE) -C $(APP_API_CMD_PPE_DIR) clean;
endif
endif


buildimage: kocopy devgen othercopy fwbuild devkitgen 
fwgen: devgen fwbuild

kocopy:
	echo "buildimage: copy dmt driver"
#3085 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3085)),)
	cp $(DMT_DIR)/afe3085/tc3162_dmt.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
#3086 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3086)),)
ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_L5P5.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3162u.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifeq ($(strip $(PROFILE)),tc3162u_cht)
	cp $(DMT_DIR)/3086/tc3162_dmt_cht.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3262.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3182.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
#3087 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3087)),)
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63260.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH_DMT3087)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365_3087_test.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365_loopback.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif	
else
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365_2_6_36.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365_loopback.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365_2_6_36.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
endif
endif
ifneq ($(strip $(TCSUPPORT_DMT_FTTDP)),)
	cp $(DMT_DIR)/7510/tc3162_dmt_mt7510_FTTdp.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
#3095 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3095)),)
ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH_DMT3095)),)
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168_3095.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168_loopback.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
else
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168_2_6_36.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
endif
endif
endif
#7510 DMT
ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
ifneq ($(strip $(TCSUPPORT_MT7510_E1)),)
	cp $(DMT_DIR)/7510/tc3162_dmt_mt7510_e1.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(DMT_DIR)/7510/tc3162_dmt_mt7510_A60901.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
ifneq ($(strip $(TCSUPPORT_BONDING)),)
	cp $(DMT_DIR)/7510/bonding/tc3162_dmt_master.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
	cp $(DMT_DIR)/7510/bonding/tc3162_dmt_slave.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt_slave.ko
else
ifneq ($(strip $(TCSUPPORT_DMT_CO)),)
	cp $(DMT_DIR)/7515/tc3162_dmt_co_mt7515.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
ifneq ($(strip $(TCSUPPORT_DMT_FTTDP)),)
	cp $(DMT_DIR)/7510/tc3162_dmt_mt7510_FTTdp.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/7510/tc3162_dmt_mt7510.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
endif
endif
endif
endif
#7505 DMT
ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(DMT_DIR)/7505/tc3162_dmt_mt7550.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
else
	cp $(DMT_DIR)/7505/tc3162_dmt_mt7505.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif

#7512 DMT
ifneq ($(strip $(TCSUPPORT_CPU_EN7512)),)
	cp $(DMT_DIR)/7512/tc3162_dmt_en7512.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif

#DMT CO for EN7521 FTTdp
ifneq ($(strip $(TCSUPPORT_CPU_EN7521)),)
ifneq ($(strip $(TCSUPPORT_FTTDP_V2)),)
	cp $(DMT_DIR)/7512/tc3162_dmt_en7512.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif

ifneq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_CT_WAN_PTM)),)
	if test -e $(PROFILE_DIR)/tc3162_dmt.ko; \
		then cp $(PROFILE_DIR)/tc3162_dmt.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko; \
	fi
endif
endif

	echo "buildimage: copy libs"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	cp -rf $(PROJECT_LIB_DIR)/mips-linux/. $(FILESYSTEM_DIR)/lib/
endif

ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-uclibc)
	cp -rf $(PROJECT_LIB_DIR)/mips-linux-uclibc/. $(FILESYSTEM_DIR)/lib/
endif

ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-unknown-linux-uclibc)
	cp -rf $(PROJECT_LIB_DIR)/mips-unknown-linux-uclibc/. $(FILESYSTEM_DIR)/lib/
endif
devgen:
	echo "mknod for dev"
	rm -rf $(FILESYSTEM_DIR)/dev/*
	mkdir $(FILESYSTEM_DIR)/dev/pts
	mkdir $(FILESYSTEM_DIR)/dev/shm
	mknod $(FILESYSTEM_DIR)/dev/console c 4 64
	mknod $(FILESYSTEM_DIR)/dev/gpio c 10 123
	mknod $(FILESYSTEM_DIR)/dev/led c 10 151
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	mknod $(FILESYSTEM_DIR)/dev/pmap c 200 0
endif
ifneq ($(strip $(TCSUPPORT_QOS)),)
	mknod $(FILESYSTEM_DIR)/dev/qostype c 111 2
ifneq ($(strip $(TCSUPPORT_CT_DS_LIMIT)),)
	mknod $(FILESYSTEM_DIR)/dev/qos_dslimit c 112 0
endif
endif
ifneq ($(strip $(TCSUPPORT_PON_VLAN)),)
	mknod $(FILESYSTEM_DIR)/dev/ponvlan c 215 0
endif
ifneq ($(strip $(TCSUPPORT_PON_MAC_FILTER)),)
	mknod $(FILESYSTEM_DIR)/dev/ponmacfilter c 216 0
endif
	mknod $(FILESYSTEM_DIR)/dev/vdsp c 245 0
	mknod $(FILESYSTEM_DIR)/dev/slic c 251 0
	mknod $(FILESYSTEM_DIR)/dev/spi c 255 0
ifneq ($(TCSUPPORT_CT_SIMCARD_SEPARATION)$(TCSUPPORT_SIMCARD_GENERAL),)
	mknod $(FILESYSTEM_DIR)/dev/simcard c 168 0
endif
	mknod $(FILESYSTEM_DIR)/dev/mtd b 31 0
ifneq ($(strip $(TCSUPPORT_MTD_PARTITIONS_CMDLINE)),)
	if test -e $(TOOLS_DIR)/mknod_mtd.sh; \
	then echo " mknod mtd partitions"; \
		chmod 777 $(TOOLS_DIR)/mknod_mtd.sh; \
		/bin/sh $(TOOLS_DIR)/mknod_mtd.sh $(TCSUPPORT_MTD_PARTITION_NUM) $(FILESYSTEM_DIR); \
	fi
else
	mknod $(FILESYSTEM_DIR)/dev/mtd0 c 90 0
	mknod $(FILESYSTEM_DIR)/dev/mtd1 c 90 2
	mknod $(FILESYSTEM_DIR)/dev/mtd2 c 90 4
	mknod $(FILESYSTEM_DIR)/dev/mtd3 c 90 6
	mknod $(FILESYSTEM_DIR)/dev/mtd4 c 90 8
	mknod $(FILESYSTEM_DIR)/dev/mtd5 c 90 10
	mknod $(FILESYSTEM_DIR)/dev/mtd6 c 90 12
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtd7 c 90 14
	mknod $(FILESYSTEM_DIR)/dev/mtd8 c 90 16
	mknod $(FILESYSTEM_DIR)/dev/mtd9 c 90 18
ifneq ($(strip $(TCSUPPORT_JFFS2_BLOCK)),)
	mknod $(FILESYSTEM_DIR)/dev/mtd10 c 90 20
endif
endif
	mknod $(FILESYSTEM_DIR)/dev/mtdblock0 b 31 0
	mknod $(FILESYSTEM_DIR)/dev/mtdblock1 b 31 1
	mknod $(FILESYSTEM_DIR)/dev/mtdblock2 b 31 2
	mknod $(FILESYSTEM_DIR)/dev/mtdblock3 b 31 3
	mknod $(FILESYSTEM_DIR)/dev/mtdblock4 b 31 4
	mknod $(FILESYSTEM_DIR)/dev/mtdblock5 b 31 5
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock6 b 31 6
	mknod $(FILESYSTEM_DIR)/dev/mtdblock7 b 31 7
	mknod $(FILESYSTEM_DIR)/dev/mtdblock8 b 31 8
ifneq ($(strip $(TCSUPPORT_JFFS2_BLOCK)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock9 b 31 9
endif
ifneq ($(strip $(TCSUPPORT_SQUASHFS_ADD_YAFFS)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock10 b 31 10
endif
ifneq ($(strip $(TCSUPPORT_MULTI_BOOT)),)
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock9 b 31 9
ifneq ($(strip $(TCSUPPORT_SQUASHFS_ADD_YAFFS)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock10 b 31 10
endif
else
	mknod $(FILESYSTEM_DIR)/dev/mtdblock6 b 31 6
ifneq ($(strip $(TCSUPPORT_SQUASHFS_ADD_YAFFS)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock7 b 31 7
endif
endif
endif
endif
endif
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	$(MAKE) -C $(MODULES_FTTDP_INIC_DIR) devgen
endif
	mknod $(FILESYSTEM_DIR)/dev/null c 1 3
	mknod $(FILESYSTEM_DIR)/dev/ppp c 108 0
	mknod $(FILESYSTEM_DIR)/dev/ptmx c 5 2
	mknod $(FILESYSTEM_DIR)/dev/ptyp0 c 2 0
	mknod $(FILESYSTEM_DIR)/dev/ptyp1 c 2 1
	mknod $(FILESYSTEM_DIR)/dev/ptyp2 c 2 2
	mknod $(FILESYSTEM_DIR)/dev/sda b 8 0
	mknod $(FILESYSTEM_DIR)/dev/sda1 b 8 1
	mknod $(FILESYSTEM_DIR)/dev/sda2 b 8 2
	mknod $(FILESYSTEM_DIR)/dev/sdb b 8 16
	mknod $(FILESYSTEM_DIR)/dev/sdb1 b 8 17
	mknod $(FILESYSTEM_DIR)/dev/sdb2 b 8 18
	mknod $(FILESYSTEM_DIR)/dev/tty c 5 0
	mknod $(FILESYSTEM_DIR)/dev/tty0 c 4 0
	mknod $(FILESYSTEM_DIR)/dev/ttyp0 c 3 0
	mknod $(FILESYSTEM_DIR)/dev/ttyp1 c 3 1
	mknod $(FILESYSTEM_DIR)/dev/ttyp2 c 3 2
	mknod $(FILESYSTEM_DIR)/dev/ttyS0 c 4 64
ifneq ($(strip $(TCSUPPORT_UART2)),)
	mknod $(FILESYSTEM_DIR)/dev/ttyS20 c 4 65
endif
	mknod $(FILESYSTEM_DIR)/dev/urandom c 1 9
	mknod $(FILESYSTEM_DIR)/dev/watchdog c 10 130
ifneq ($(strip $(TCSUPPORT_MUH_TEST)),)
	mknod $(FILESYSTEM_DIR)/dev/cli c 234 0
endif
	mknod $(FILESYSTEM_DIR)/dev/zero c 1 5
ifneq ($(strip $(TCSUPPORT_FON)),)
	mknod $(FILESYSTEM_DIR)/dev/tun c 10 200
endif
ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
	mknod $(FILESYSTEM_DIR)/dev/fuse c 10 229
	mkdir $(FILESYSTEM_DIR)/dev/misc
	mknod $(FILESYSTEM_DIR)/dev/misc/fuse c 10 229
endif
	mkdir $(FILESYSTEM_DIR)/dev/usb
ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB0 c 188 0
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB1 c 188 1
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB2 c 188 2
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB3 c 188 3
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB4 c 188 4
endif
ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)	
	mknod $(FILESYSTEM_DIR)/dev/usb/lp0 c 180 0
	chmod 666 $(FILESYSTEM_DIR)/dev/usb/lp0
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
	mknod $(FILESYSTEM_DIR)/dev/usb/video0 c 81 0
	chmod 666 $(FILESYSTEM_DIR)/dev/usb/video0
	ln -s /dev/usb/video0 $(FILESYSTEM_DIR)/dev/video0
endif

ifneq ($(strip $(TCSUPPORT_EIP93_VERIFY)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	mknod $(FILESYSTEM_DIR)/dev/slad_test c 239 0
endif
endif

ifneq ($(strip $(TCSUPPORT_CT_BUTTONDETECT)),)
	mknod $(FILESYSTEM_DIR)/dev/led_button c 248 0
endif

ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)
	mknod $(FILESYSTEM_DIR)/dev/accesslimit c 123 0
endif
ifneq ($(strip $(TCSUPPORT_CT_URL_FILTER)),)
	mknod $(FILESYSTEM_DIR)/dev/urlfilter c 124 0
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_SYSLOG)),)
	ln -s /tmp/log $(FILESYSTEM_DIR)/dev/log
endif
else
ifneq ($(strip $(TCSUPPORT_SYSLOG)),)
	ln -s /var/log/log $(FILESYSTEM_DIR)/dev/log
endif
endif

	echo "buildimage: copy voip PCM ,DSP and SLIC drivers"
ifneq ($(strip $(TCSUPPORT_VOIP)),)
	mknod $(FILESYSTEM_DIR)/dev/AclDsp c 234 0
	mknod $(FILESYSTEM_DIR)/dev/FxsDrv c 235 0
endif

ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
	mknod $(FILESYSTEM_DIR)/dev/hwnat0 c 220 0
	mknod $(FILESYSTEM_DIR)/dev/acl0 c 230 0
	mknod $(FILESYSTEM_DIR)/dev/ac0 c 240 0
	mknod $(FILESYSTEM_DIR)/dev/mtr0 c 250 0
endif

ifneq ($(strip $(TCSUPPORT_PONMGR)),)
	mknod $(FILESYSTEM_DIR)/dev/pon c 190 0
endif
ifneq ($(strip $(TCSUPPORT_WAN_PTM)),)
	mknod $(FILESYSTEM_DIR)/dev/ptm c 191 0
endif
ifneq ($(strip $(TCSUPPORT_WAN_EPON)),)
	mknod $(FILESYSTEM_DIR)/dev/epon_mac c 221 0
endif
ifneq ($(strip $(TCSUPPORT_GPON_MAPPING) $(TCSUPPORT_EPON_MAPPING)),)
	mknod $(FILESYSTEM_DIR)/dev/xponmap c 210 0
endif

ifneq ($(strip $(TCSUPPORT_XPON_HAL_API_EXT)),)
	mknod $(FILESYSTEM_DIR)/dev/vlanfilter c 252 0
endif

ifneq ($(strip $(TCSUPPORT_DRIVER_API) $(TCSUPPORT_XPON_HAL_API_EXT)),)
	mknod $(FILESYSTEM_DIR)/dev/fe c 226 0	
endif

ifneq ($(strip $(TCSUPPORT_DRIVER_API)),)	
	mknod $(FILESYSTEM_DIR)/dev/atm c 113 0
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	mknod $(FILESYSTEM_DIR)/dev/pcie c 225 0
endif	
endif	
ifneq ($(strip $(TCSUPPORT_QDMA_BUFMGR)),)
	mknod $(FILESYSTEM_DIR)/dev/qdma_lan c 119 0
	mknod $(FILESYSTEM_DIR)/dev/qdma_wan c 120 0
endif

othercopy:
#Copy profile to filesystem
	rm -f $(FILESYSTEM_DIR)/userfs/profile.cfg
ifneq ($(strip $(KERNEL_2_6_36)),)
	cp $(PROFILE_DIR)/$(PROFILE)_2_6_36.profile $(FILESYSTEM_DIR)/userfs/profile.cfg
else
	cp $(PROFILE_DIR)/$(PROFILE).profile $(FILESYSTEM_DIR)/userfs/profile.cfg
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
	cp $(FILESYSTEM_DIR)/usr/etc/init.d/rcS $(APP_PRIVATE_DIR)/etc_script/dmt_co/rcS_bak
	cp $(APP_PRIVATE_DIR)/etc_script/dmt_co/rcS $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif
endif

#generate RcS and copy RcS(No needed), rcS file will modify in filesystem
#	rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
#	cp $(PROJECT_AUTOCONFIG_DIR)/rcStemplate $(FILESYSTEM_DIR)/usr/etc/init.d/rcS


#copy certificates
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
	if test -d  $(FILESYSTEM_DIR)/usr/etc/802_1X; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/802_1X; \
	fi
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/Certificates
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/CA
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEY
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEYPASSWD	
	cp -rf $(APP_8021X_PARA_DIR)/Certificates/* $(FILESYSTEM_DIR)/usr/etc/802_1X/Certificates/
	cp -rf $(APP_8021X_PARA_DIR)/CA/* $(FILESYSTEM_DIR)/usr/etc/802_1X/CA/
	cp -rf $(APP_8021X_PARA_DIR)/PKEY/* $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEY/
	cp -rf $(APP_8021X_PARA_DIR)/PKEYPASSWD/* $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEYPASSWD/
	chmod 777 -R $(FILESYSTEM_DIR)/usr/etc/802_1X/
endif

#copy led conf file

#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	echo "copy led conf file"
ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162 $(FILESYSTEM_DIR)/userfs/led.conf
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)	
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)	
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_wps $(FILESYSTEM_DIR)/userfs/led.conf
endif
else
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)	
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63260_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63260 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3262 $(FILESYSTEM_DIR)/userfs/led.conf
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3182_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3182 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63165)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63165_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63165 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ct/led.conf_rt63365 $(FILESYSTEM_DIR)/userfs/led.conf
else
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63368_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63368 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ct/led.conf_rt65168 $(FILESYSTEM_DIR)/userfs/led.conf
else
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt65168_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt65168 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
ifeq ($(strip $(TCSUPPORT_CPU_MT7512)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ct/led.conf_mt7510 $(FILESYSTEM_DIR)/userfs/led.conf
else
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7510_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7510 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7505)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7505_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
ifneq ($(strip $(TCSUPPORT_WLAN_MT7601E)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7505_mt7601 $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7505 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
ifeq ($(strip $(TCSUPPORT_CPU_MT7521)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7520_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
ifneq ($(strip $(TCSUPPORT_TW_BOARD_CDS)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7520_dasan $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_mt7520 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif
endif
#endif

#copy if user modify led.conf for ssw test
ifneq ($(strip $(TCSUPPORT_CPU_EN7512)),)
	#delete original led.conf before copy led.conf
	rm -f $(FILESYSTEM_DIR)/userfs/*led.conf;
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_en7512 $(FILESYSTEM_DIR)/userfs/led.conf
	if test -e $(PROFILE_DIR)/7512led.conf; \
	then cp $(PROFILE_DIR)/7512led.conf $(FILESYSTEM_DIR)/userfs/7512led.conf; \
	fi
	if test -e $(PROFILE_DIR)/7513led.conf; \
	then cp $(PROFILE_DIR)/7513led.conf $(FILESYSTEM_DIR)/userfs/7513led.conf; \
	fi
	if test -e $(PROFILE_DIR)/7513gled.conf; \
	then cp $(PROFILE_DIR)/7513gled.conf $(FILESYSTEM_DIR)/userfs/7513gled.conf; \
	fi
endif
ifneq ($(strip $(TCSUPPORT_CPU_EN7521)),)
	#delete original led.conf before copy led.conf
	rm -f $(FILESYSTEM_DIR)/userfs/*led.conf;
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_en7521 $(FILESYSTEM_DIR)/userfs/led.conf
	if test -e $(PROFILE_DIR)/7526fled.conf; \
	then cp $(PROFILE_DIR)/7526fled.conf $(FILESYSTEM_DIR)/userfs/7526fled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7521fled.conf; \
	then cp $(PROFILE_DIR)/7521fled.conf $(FILESYSTEM_DIR)/userfs/7521fled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7521sled.conf; \
	then cp $(PROFILE_DIR)/7521sled.conf $(FILESYSTEM_DIR)/userfs/7521sled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7526dled.conf; \
	then cp $(PROFILE_DIR)/7526dled.conf $(FILESYSTEM_DIR)/userfs/7526dled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7526gled.conf; \
	then cp $(PROFILE_DIR)/7526gled.conf $(FILESYSTEM_DIR)/userfs/7526gled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7521gled.conf; \
	then cp $(PROFILE_DIR)/7521gled.conf $(FILESYSTEM_DIR)/userfs/7521gled.conf; \
	fi
	if test -e $(PROFILE_DIR)/7586led.conf; \
	then cp $(PROFILE_DIR)/7586led.conf $(FILESYSTEM_DIR)/userfs/7586led.conf; \
	fi
endif
	if test -e $(PROFILE_DIR)/led.conf; \
	then cp $(PROFILE_DIR)/led.conf $(FILESYSTEM_DIR)/userfs/led.conf; \
	fi
	dos2unix $(FILESYSTEM_DIR)/userfs/led.conf

#copy fwver.conf	
	if test -e $(PROFILE_DIR)/fwver.conf; \
	then cp $(PROFILE_DIR)/fwver.conf $(FILESYSTEM_DIR)/usr/etc/fwver.conf; \
	fi

#copy romfile.cfg
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
#Copy profile to filesystem, no needed, /userfs/romfile.cfg will contain all cfg node
#	cp $(APP_PRIVATE_DIR)/etc_script/romfile.cfg $(FILESYSTEM_DIR)/userfs/
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/dmt_co/romfile.cfg $(FILESYSTEM_DIR)/userfs/
else
	cp $(APP_PRIVATE_DIR)/etc_script/romfile.cfg $(FILESYSTEM_DIR)/userfs/
endif
#if defined(TCSUPPORT_OMCI)
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
ifeq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_OMCI_ALCATEL)),)
	cp $(PROFILE_DIR)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg
else
	cp $(APP_PRIVATE_DIR)/etc_script/pon/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg
endif
endif
endif
#endif
#if !defined(TCSUPPORT_TTNET)
ifneq ($(strip $(TCSUPPORT_TTNET)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/vserver_ttnet.sh $(FILESYSTEM_DIR)/usr/script/vserver.sh
endif
#endif

#if !defined(TCSUPPORT_TURKISH)
ifneq ($(strip $(TCSUPPORT_TURKISH)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/vserver_ttnet.sh $(FILESYSTEM_DIR)/usr/script/vserver.sh
endif
#endif


#endif

#	$(TOOLS_DIR)/romfile_merge/romfile_merge $(APP_PRIVATE_DIR)/etc_script/romfile.cfg $(APP_PRIVATE_DIR)/etc_script/$(CUSTOM)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_CFG_MANAGER_DIR)/cfg_mgr.cfg Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile

ifneq ($(strip $(TCSUPPORT_C1_MS)),)
	if test -e $(PROFILE_DIR)/romfile.cfg;\
	then cp -f $(PROFILE_DIR)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg; \
	fi
	if test -e $(PROFILE_DIR)/fwver_c1.conf;\
	then cp -f $(PROFILE_DIR)/fwver_c1.conf $(FILESYSTEM_DIR)/usr/etc/fwver_c1.conf; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_C1_ZY)),)
	if test -e $(PROFILE_DIR)/romfile.cfg;\
	then cp -f $(PROFILE_DIR)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg; \
	fi
	if test -e $(PROFILE_DIR)/fwver_c1.conf;\
	then cp -f $(PROFILE_DIR)/fwver_c1.conf $(FILESYSTEM_DIR)/usr/etc/fwver_c1.conf; \
	fi
	if test -e $(PROFILE_DIR)/led.conf;\
	then rm -f $(FILESYSTEM_DIR)/userfs/led.conf;cp $(PROFILE_DIR)/led.conf $(FILESYSTEM_DIR)/userfs/led.conf;\
	fi
endif

ifeq ($(strip $(CUSTOM)),RT)
	if test -e $(PROFILE_DIR)/romfile.cfg;\
	then  cp -f $(PROFILE_DIR)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg; \
	fi
endif

#copy script
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)

	echo "copy script"
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start.sh $(FILESYSTEM_DIR)/usr/script/wan_start_ipv4.sh
	cp $(APP_PRIVATE_DIR)/etc_script/wan_stop.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/ppp_start.sh $(FILESYSTEM_DIR)/usr/script/	
ifneq ($(strip $(TCSUPPORT_DSLITE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/dslite_start.sh $(FILESYSTEM_DIR)/usr/script/
endif
	# modify in filesystem
	#cp $(APP_PRIVATE_DIR)/etc_script/udhcpc_nodef.sh $(FILESYSTEM_DIR)/usr/script/
	#cp $(APP_PRIVATE_DIR)/etc_script/udhcpc.sh $(FILESYSTEM_DIR)/usr/script/
ifneq ($(strip $(TCSUPPORT_ALIASIP)),)	
	cp $(APP_PRIVATE_DIR)/etc_script/lanAlias_start.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/lanAlias_stop.sh $(FILESYSTEM_DIR)/usr/script/
endif
ifneq ($(strip $(TCSUPPORT_CWMP)),)
	cp $(APP_PRIVATE_DIR)/etc_script/devInf.conf $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/8021xaction.sh $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_IPV6)),)
#	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh
ifneq ($(strip $(TCSUPPORT_IPV6_PRIVACYADDRS)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ipv6-up-privacyaddrs $(FILESYSTEM_DIR)/usr/etc/ppp/ipv6-up
else
	cp $(APP_PRIVATE_DIR)/etc_script/ipv6-up $(FILESYSTEM_DIR)/usr/etc/ppp/
endif
	chmod 777 $(FILESYSTEM_DIR)/usr/etc/ppp/ipv6-up
endif
#ifneq ($(strip $(TCSUPPORT_DNSEACHPVC)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/resolv.conf
	cp $(APP_PRIVATE_DIR)/etc_script/resolv_ipv6.conf $(FILESYSTEM_DIR)/usr/etc/resolv_ipv6.conf
	cp $(APP_PRIVATE_DIR)/etc_script/resolv_ipv4.conf $(FILESYSTEM_DIR)/usr/etc/resolv_ipv4.conf
#else
#	rm -f $(FILESYSTEM_DIR)/usr/etc/resolv.conf
#	rm -f $(FILESYSTEM_DIR)/usr/etc/dnsmasq.conf
#	cp $(APP_PRIVATE_DIR)/etc_script/resolv_noeach.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
#	cp $(APP_PRIVATE_DIR)/etc_script/dnsmasq.conf $(FILESYSTEM_DIR)/usr/etc/dnsmasq.conf
#endif
ifneq ($(strip $(TCSUPPORT_FW_UPGRADE_16M)),)
	cp $(APP_PRIVATE_DIR)/etc_script/before_web_download.sh $(FILESYSTEM_DIR)/usr/script/before_web_download.sh
	cp $(APP_PRIVATE_DIR)/etc_script/before_web_download_remove_wifi.sh $(FILESYSTEM_DIR)/usr/script/before_web_download_remove_wifi.sh

ifneq ($(strip $(TCSUPPORT_TR069_UPGRADE_CUSTOM)),)
	cp $(APP_PRIVATE_DIR)/etc_script/before_tr069_download_custom.sh $(FILESYSTEM_DIR)/usr/script/before_tr069_download.sh
	cp $(APP_PRIVATE_DIR)/etc_script/before_reboot_custom.sh $(FILESYSTEM_DIR)/usr/script/before_reboot_custom.sh	
else
	cp $(APP_PRIVATE_DIR)/etc_script/before_tr069_download.sh $(FILESYSTEM_DIR)/usr/script/before_tr069_download.sh
endif
endif
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
	cp $(APP_PRIVATE_DIR)/etc_script/usb_insmod.sh $(FILESYSTEM_DIR)/usr/script/usb_insmod.sh
endif
#copy inittab shell script
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/inittab_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu
	cp $(APP_PRIVATE_DIR)/etc_script/inittab $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu
endif

	chmod 755 $(FILESYSTEM_DIR)/usr/script/*
#endif

ifeq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_IPV6)),)
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
else
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(FILESYSTEM_DIR)/usr/script/wan_start_ipv4.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
endif

ifneq ($(strip $(TCSUPPORT_IPV6)),)
	cp $(FILESYSTEM_DIR)/usr/etc/resolv_ipv6.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
else
	cp $(FILESYSTEM_DIR)/usr/etc/resolv_ipv4.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_IPV6_INETD)),)
	cp $(APP_DIR)/private/etc_script/inetd6.conf $(FILESYSTEM_DIR)/usr/etc/inetd.conf
else
	cp $(APP_DIR)/private/etc_script/inetd.conf $(FILESYSTEM_DIR)/usr/etc/inetd.conf
endif


#copy inittab shell script
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_RA_MENU)),)
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab
	cp $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab
endif
else
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab
	cp $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab
endif
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu
endif
#endif


#copy string
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(GUI_STRING_CONFIG_SUPPORT)),)
	cp $(APP_DIR)/private/etc_script/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_DIR)/private/etc_script/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
endif
#endif

ifneq ($(strip $(TCSUPPORT_MODEL_CHECK)),)
	cp $(TOOLS_DIR)/trx/trx_config $(FILESYSTEM_DIR)/usr/etc/trx_config
endif

	chmod 777 $(FILESYSTEM_DIR)/usr/etc/inittab

	chmod 777 -R $(FILESYSTEM_DIR)/usr/etc/init.d

#copy webpages
ifneq ($(strip $(TCSUPPORT_C7_CU)),)
	rm -rf $(APP_WEBPAGE_DIR)/Router/e8b_vd/boaroot/html/img/framelogo.jpg
	rm -rf $(APP_WEBPAGE_DIR)/Router/e8b_vd/boaroot/html/img/logo.jpg
	cp -rf $(PROFILE_DIR)/framelogo.jpg $(APP_WEBPAGE_DIR)/Router/e8b_vd/boaroot/html/img/
	cp -rf $(PROFILE_DIR)/logo.jpg $(APP_WEBPAGE_DIR)/Router/e8b_vd/boaroot/html/img/
endif
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	rm -rf $(FILESYSTEM_DIR)/boaroot
	cp -a $(APP_ROUTE_WEBPAGE_DIR) $(FILESYSTEM_DIR)




ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	#rm then copy string file
	rm -rf $(FILESYSTEM_DIR)/userfs/string1.conf
	rm -rf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
ifneq ($(strip $(TCSUPPORT_CHINESE_ONLY)),)	
	cp $(APP_PRIVATE_DIR)/etc_script/string_chinese.conf $(FILESYSTEM_DIR)/userfs/string1.conf
endif		
ifneq ($(strip $(TCSUPPORT_ENGLISH_ONLY)),)
	cp $(PROFILE_DIR)/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
endif	
ifneq ($(strip $(TCSUPPORT_WAN_GPON) $(TCSUPPORT_WAN_EPON)),)
ifeq ($(strip $(TCSUPPORT_CT)),)
	#rm then copy string file
	rm -rf $(FILESYSTEM_DIR)/userfs/string1.conf
	rm -rf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/pon/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/pon/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
ifneq ($(strip $(TCSUPPORT_CHINESE_ONLY)),)
ifneq ($(strip $(TCSUPPORT_PON_FH)),)
	cp $(PROFILE_DIR)/string_chinese.conf $(FILESYSTEM_DIR)/userfs/string1.conf
else 
	cp $(APP_PRIVATE_DIR)/etc_script/pon/string_chinese.conf $(FILESYSTEM_DIR)/userfs/string1.conf
endif
endif
ifneq ($(strip $(TCSUPPORT_CT_C5_HEN_SFU)),)
	cp $(PROFILE_DIR)/string_chinese.conf $(FILESYSTEM_DIR)/userfs/string1.conf
endif 

ifneq ($(strip $(TCSUPPORT_ENGLISH_ONLY)),)
	cp $(PROFILE_DIR)/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
endif
endif
endif	
	rm -rf $(FILESYSTEM_DIR)/boaroot/
	cp -a $(APP_WEBPAGE_DIR)/Router/ml/boaroot $(FILESYSTEM_DIR)
ifeq ($(strip $(TCSUPPORT_CY_PON)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/telnet.asp
endif
	cd $(TOOLS_DIR)/mlCheckHash/ && chmod 777 mlCheckHash && ./mlCheckHash $(FILESYSTEM_DIR)/userfs/string1.conf
	if test -e $(TOOLS_DIR)/mlCheckHash/error; \
	then echo "string1.conf duplicate, please check!"; exit 1; \
	else echo "string1.conf is right!"; \
	fi
endif
ifneq ($(strip $(TCSUPPORT_C1_ZY)),)
	if test -e $(PROFILE_DIR)/logo.gif;\
	then cp -f $(PROFILE_DIR)/logo.gif $(FILESYSTEM_DIR)/boaroot/html/logo.gif; \
	fi
	
	if test -e $(PROFILE_DIR)/style.css;\
	then cp -f $(PROFILE_DIR)/style.css $(FILESYSTEM_DIR)/boaroot/html/style.css; \
	fi
	
	if test -e $(PROFILE_DIR)/menu.js;\
	then cp -f $(PROFILE_DIR)/menu.js $(FILESYSTEM_DIR)/boaroot/html/menu.js; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_PON_FH)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/html/logo.gif
	cp -f $(PROFILE_DIR)/logo.gif $(FILESYSTEM_DIR)/boaroot/html/logo.gif
endif

ifneq ($(strip $(TCSUPPORT_VIRSVR_LOCAL_PORT)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_VIRSVR_APPL_AND_PROT)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_appl_and_prot.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_appl_and_prot.cgi
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_appl_and_port.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_appl_and_port.cgi; \
	fi
endif
#if !defined(TCSUPPORT_GUI_ALG_CONTROL))
ifeq ($(strip $(TCSUPPORT_GUI_ALG_CONTROL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_alg_switch.asp
endif
#endif

	#remove the garbage WLAN webpage left in the filesystem
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MT7601E)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MT7592)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3090.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_MT7615E)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_mt7615.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_5g.asp
endif
	#remove the raw webpage code 
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3090.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_mt7615.asp
	
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp

else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp
endif

ifneq ($(strip $(TCSUPPORT_QOS)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp

	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	fi
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp

	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	fi
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log.cgi
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.cgi; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.asp; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_ACCOUNT_ACL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl.asp
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/acl_table.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/acl_table.asp; \
	fi
endif


	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/tools_admin_c2.asp
#if !defined(TCSUPPORT_TRUE_LANDING_PAGE)) || !defined(TCSUPPORT_C2_TRUE))
ifeq ($(strip $(TCSUPPORT_TRUE_LANDING_PAGE)),)
ifeq ($(strip $(TCSUPPORT_C2_TRUE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzConnectClose_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzExistAccount_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzIspUserPwd_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzManualConnect_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWait2_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWait3_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWelcome_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWiFi_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/tools_landingPage.asp
endif
endif	
#endif
	
#if !defined(TCSUPPORT_TIME_OF_DAY))
ifeq ($(strip $(TCSUPPORT_TIME_OF_DAY)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_timeofday.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/keyword.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/keywordTimeOfDay.cgi
endif
#endif
	
	
#if !defined(TCSUPPORT_CZ_OTE)
ifeq ($(strip $(TCSUPPORT_CZ_OTE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OutVar.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizardPPP_OTE.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizStatusInfo_OTE.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/html/red.jpg
	rm -f $(FILESYSTEM_DIR)/boaroot/html/green.jpg
endif
#endif

#if !defined(TCSUPPORT_ISP_WIZARD)
ifeq ($(strip $(TCSUPPORT_ISP_WIZARD)),)
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizardISP.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizardISP.asp; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/html/Isplist.js; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/html/Isplist.js; \
	fi
endif
#endif

#if !defined(TCSUPPORT_CZ_OTE_TOOL)
ifeq ($(strip $(TCSUPPORT_CZ_OTE_TOOL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_index.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_home_wan.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_status_deviceinfo.asp
endif
#endif


ifeq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_3g.asp; \
	then rm $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_3g.asp; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/3G.asp; \
	then rm $(FILESYSTEM_DIR)/boaroot/cgi-bin/3G.asp; \
	fi
	if test -e $(FILESYSTEM_DIR)/usr/etc/usb_modeswitch.d; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/usb_modeswitch.d; \
	fi
else
	#cp -rf $(APP_PUBLIC_DIR)/usb-modeswitch-data-20120120/usb_modeswitch.d/ $(FILESYSTEM_DIR)/usr/etc/
	if test -e $(FILESYSTEM_DIR)/usr/etc/usb_modeswitch.d; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/usb_modeswitch.d; \
	fi
	cp -rf $(APP_PUBLIC_DIR)/usb-modeswitch-data-20120531/usb_modeswitch.d/ $(FILESYSTEM_DIR)/usr/etc/
endif

ifeq ($(strip $(TCSUPPORT_TRACEROUTE_GUI)),)
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/getTracentResult.cgi; \
	then rm $(FILESYSTEM_DIR)/boaroot/cgi-bin/getTracentResult.cgi; \
	fi
endif

#if !defined(TCSUPPORT_NATSESSIONS_PERUSER_PERIP))
ifeq ($(strip $(TCSUPPORT_BHARTI)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_addsession.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_session.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_session.cgi
endif
#endif
	
#if !defined(TCSUPPORT_NEW_CUSTOMER_VERSION))
ifeq ($(strip $(TCSUPPORT_NEW_CUSTOMER_VERSION)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/sig.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/upload.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/version.asp
endif
#endif
	

#if !defined(TCSUPPORT_WEB_INTERCEPTION))
ifeq ($(strip $(TCSUPPORT_WEB_INTERCEPTION)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/AdslDownInfo.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/FirmwareUpgradeInfo.asp
endif
#endif

#if !defined(TCSUPPORT_REDIRECT_WLAN_WEB))
ifeq ($(strip $(TCSUPPORT_REDIRECT_WLAN_WEB)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/direct_to_wlan.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/rpSys_Wlan.asp
endif
#endif

ifneq ($(strip $(TCSUPPORT_CHINESE_ONLY)),)	
	rm -f $(FILESYSTEM_DIR)/boaroot/boa.conf
	cp -a $(FILESYSTEM_DIR)/boaroot/boa_chinese.conf $(FILESYSTEM_DIR)/boaroot/boa.conf
	rm -f $(FILESYSTEM_DIR)/boaroot/boa_chinese.conf
endif	

	
	rm -f $(FILESYSTEM_DIR)/boaroot/boa_OI.conf
	rm -f $(FILESYSTEM_DIR)/boaroot/html/style_OI.css
	rm -f $(FILESYSTEM_DIR)/boaroot/html/include/images/page_btn_install_mod_OI.png
	rm -f $(FILESYSTEM_DIR)/boaroot/html/include/images/page_btn_install_over_mod_OI.png
#if !defined(TCSUPPORT_OI_C9)
ifeq ($(strip $(TCSUPPORT_OI_C9)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_fonnet_tp_tw.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/rpFon_tp_tw.asp
endif
#endif
#if !defined(TCSUPPORT_OI_C7)
ifeq ($(strip $(TCSUPPORT_OI_C7)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_fonnet_tp_tw.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/rpFon_tp_tw.asp
endif
#endif
#endif



#endif


ifneq ($(strip $(TCSUPPORT_TR069_UPGRADE_CUSTOM)),)
#rm webpage which not used
ifeq ($(strip $(TCSUPPORT_SNMP)),) 
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_snmp.asp
endif
ifeq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/getCANames.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/getCertNames.cgi
endif
ifeq ($(strip $(TCSUPPORT_TTNET)$(TCSUPPORT_TURKISH)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/more_client_list.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/more_client_list_2.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/more_client_list_3.asp
endif	
ifeq ($(strip $(TCSUPPORT_BHARTI)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_deviceinfo_bhati.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log_bhati.cgi
endif
ifeq ($(strip $(TCSUPPORT_VOIP)),)
	rm -rf $(FILESYSTEM_DIR)/userfs/CountrySetting
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_advanced.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_basic.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_busy.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_call_ctrl.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_log.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_media2.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_media.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_media.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_speed_dial.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/voip_speed_dial.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/navigation-voip.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/help_voip.asp
endif		
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wifiqa_apstatistics.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wifiqa_advanced.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wifiqa_basic.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wifiqa_wmm.asp

ifeq ($(strip $(TCSUPPORT_SAMBA)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_samba.asp
endif
ifeq ($(strip $(TCSUPPORT_FON)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_fonnet.asp
endif
ifeq ($(strip $(RA_PARENTALCONTROL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_parental.asp
endif
ifeq ($(strip $(TCSUPPORT_6RD)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_6rdtunnel.asp
endif
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3090.asp

#rm script which not used
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start_ipv4.sh
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh
ifneq ($(strip $(TCSUPPORT_CWMP)),)	
	rm -rf $(FILESYSTEM_DIR)/usr/etc/igd
endif
#rm app which not used
ifeq ($(strip(TCSUPPORT_TRACEROUTE)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/traceroute
endif
#until now, qos function of main trunk does not use tc tool,so just rm it 
	rm -f $(FILESYSTEM_DIR)/usr/bin/tc
ifeq ($(strip $(TC3262_DRIVERS)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/mpstat
endif
	rm -f $(FILESYSTEM_DIR)/usr/bin/atmcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/adslcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/adslphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/wlancmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd	
endif

#remove extra webpages,fredli
#remove voip webpages
ifeq ($(strip $(TCSUPPORT_VOIP)),)
	find $(FILESYSTEM_DIR)/boaroot/cgi-bin/ -name "*voip*"  | xargs rm -rf
endif
#remove cwmp webpages
ifeq ($(strip $(TCSUPPORT_CWMP)),)
	find $(FILESYSTEM_DIR)/boaroot/cgi-bin/ -name "*cwmp*" | xargs rm -rf
endif
#remove samba webpages
ifeq ($(strip $(TCSUPPORT_SAMBA)),)
	find $(FILESYSTEM_DIR)/boaroot/cgi-bin/ -name "*samba*" | xargs rm -rf
endif

ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
	cd $(FILESYSTEM_DIR)/boaroot/cgi-bin/ && ls|grep -v "WizardOi" > ctrl.txt
	cd $(TOOLS_DIR)/reducer/ && gcc -o Reducer Reducer.c
	if test -e $(TOOLS_DIR)/reducer/Reducer; \
	then cp $(TOOLS_DIR)/reducer/Reducer $(FILESYSTEM_DIR)/boaroot/cgi-bin/; \
	cd $(FILESYSTEM_DIR)/boaroot/cgi-bin/ && ./Reducer; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/*.bak; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Reducer; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/ctrl.txt; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/basic.pbb; \
	rm -f $(TOOLS_DIR)/reducer/Reducer; \
	echo "Reducer successful!"; \
	else echo "Reducer failed!"; \
	fi
endif
ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
endif
ifeq ($(strip $(TCSUPPORT_SSH)),)
	rm -rf $(FILESYSTEM_DIR)/usr/etc/dropbear
endif

ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
#ln /dev/log for syslogd
#	ln -s /tmp/log $(FILESYSTEM_DIR)/dev/log
	$(MAKE) -C $(APP_PUBLIC_DIR)/boa-asp/LogFileParser 
	if test -e $(APP_PUBLIC_DIR)/boa-asp/LogFileParser/LogFileParser; \
	then echo "Compile LogFileParser success"; \
	else echo "Compile LogFileParser error!"; exit 1; \
	fi
	cp $(APP_PUBLIC_DIR)/boa-asp/LogFileParser/LogFileParser $(FILESYSTEM_DIR)/usr/bin
endif

	ln -s /tmp/var/romfile.cfg $(FILESYSTEM_DIR)/boaroot/html/romfile.cfg
ifneq ($(strip $(TCSUPPORT_INIC_HOST)),)
	ln -s /tmp/VDSL_CO_romfile $(FILESYSTEM_DIR)/boaroot/html/VDSL_CO_romfile.cfg
endif	
ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
	ln -s /var/log/currLogFile $(FILESYSTEM_DIR)/boaroot/html/syslog.xlog
else
ifneq ($(strip $(TCSUPPORT_CUC)),)
	ln -s /var/log/currLogFile $(FILESYSTEM_DIR)/boaroot/html/syslog.txt
else
	ln -s /tmp/var/log/messages $(FILESYSTEM_DIR)/boaroot/html/syslog.log
endif
endif
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/.svn/
	rm -rf $(FILESYSTEM_DIR)/boaroot/.svn/
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/.svn/
	
	rm -f $(FILESYSTEM_DIR)/boaroot/boa_CD.conf
	
	chmod 777 $(FILESYSTEM_DIR)/boaroot/cgi-bin/*
#endif //TC_RELEASE_BUILD
#ln tmp,etc & linuxrc
	rm -f $(FILESYSTEM_DIR)/var
	ln -s /tmp/var $(FILESYSTEM_DIR)/var
	rm -f $(FILESYSTEM_DIR)/etc
	ln -s /tmp/etc $(FILESYSTEM_DIR)/etc
	rm -f $(FILESYSTEM_DIR)/linuxrc
	ln -s bin/busybox $(FILESYSTEM_DIR)/linuxrc	
	

#if defined(TCSUPPORT_FTP_USB)
ifneq ($(strip $(TCSUPPORT_FTP_USB)),)
	rm -f $(FILESYSTEM_DIR)/mnt
	ln -s /tmp/mnt $(FILESYSTEM_DIR)/mnt
endif
#endif

	

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/boa.conf
	cp -a $(APP_ETC_SCRIPT_DIR)/boa_mt751020.conf $(FILESYSTEM_DIR)/boaroot/boa.conf
ifneq ($(strip $(TCSUPPORT_CHINESE_ONLY)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/boa.conf
	cp -a $(APP_ETC_SCRIPT_DIR)/boa_mt751020_chinese.conf $(FILESYSTEM_DIR)/boaroot/boa.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_MT7520)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/boa.conf
	cp -a $(APP_ETC_SCRIPT_DIR)/boa_mt751020.conf $(FILESYSTEM_DIR)/boaroot/boa.conf
ifneq ($(strip $(TCSUPPORT_CHINESE_ONLY)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/boa.conf
	cp -a $(APP_ETC_SCRIPT_DIR)/boa_mt751020_chinese.conf $(FILESYSTEM_DIR)/boaroot/boa.conf
endif
endif
	
	

ifneq ($(strip $(TCSUPPORT_CPU_MT7510)),)
ifneq ($(strip $(TCSUPPORT_DMT_CO)),)
	rm -rf $(FILESYSTEM_DIR)/boaroot/
	rm -f $(FILESYSTEM_DIR)/userfs/bin/boa
	rm -f $(FILESYSTEM_DIR)/userfs/bin/bftpd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/dhcrelay
	rm -f $(FILESYSTEM_DIR)/userfs/bin/dnsmasq
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ethphxcmd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ez-ipupdate
	rm -f $(FILESYSTEM_DIR)/userfs/bin/igmpproxy
	rm -f $(FILESYSTEM_DIR)/userfs/bin/inetd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ntpclient
	rm -f $(FILESYSTEM_DIR)/userfs/bin/pppoe-relay
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ripd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/skbmgr
	rm -f $(FILESYSTEM_DIR)/userfs/bin/upnpd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/vconfig
	rm -f $(FILESYSTEM_DIR)/userfs/bin/zebra
	rm -f $(FILESYSTEM_DIR)/usr/bin/adslphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/algcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/portbindcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/pppd
	rm -f $(FILESYSTEM_DIR)/usr/bin/tc
endif
endif

ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	rm -rf $(FILESYSTEM_DIR)/boaroot/
	rm -f $(FILESYSTEM_DIR)/userfs/bin/boa
	rm -f $(FILESYSTEM_DIR)/userfs/bin/bftpd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/dhcrelay
	rm -f $(FILESYSTEM_DIR)/userfs/bin/dnsmasq
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ez-ipupdate
	rm -f $(FILESYSTEM_DIR)/userfs/bin/igmpproxy
	rm -f $(FILESYSTEM_DIR)/userfs/bin/inetd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ntpclient
	rm -f $(FILESYSTEM_DIR)/userfs/bin/pppoe-relay
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ripd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/skbmgr
	rm -f $(FILESYSTEM_DIR)/userfs/bin/upnpd
	rm -f $(FILESYSTEM_DIR)/userfs/bin/vconfig
	rm -f $(FILESYSTEM_DIR)/userfs/bin/zebra
	rm -f $(FILESYSTEM_DIR)/usr/bin/adslphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/algcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/portbindcmd
	rm -f $(FILESYSTEM_DIR)/usr/bin/pppd
	rm -f $(FILESYSTEM_DIR)/usr/bin/tc

	#voip
	rm -f $(FILESYSTEM_DIR)/userfs/bin/sipclient
	rm -f $(FILESYSTEM_DIR)/userfs/bin/mgapp
	rm -f $(FILESYSTEM_DIR)/userfs/bin/tcVoIPApiServer
	rm -f $(FILESYSTEM_DIR)/userfs/bin/evcom
	
ifneq ($(strip $(TCSUPPORT_CPU_EN7512) $(TCSUPPORT_CPU_EN7521)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/pcm*
	rm -f $(FILESYSTEM_DIR)/lib/modules/slic*
	rm -f $(FILESYSTEM_DIR)/lib/modules/ovdsp.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/ortp.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/foip.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/lec.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/ksocket.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/fxs3.ko
endif

	rm -f $(FILESYSTEM_DIR)/lib/libgcc_s.so
endif

fwbuild:
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
	rm -rf $(INIC_CLIENT_FILE_DIR)
endif

ifneq ($(strip $(TCSUPPORT_CUSKITBUILD)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	if test -e $(PROFILE_DIR)/romfile.cfg; \
	then cp $(PROFILE_DIR)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg; \
	fi
	if test -e $(PROFILE_DIR)/romfile_f.cfg; \
	then cp $(PROFILE_DIR)/romfile_f.cfg $(FILESYSTEM_DIR)/userfs/romfile_f.cfg; \
	fi	
	if test -e $(PROFILE_DIR)/romfile_vdsl.cfg; \
	then cp $(PROFILE_DIR)/romfile_vdsl.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg; \
	fi
	if test -e $(PROFILE_DIR)/romfile_vdsl_f.cfg; \
	then cp $(PROFILE_DIR)/romfile_vdsl_f.cfg $(FILESYSTEM_DIR)/userfs/romfile_f.cfg; \
	fi
	if test -e $(PROFILE_DIR)/romfile_epon.cfg; \
	then cp $(PROFILE_DIR)/romfile_epon.cfg $(FILESYSTEM_DIR)/userfs/romfile_epon.cfg; \
	fi
	if test -e $(PROFILE_DIR)/tc3162_dmt.ko; \
	then cp $(PROFILE_DIR)/tc3162_dmt.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko; \
	fi
	if test -e $(PROFILE_DIR)/deviceParaStatic.conf; \
	then cp $(PROFILE_DIR)/deviceParaStatic.conf $(FILESYSTEM_DIR)/usr/etc/deviceParaStatic.conf; \
	fi	
	if test -e $(PROFILE_DIR)/devInf.conf; \
	then cp $(PROFILE_DIR)/devInf.conf $(FILESYSTEM_DIR)/usr/etc/devInf.conf; \
	fi
	if test -e $(PROFILE_DIR)/led.conf; \
	then cp $(PROFILE_DIR)/led.conf $(FILESYSTEM_DIR)/userfs/led.conf; \
	dos2unix $(FILESYSTEM_DIR)/userfs/led.conf; \
	fi
endif
endif

#we create new romfile(with crc checksum) and put it in filesystem,so before creating rootfs,must execute buildromfile.sh first
ifneq ($(strip $(TCSUPPORT_CT_BACKUPROMFILEENCHANCEMENT)),)
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_TCLINUXBUILDER_DIR)
	cd $(APP_TCLINUXBUILDER_DIR) && chmod 777 buildromfile.sh && ./buildromfile.sh
	if test -e $(FILESYSTEM_DIR)/userfs/ctromfile.cfg; \
	then echo "Compile ctromfile.cfg success"; \
	else echo "Compile ctromfile.cfg error!"; exit 1; \
	fi
	rm -f $(FILESYSTEM_DIR)/userfs/romfile.cfg
ifneq ($(strip $(TCSUPPORT_CT_PON_CY) $(TCSUPPORT_CT_PROLINE_SUPPORT)),)
	cp $(FILESYSTEM_DIR)/userfs/romfile_f.cfg $(APP_TCLINUXBUILDER_DIR)
	cd $(APP_TCLINUXBUILDER_DIR) && chmod 777 buildromfile_f.sh && ./buildromfile_f.sh
	if test -e $(FILESYSTEM_DIR)/userfs/ctromfile_f.cfg; \
	then echo "Compile ctromfile_f.cfg success"; \
	else echo "Compile ctromfile_f.cfg error!"; exit 1; \
	fi
#	rm -f $(FILESYSTEM_DIR)/userfs/romfile_f.cfg
endif
	if test -e $(FILESYSTEM_DIR)/userfs/romfile_epon.cfg; \
	then cp $(FILESYSTEM_DIR)/userfs/romfile_epon.cfg $(APP_TCLINUXBUILDER_DIR); \
	cd $(APP_TCLINUXBUILDER_DIR) && chmod 777 buildromfile_epon.sh && ./buildromfile_epon.sh; \
	if test -e $(FILESYSTEM_DIR)/userfs/ctromfile_epon.cfg; \
	then echo "Compile ctromfile_epon.cfg success"; \
	else echo "Compile ctromfile_epon.cfg error!"; exit 1; \
	fi; \
	rm -f $(FILESYSTEM_DIR)/userfs/romfile_epon.cfg; \
	fi
endif

	rm -rf $(TRUNK_DIR)/tmpfilesys
	mkdir $(TRUNK_DIR)/tmpfilesys
	cp -rf $(FILESYSTEM_DIR) $(TRUNK_DIR)/tmpfilesys

	find $(TRUNK_DIR)/tmpfilesys -name ".svn" | xargs rm -rf
	find $(TRUNK_DIR)/tmpfilesys -name "CVS" | xargs rm -rf

ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/usr/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/userfs/bin/*
#	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/lib/modules/*
endif

ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	$(TOOLS_DIR)/mksquashfs4 $(TRUNK_DIR)/tmpfilesys/filesystem $(TRUNK_DIR)/rootfs -comp lzma -nopad -noappend
else
	$(TOOLS_DIR)/mksquashfs-lzma $(TRUNK_DIR)/tmpfilesys/filesystem $(TRUNK_DIR)/rootfs -be -noappend
endif
	
	cp $(TRUNK_DIR)/rootfs $(APP_TCLINUXBUILDER_DIR)
	rm -f $(TRUNK_DIR)/rootfs
	cp $(KERNEL_DIR)/linux.7z $(APP_TCLINUXBUILDER_DIR)

#build slave image
ifneq ($(strip $(TCSUPPORT_CT_DUAL_IMAGE)),)
ifeq ($(strip $(TCSUPPORT_CT_PON)),)
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave
	mkdir $(TRUNK_DIR)/tmpfilesys_slave
	
	cp -rf $(FILESYSTEM_DIR) $(TRUNK_DIR)/tmpfilesys_slave
ifneq ($(strip $(TCSUPPORT_CT)),)
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/*.so
endif

#rm wifi drivers
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/rt3390ap.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/rt3090ap.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/rt5390ap.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/rt3593ap.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/etc/Wireless/RT2860AP/
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/etc/Wireless/RT61AP
	
#ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/etc/xml
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/bin/wscd
#endif

#rm usb drivers
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/usbhost

#rm dlna
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/dlna
	
#rm tc
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/bin/tc
		
#rm voip
#ifneq ($(strip $(TCSUPPORT_VOIP)),)
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/pcm*
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/slic*
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/ovdsp.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/ortp.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/foip.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/lec.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/ksocket.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/fxs3.ko
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/sipclient
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/evcom
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/mgapp
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/tcVoIPApiServer
#endif
		
#rm kernel file
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/2.6.36/kernel/net/sched/
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/lib/modules/2.6.36/kernel/net/sunrpc/
	
#rm gui
#	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin
#	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/html
	mkdir $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp	
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/content.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/net-wanset.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/net-dhcp.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/net-tr069.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/sta-device.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/sta-user.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/sta-network.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/logout.cgi $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/index.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/index2.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp
#	cp -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin/index3.asp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp

	rm -rf $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin
	mv $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin_tmp $(TRUNK_DIR)/tmpfilesys_slave/filesystem/boaroot/cgi-bin


	find $(TRUNK_DIR)/tmpfilesys_slave -name ".svn" | xargs rm -rf
	find $(TRUNK_DIR)/tmpfilesys_slave -name "CVS" | xargs rm -rf
	
ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys_slave/filesystem/usr/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys_slave/filesystem/userfs/bin/*
endif

ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	$(TOOLS_DIR)/mksquashfs4 $(TRUNK_DIR)/tmpfilesys_slave/filesystem $(TRUNK_DIR)/rootfs_slave -comp lzma -nopad -noappend
else
	$(TOOLS_DIR)/mksquashfs-lzma $(TRUNK_DIR)/tmpfilesys_slave/filesystem $(TRUNK_DIR)/rootfs_slave -be -noappend
endif

	cp $(TRUNK_DIR)/rootfs_slave $(APP_TCLINUXBUILDER_DIR)
	rm -f $(TRUNK_DIR)/rootfs_slave
	rm -rf $(TRUNK_DIR)/tmpfilesys_slave
endif
endif

ifneq ($(strip $(TCSUPPORT_CT_BACKUPROMFILEENCHANCEMENT)),)
ifneq ($(strip $(TCSUPPORT_CT_PON_CY) $(TCSUPPORT_CT_PROLINE_SUPPORT)),)
	cp $(FILESYSTEM_DIR)/userfs/ctromfile_f.cfg $(APP_TCLINUXBUILDER_DIR)
else
	cp $(FILESYSTEM_DIR)/userfs/ctromfile.cfg $(APP_TCLINUXBUILDER_DIR)
endif
else
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_TCLINUXBUILDER_DIR)
endif
	cd $(APP_TCLINUXBUILDER_DIR) && ./buildImage.sh
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux.bin $(PROJECT_DIR)/images	
ifneq ($(strip $(TCSUPPORT_BOOTROM_LARGE_SIZE)),)
ifneq ($(strip $(TCSUPPORT_BB_NAND)),)
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone $(PROJECT_DIR)/images/tclinux_allinone_spi
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone.swap $(PROJECT_DIR)/images/tclinux_allinone_spi.swap
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone_nand $(PROJECT_DIR)/images
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone_nand.swap $(PROJECT_DIR)/images
else
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone $(PROJECT_DIR)/images
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone.swap $(PROJECT_DIR)/images
endif
else	
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone $(PROJECT_DIR)/images
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone.swap $(PROJECT_DIR)/images
endif
ifneq ($(strip $(TCSUPPORT_CT_DUAL_IMAGE)),)
ifeq ($(strip $(TCSUPPORT_CT_PON)),)
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_slave.bin $(PROJECT_DIR)/images
else
ifneq ($(strip $(TCSUPPORT_CY_E8_SFU)),)
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_slave.bin $(PROJECT_DIR)/images
endif
ifneq ($(strip $(TCSUPPORT_CT_PON_SMALLSYSTEM)),)
	cp $(APP_TCLINUXBUILDER_DIR)/small_slave.bin $(PROJECT_DIR)/images/tclinux_slave.bin
endif
endif
endif
	rm -rf $(TRUNK_DIR)/tmpfilesys

#Copy MT7515 tclinux_allinone to filesystem/userfs/VDSL_CO_file
ifneq ($(strip $(TCSUPPORT_INIC_CLIENT)),)
	mkdir -p $(INIC_CLIENT_FILE_DIR)
	cp $(INIC_CLIENT_FILE_BACKUP_DIR)/bootext.ram $(INIC_CLIENT_FILE_DIR)
	cp $(PROJECT_DIR)/images/tclinux_allinone $(INIC_CLIENT_FILE_DIR)/VDSL_CO_allinone
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg $(INIC_CLIENT_FILE_DIR)/VDSL_CO_default_romfile
	cp $(APP_PRIVATE_DIR)/etc_script/dmt_co/rcS_bak $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif

devkitgen:
ifeq ($(strip $(RELEASEBSP)),)
ifeq ($(strip $(CUSTOMERRELEASE)),)
	rm -rf ../evo_dk
	mkdir ../evo_dk
	mkdir -p ../evo_dk/apps/private
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
	mkdir ../evo_dk/linux-2.6.36
	cp $(KERNEL_DIR)/linux.7z ../evo_dk/linux-2.6.36/.
else
	mkdir ../evo_dk/linux
	cp $(KERNEL_DIR)/linux.7z ../evo_dk/linux/.
endif
	cp -rf $(TRUNK_DIR)/filesystem ../evo_dk/
	cp -rf $(TRUNK_DIR)/Makefile ../evo_dk/
	cp -rf $(TRUNK_DIR)/Project ../evo_dk/
	cp -rf $(TOOLS_DIR) ../evo_dk/
	cp -rf $(APP_TCLINUXBUILDER_DIR) ../evo_dk/apps/private/
	echo -n "osbnq fakeroot make PROFILE=" > ../evo_dk/build.sh
	echo -n $(PROFILE) >> ../evo_dk/build.sh
ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
	echo " CUSTOM=CT TCSUPPORT_CUSKITBUILD=y fwgen" >> ../evo_dk/build.sh
else
ifneq ($(strip $(TCSUPPORT_CPU_EN7512)),)
	echo " fwgen" >> ../evo_dk/build.sh
else
	echo " KERNEL_2_6_36=1 fwgen" >> ../evo_dk/build.sh
endif

endif
else
	echo " fwgen" >> ../evo_dk/build.sh
endif
	echo "mtkbuild -s -o Project/images" >> ../evo_dk/build.sh
	chmod a+x ../evo_dk/build.sh
# remove files
	rm ../evo_dk/Project/images/tclinux*
	rm ../evo_dk/apps/private/tclinux_builder/tclinux*
	tar -czvf ../devkit_$(TCPLATFORM)_`date +%Y%m%d`.tgz ../evo_dk/
	rm -rf ../evo_dk/ 
endif
endif

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
app_store:
	if test -e $(FILESYSTEM_DIR)/lib/libcrypto.so; \
	then echo "already have openssl"; \
	else touch $(APP_OPENSSL_DIR_V1)/Makefile; \
	$(MAKE) -C $(APP_OPENSSL_DIR_V1); \
	$(MAKE) install -C $(APP_OPENSSL_DIR_V1); \
	if test -e $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so; \
	then echo "Compile openssl success"; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so* $(FILESYSTEM_DIR)/lib -avd; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libssl.so*    $(FILESYSTEM_DIR)/lib -avd; \
	else echo "Compile openssl error!"; exit 1; \
	fi; \
	fi
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/app_store $(FILESYSTEM_DIR)/userfs/bin
app_store_clean:
	echo "TC_BUILD_RELEASECODE: app_store, do nothing!"
else
app_store:
	echo "Build OPENSSL"
	if test -e $(FILESYSTEM_DIR)/lib/libcrypto.so; \
	then echo "already have openssl"; \
	else touch $(APP_OPENSSL_DIR_V1)/Makefile; \
	$(MAKE) -C $(APP_OPENSSL_DIR_V1); \
	$(MAKE) install -C $(APP_OPENSSL_DIR_V1); \
	if test -e $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so; \
	then echo "Compile openssl success"; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libcrypto.so* $(FILESYSTEM_DIR)/lib -avd; \
	cp $(APP_OPENSSL_DIR_V1)/OPSSL/lib/libssl.so*    $(FILESYSTEM_DIR)/lib -avd; \
	else echo "Compile openssl error!"; exit 1; \
	fi; \
	fi
	$(MAKE) -C $(APP_STORE_DIR) 
	if test -e $(APP_STORE_DIR)/app_store; \
	then echo "Compile app_store success"; \
	else echo "Compile app_store error!"; exit 1; \
	fi
	cp $(APP_STORE_DIR)/app_store  $(FILESYSTEM_DIR)/userfs/bin/
	
app_store_clean:
	-$(MAKE) -C $(APP_OPENSSL_DIR_V1) clean
	$(MAKE) -C $(APP_STORE_DIR) clean
	-rm $(FILESYSTEM_DIR)/userfs/bin/app_store $(FILESYSTEM_DIR)/lib/libcrypto.so* $(FILESYSTEM_DIR)/lib/libssl.so*
endif	
else
app_store:
app_store_clean:
endif	

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)	
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
bundle_cmd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/bundle $(FILESYSTEM_DIR)/userfs/bin
bundle_cmd_clean:
	echo "TC_BUILD_RELEASECODE: bundle_cmd , do nothing!"
else
bundle_cmd:
	$(MAKE) -C $(BUNDLE_CMD_DIR)
	if test -e $(BUNDLE_CMD_DIR)/bundle; \
	then echo "Compile bundle success"; \
	else echo "Compile bundle error!"; exit 1; \
	fi
	cp $(BUNDLE_CMD_DIR)/bundle  $(FILESYSTEM_DIR)/userfs/bin/
	
bundle_cmd_clean:
	$(MAKE) -C $(BUNDLE_CMD_DIR) clean
	-rm $(FILESYSTEM_DIR)/userfs/bin/bundle
endif	
else
bundle_cmd:
bundle_cmd_clean:
endif

ifneq ($(strip $(TCSUPPORT_CT_JOYME)),)	
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
bundle_monitor:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/bundle_monitor $(FILESYSTEM_DIR)/userfs/bin
bundle_monitor_clean:
	echo "TC_BUILD_RELEASECODE: bundle_monitor , do nothing!"
else
bundle_monitor:
	$(MAKE) -C $(BUNDLE_MONITOR_DIR)
	if test -e $(BUNDLE_MONITOR_DIR)/bundle_monitor; \
	then echo "Compile bundle success"; \
	else echo "Compile bundle error!"; exit 1; \
	fi
	cp $(BUNDLE_MONITOR_DIR)/bundle_monitor  $(FILESYSTEM_DIR)/userfs/bin/
	
bundle_monitor_clean:
	$(MAKE) -C $(BUNDLE_MONITOR_DIR) clean
	-rm $(FILESYSTEM_DIR)/userfs/bin/bundle_monitor
endif	
else
bundle_monitor:
bundle_monitor_clean:
endif

